{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"themes/jacman/source/js/totop.js","path":"js/totop.js","modified":0,"renderable":1},{"_id":"themes/jacman/source/js/jquery.qrcode-0.12.0.min.js","path":"js/jquery.qrcode-0.12.0.min.js","modified":0,"renderable":1},{"_id":"themes/jacman/source/js/jquery.imagesloaded.min.js","path":"js/jquery.imagesloaded.min.js","modified":0,"renderable":1},{"_id":"themes/jacman/source/js/jquery-2.0.3.min.js","path":"js/jquery-2.0.3.min.js","modified":0,"renderable":1},{"_id":"themes/jacman/source/js/gallery.js","path":"js/gallery.js","modified":0,"renderable":1},{"_id":"themes/jacman/source/img/scrollup.png","path":"img/scrollup.png","modified":0,"renderable":1},{"_id":"themes/jacman/source/img/logo.svg","path":"img/logo.svg","modified":0,"renderable":1},{"_id":"themes/jacman/source/img/logo.png","path":"img/logo.png","modified":0,"renderable":1},{"_id":"themes/jacman/source/img/jacman.jpg","path":"img/jacman.jpg","modified":0,"renderable":1},{"_id":"themes/jacman/source/img/favicon.ico","path":"img/favicon.ico","modified":0,"renderable":1},{"_id":"themes/jacman/source/img/cc-zero.svg","path":"img/cc-zero.svg","modified":0,"renderable":1},{"_id":"themes/jacman/source/img/cc-by.svg","path":"img/cc-by.svg","modified":0,"renderable":1},{"_id":"themes/jacman/source/img/cc-by-sa.svg","path":"img/cc-by-sa.svg","modified":0,"renderable":1},{"_id":"themes/jacman/source/img/cc-by-nd.svg","path":"img/cc-by-nd.svg","modified":0,"renderable":1},{"_id":"themes/jacman/source/img/cc-by-nc.svg","path":"img/cc-by-nc.svg","modified":0,"renderable":1},{"_id":"themes/jacman/source/img/cc-by-nc-sa.svg","path":"img/cc-by-nc-sa.svg","modified":0,"renderable":1},{"_id":"themes/jacman/source/img/cc-by-nc-nd.svg","path":"img/cc-by-nc-nd.svg","modified":0,"renderable":1},{"_id":"themes/jacman/source/img/banner.jpg","path":"img/banner.jpg","modified":0,"renderable":1},{"_id":"themes/jacman/source/img/author.jpg","path":"img/author.jpg","modified":0,"renderable":1},{"_id":"themes/jacman/source/font/fontdiao.woff","path":"font/fontdiao.woff","modified":0,"renderable":1},{"_id":"themes/jacman/source/font/fontdiao.ttf","path":"font/fontdiao.ttf","modified":0,"renderable":1},{"_id":"themes/jacman/source/font/fontdiao.svg","path":"font/fontdiao.svg","modified":0,"renderable":1},{"_id":"themes/jacman/source/font/fontdiao.eot","path":"font/fontdiao.eot","modified":0,"renderable":1},{"_id":"themes/jacman/source/font/fontawesome-webfont.woff","path":"font/fontawesome-webfont.woff","modified":0,"renderable":1},{"_id":"themes/jacman/source/font/fontawesome-webfont.ttf","path":"font/fontawesome-webfont.ttf","modified":0,"renderable":1},{"_id":"themes/jacman/source/font/fontawesome-webfont.svg","path":"font/fontawesome-webfont.svg","modified":0,"renderable":1},{"_id":"themes/jacman/source/font/fontawesome-webfont.eot","path":"font/fontawesome-webfont.eot","modified":0,"renderable":1},{"_id":"themes/jacman/source/font/coveredbyyourgrace-webfont.woff","path":"font/coveredbyyourgrace-webfont.woff","modified":0,"renderable":1},{"_id":"themes/jacman/source/font/coveredbyyourgrace-webfont.ttf","path":"font/coveredbyyourgrace-webfont.ttf","modified":0,"renderable":1},{"_id":"themes/jacman/source/font/coveredbyyourgrace-webfont.svg","path":"font/coveredbyyourgrace-webfont.svg","modified":0,"renderable":1},{"_id":"themes/jacman/source/font/coveredbyyourgrace-webfont.eot","path":"font/coveredbyyourgrace-webfont.eot","modified":0,"renderable":1},{"_id":"themes/jacman/source/font/FontAwesome.otf","path":"font/FontAwesome.otf","modified":0,"renderable":1},{"_id":"themes/jacman/source/fancybox/jquery.fancybox.pack.js","path":"fancybox/jquery.fancybox.pack.js","modified":0,"renderable":1},{"_id":"themes/jacman/source/fancybox/jquery.fancybox.js","path":"fancybox/jquery.fancybox.js","modified":0,"renderable":1},{"_id":"themes/jacman/source/fancybox/jquery.fancybox.css","path":"fancybox/jquery.fancybox.css","modified":0,"renderable":1},{"_id":"themes/jacman/source/fancybox/helpers/jquery.fancybox-thumbs.js","path":"fancybox/helpers/jquery.fancybox-thumbs.js","modified":0,"renderable":1},{"_id":"themes/jacman/source/fancybox/helpers/jquery.fancybox-thumbs.css","path":"fancybox/helpers/jquery.fancybox-thumbs.css","modified":0,"renderable":1},{"_id":"themes/jacman/source/fancybox/helpers/jquery.fancybox-media.js","path":"fancybox/helpers/jquery.fancybox-media.js","modified":0,"renderable":1},{"_id":"themes/jacman/source/fancybox/helpers/jquery.fancybox-buttons.js","path":"fancybox/helpers/jquery.fancybox-buttons.js","modified":0,"renderable":1},{"_id":"themes/jacman/source/fancybox/helpers/jquery.fancybox-buttons.css","path":"fancybox/helpers/jquery.fancybox-buttons.css","modified":0,"renderable":1},{"_id":"themes/jacman/source/fancybox/helpers/fancybox_buttons.png","path":"fancybox/helpers/fancybox_buttons.png","modified":0,"renderable":1},{"_id":"themes/jacman/source/fancybox/fancybox_sprite@2x.png","path":"fancybox/fancybox_sprite@2x.png","modified":0,"renderable":1},{"_id":"themes/jacman/source/fancybox/fancybox_sprite.png","path":"fancybox/fancybox_sprite.png","modified":0,"renderable":1},{"_id":"themes/jacman/source/fancybox/fancybox_overlay.png","path":"fancybox/fancybox_overlay.png","modified":0,"renderable":1},{"_id":"themes/jacman/source/fancybox/fancybox_loading@2x.gif","path":"fancybox/fancybox_loading@2x.gif","modified":0,"renderable":1},{"_id":"themes/jacman/source/fancybox/fancybox_loading.gif","path":"fancybox/fancybox_loading.gif","modified":0,"renderable":1},{"_id":"themes/jacman/source/fancybox/blank.gif","path":"fancybox/blank.gif","modified":0,"renderable":1},{"_id":"themes/jacman/source/css/style.styl","path":"css/style.styl","modified":0,"renderable":1}],"Cache":[{"_id":"source/_posts/dubbox-integration-swagger.md","shasum":"8ac8e5fc17e1c054745a4a7dc38b4c3625cfe8c0","modified":1497511109000,"hash":"d062b50fb8f1794dd68759d061ee49ffa192f7f8"},{"_id":"source/_posts/json-best-practice.md","shasum":"a464ecae52117c702b832c04558b24326ecaec7f","modified":1497510932000,"hash":"4f71cb8d36bba2e1725e6a6109773d01fd7dc613"},{"_id":"source/_posts/oracle2mysql01.md","shasum":"9afb68e7742b9e725563ba8c8a0ea032369ad679","modified":1497511141000,"hash":"56754b25eb198854087c099cb5b8ec68854a3dfd"},{"_id":"source/about/index.md","shasum":"f34f0d8d1c534d20e5b4fcf0bc774ce048202c36","modified":1496801828000,"hash":"9b3b32f312ba291da77a3582f45a9064cc5524b2"},{"_id":"themes/jacman/LICENSE","shasum":"d8780b41bab4b87bdd21eca444cae11af72617f4","modified":1496801828000,"hash":"931516aa36c53eb7843c83d82662eb50cc3c4367"},{"_id":"themes/jacman/README.md","shasum":"b5d265267ed9f44a5edf848033e5ac0491004bd0","modified":1496801828000,"hash":"79be8a49927c8666f1804d7ccd08af8d3268062a"},{"_id":"themes/jacman/README_zh.md","shasum":"9c818b2c1f8c216c439be6bc574469d1dc338c12","modified":1496801828000,"hash":"0854e4c96f53005f3a47e21af3f8aee361719ce4"},{"_id":"themes/jacman/_config-bak.yml","shasum":"8c7ed18b0e4b2985267b1470586401809ad145b7","modified":1496801828000,"hash":"4c51d1409b904d29875bbc1205b9457654b51d67"},{"_id":"themes/jacman/_config.yml","shasum":"a7ad3dc5729a7bbaa65ec2183b4613cda650ffe9","modified":1496801828000,"hash":"45508e262ed19bb981fe64eab66a91bf8e3a8c09"},{"_id":"themes/jacman/languages/zh-CN.yml","shasum":"6e1460594fa50394ac6f11fe9d39dc59478ddd0c","modified":1496801828000,"hash":"1f3b9d00dd4322352b0c9c82a76dc9865a616d41"},{"_id":"themes/jacman/languages/default.yml","shasum":"966be0b585cd3e3b7f0e485c896c24dfdfee423a","modified":1496801828000,"hash":"eea72d6138497287c0b3f4bd93e4f6f62b7aff37"},{"_id":"themes/jacman/languages/zh-TW.yml","shasum":"0e7912c6505592a10efe2db1c994ccc3ebf91239","modified":1496801828000,"hash":"61a02ba818d641579a86fcd7f5926ab1e6ab5f70"},{"_id":"themes/jacman/layout/_partial/after_footer.ejs","shasum":"f0772c9de0431384d4e852358ee425a1cdf3ea6d","modified":1496801828000,"hash":"c703b0c25139b8a5f8f9d24a334a07905e2b7987"},{"_id":"themes/jacman/layout/_partial/analytics.ejs","shasum":"ebaec2ae044ada08825d8e8af9614821f779d3dd","modified":1496801828000,"hash":"697601996220fe0a0f9cd628be67dec3c86ae2aa"},{"_id":"themes/jacman/layout/_partial/article.ejs","shasum":"00c00b4a961ac1f7bc8ee688ce134fe0c454edc6","modified":1496801828000,"hash":"261ecacb8456f4cb972632b6a9103860fa63b9a3"},{"_id":"themes/jacman/layout/_partial/archive.ejs","shasum":"90502fc2f5b0a5681a6c6588a9ed6ad297e32890","modified":1496801828000,"hash":"2c7395e7563fe016521712a645c28a13f952d52a"},{"_id":"themes/jacman/layout/_partial/article_row.ejs","shasum":"2c1f1edfeaebaafe4265d58e0b8110e71673da40","modified":1496801828000,"hash":"4cb855d91ece7f67b2ca0992fffa55472d0b9c93"},{"_id":"themes/jacman/layout/_partial/categories.ejs","shasum":"2b77ff6cbc8571cab27c3bdc4ad51a79510bbca2","modified":1496801828000,"hash":"8a52d0344d5bce1925cf586ed73c11192925209b"},{"_id":"themes/jacman/layout/_partial/footer.ejs","shasum":"5e02117ed541872115386a0c0257d94a2b3b2bb1","modified":1496801828000,"hash":"32db7e7c8171530d29c3878f387c4438d6057508"},{"_id":"themes/jacman/layout/_partial/head.ejs","shasum":"210bb4c1ec77d998dfd93baeb4e3a0b46a925cd1","modified":1496801828000,"hash":"761941be4922cd3c177c8130296b909bf7db5c09"},{"_id":"themes/jacman/layout/_partial/header.ejs","shasum":"795435cc84c46a18e4ac597435a81f66eb86b0c4","modified":1496801828000,"hash":"18515612344ff048b9372b91b7eef6f3b143801f"},{"_id":"themes/jacman/layout/_partial/mathjax.ejs","shasum":"5636df1f2b6a8d02986d866e3824ec60430046e6","modified":1496801828000,"hash":"d42994ac696f52ba99c1cbac382cd76d5b04a3e8"},{"_id":"themes/jacman/layout/_partial/pagination.ejs","shasum":"6cf37f844f150af4bbe212610da61e5140317de9","modified":1496801828000,"hash":"6146ac37dfb4f8613090bc52b3fc8cfa911a186a"},{"_id":"themes/jacman/layout/_partial/post/article.ejs","shasum":"c01220f0af629f9e23bf125bdc1beef8afc206ef","modified":1496801828000,"hash":"b09e3acea7076e1f01dfe0c2295e19951ea09437"},{"_id":"themes/jacman/layout/_partial/post/catetags.ejs","shasum":"20349dcde9942885d5eae1c302ef26b1b8484f3f","modified":1496801828000,"hash":"0e37bababc8f4659f5b59a552a946b46d89e4158"},{"_id":"themes/jacman/layout/_partial/post/comment.ejs","shasum":"9db7847461cf8b10a9cd5434deb690c6b26af6f1","modified":1496801828000,"hash":"c88bc8f5805173920a5fdd7e9234a850e3d8e151"},{"_id":"themes/jacman/layout/_partial/post/footer.ejs","shasum":"5b9f5ee6a2cc8bd557550bbdc1a03d237681114e","modified":1496801828000,"hash":"b12ec08a5845a3d8c01257614f1dfead879c87d2"},{"_id":"themes/jacman/layout/_partial/post/gallery.ejs","shasum":"fc23ef9b5a412e05436f68ff47146b860d2d4225","modified":1496801828000,"hash":"fafc2501d7e65983b0f5c2b58151ca12e57c0574"},{"_id":"themes/jacman/layout/_partial/post/header.ejs","shasum":"351e771b1b38244560fc52cf60d91263d3d63eef","modified":1496801828000,"hash":"36a705942b691abe0d643ea8afa339981b32f6f2"},{"_id":"themes/jacman/layout/_partial/post/jiathis.ejs","shasum":"12b7360326691ebf06bea5d7ee4d54c41f64e2ec","modified":1496801828000,"hash":"d7f5960039ac74924559ab6ba03c64457b8f0966"},{"_id":"themes/jacman/layout/_partial/post/pagination.ejs","shasum":"091512e19cfcf5bde2a699b211f99874f26587ad","modified":1496801828000,"hash":"7de9c07a4c968429a8088c31a28b7f3a993ded1b"},{"_id":"themes/jacman/layout/_partial/search.ejs","shasum":"732fcd909f6dac557629206dc7e93a7083cda084","modified":1496801828000,"hash":"1083824a6c6c3df02767f2f3b727aee78ebb76ec"},{"_id":"themes/jacman/layout/_partial/sidebar.ejs","shasum":"846d96ff73409b9a8b34f3cab691821096c03e1d","modified":1496801828000,"hash":"c4f527fff0070fbe65919053a16224412317f40d"},{"_id":"themes/jacman/layout/_partial/tags.ejs","shasum":"c5c858742b29e6364da2e1d098e7d6cd8cef038f","modified":1496801828000,"hash":"b33b2b5d08f1d53a8de25a95f660f7f1cea7b3cb"},{"_id":"themes/jacman/layout/_partial/tinysou_search.ejs","shasum":"67a55a4d94cca2db11a2636f1f2c92c208688b14","modified":1496801828000,"hash":"06ecddc8a9d40b480fe2e958af1dab857a9d5441"},{"_id":"themes/jacman/layout/_partial/totop.ejs","shasum":"224d078ba1f2c33c52d5e867af71c5fe9f1bdf45","modified":1496801828000,"hash":"bea5bb7cb9350b8af7d97a8d223af63a5b30ab78"},{"_id":"themes/jacman/layout/_widget/archive.ejs","shasum":"b82d7fb0d1119738a9f9bb747d415e8c99e454ae","modified":1496801828000,"hash":"39ea6b7888406fbd1b4cf236ebd718e881493374"},{"_id":"themes/jacman/layout/_widget/category.ejs","shasum":"2c1b9ac7666d7d5b9aaf8f33588e10451c4b7841","modified":1496801828000,"hash":"c1fae96b5053da021bcc04ab2ce5c2c8d30de8a2"},{"_id":"themes/jacman/layout/_widget/douban.ejs","shasum":"6dcb532d02325d2a9f5fb92831401552a5540aa8","modified":1496801828000,"hash":"e3820c36169e88663e6c9177666b2904c1ce47e6"},{"_id":"themes/jacman/layout/_widget/github-card.ejs","shasum":"c8a6fdb883be27f5e7daef6fa8899c17f51548a0","modified":1496801828000,"hash":"5c759b6ea214bac56a393247de27e67ce73fb33f"},{"_id":"themes/jacman/layout/_widget/links.ejs","shasum":"bd73be669ddc47e1daab38736d1cecc3f37662e2","modified":1496801828000,"hash":"e49868063439c2092cdf9a8ec82cc295b0e42f66"},{"_id":"themes/jacman/layout/_widget/rss.ejs","shasum":"ebfb11bdd603cd6e4dcf3949cc52e38009615c25","modified":1496801828000,"hash":"0a4b5f2a2e36a1d504fe2e7c6c8372cbb4628aab"},{"_id":"themes/jacman/layout/_widget/tag.ejs","shasum":"43b1c29fea51f849ec0bf85a6d91fe0507f01503","modified":1496801828000,"hash":"7e82ad9c916b9ce871b2f65ce8f283c5ba47947b"},{"_id":"themes/jacman/layout/_widget/tagcloud.ejs","shasum":"317d420f5448c7452290e37f0ed8516cb73f4068","modified":1496801828000,"hash":"10a1001189d5c28ce6d42494563b9637c302b454"},{"_id":"themes/jacman/layout/_widget/weibo.ejs","shasum":"9933c1755428bba50b10e5655bb474a2356f4993","modified":1496801828000,"hash":"9c4c18dc0f7a853916c9c78880cda628d21cd5b4"},{"_id":"themes/jacman/layout/archive.ejs","shasum":"a18842e3d719fe3ca9b977a6995f8facc75c8673","modified":1496801828000,"hash":"a18842e3d719fe3ca9b977a6995f8facc75c8673"},{"_id":"themes/jacman/layout/category.ejs","shasum":"9b740fc33f6f028df60f0bc4312bf3ebd03aa8ea","modified":1496801828000,"hash":"9b740fc33f6f028df60f0bc4312bf3ebd03aa8ea"},{"_id":"themes/jacman/layout/index.ejs","shasum":"b832b280ec0a2b741e73a2300f219f0075c99278","modified":1496801828000,"hash":"75cef2172c286994af412e11ab7f4f5a0daaf1f5"},{"_id":"themes/jacman/layout/layout.ejs","shasum":"ceeb2a7410b96b81310ed9b1279f62e953b0a6ca","modified":1496801828000,"hash":"5b4289a4526899809b9c2facea535367ff51ba2b"},{"_id":"themes/jacman/layout/page.ejs","shasum":"bd6bbf2ea8e183bd835867ff617dc6366b56748c","modified":1496801828000,"hash":"bd6bbf2ea8e183bd835867ff617dc6366b56748c"},{"_id":"themes/jacman/layout/post.ejs","shasum":"3114134775bdde5a83cf14feb019606fa2b2b2be","modified":1496801828000,"hash":"3114134775bdde5a83cf14feb019606fa2b2b2be"},{"_id":"themes/jacman/layout/tag.ejs","shasum":"45150a2365768b6b67880193c9264ad2bb4814db","modified":1496801828000,"hash":"45150a2365768b6b67880193c9264ad2bb4814db"},{"_id":"themes/jacman/scripts/fancybox.js","shasum":"4c130fc242cf9b59b5df6ca5eae3b14302311e8c","modified":1496801828000,"hash":"aa411cd072399df1ddc8e2181a3204678a5177d9"},{"_id":"themes/jacman/source/css/_base/font.styl","shasum":"5699c270be7b28c5b2c36f453317ccd42789fd3d","modified":1496801828000,"hash":"c8a0faf43b08e37ad07a5669db76d595da966159"},{"_id":"themes/jacman/source/css/_base/highlight/highlight.styl","shasum":"2aee0cdb80fce512cde66ad229b9e5ee42c0d7b4","modified":1496801828000,"hash":"91b62bfc58390b0d5db782a75be6965ee3665eb3"},{"_id":"themes/jacman/source/css/_base/highlight/theme.styl","shasum":"d280f9ab32d7bf177adb5f7c858444cbfbac651a","modified":1496801828000,"hash":"e3a59bd427ba37a54ead9eeba9a5356b3f720a48"},{"_id":"themes/jacman/source/css/_base/public.styl","shasum":"2c23f3f47eb768b31d4d86d56255ffb1e8bcf6c9","modified":1496801828000,"hash":"f016180726019927b9a835ed01e04d153f27a149"},{"_id":"themes/jacman/source/css/_base/variable.styl","shasum":"0b7d517e12102a99be82bc1a9104bb6bfd4ca10b","modified":1496801828000,"hash":"cb652eb83c28a208743fabab92de896f8b7cbf7b"},{"_id":"themes/jacman/source/css/_partial/article.styl","shasum":"0bcb684376fcbf4be42d1df5dd02c395760f7ffb","modified":1496801828000,"hash":"c69641b4a34a8c62986b335414413dbde26de25e"},{"_id":"themes/jacman/source/css/_partial/aside.styl","shasum":"4746783dc7993ac45d8a0e7a9d347bfe137111fe","modified":1496801828000,"hash":"506fde1d67ce750452cbe84bee01a19c7d027c5e"},{"_id":"themes/jacman/source/css/_partial/duoshuo.styl","shasum":"3ec423b734639614fbd11ec2c3445d3a03f5231d","modified":1496801828000,"hash":"e85f1192283f043115c272a9deb3cb6ced793990"},{"_id":"themes/jacman/source/css/_partial/footer.styl","shasum":"0300d7d289eceb3933c1eebf38f8d10f425c1128","modified":1496801828000,"hash":"1911613a19b605a58f801c21b03b5d4c83b90f9c"},{"_id":"themes/jacman/source/css/_partial/gallery.styl","shasum":"75843d727319b1d07ad4b8c2e969036ce0d4f362","modified":1496801828000,"hash":"7246809f4ce3166ec1b259bf475cae1a48e29aad"},{"_id":"themes/jacman/source/css/_partial/header.styl","shasum":"f1ae52a4f41d4cfdd66cb186b0329af904fead4f","modified":1496801828000,"hash":"5121ceb712be3f2dde98b8b6e589b546e19eab8f"},{"_id":"themes/jacman/source/css/_partial/helper.styl","shasum":"3ca7266a44240093143d0c55c74bb6daf579e298","modified":1496801828000,"hash":"1136600932b97534b88465bf05ef313630b2de3d"},{"_id":"themes/jacman/source/css/_partial/index.styl","shasum":"1f9d8c513f05790742c17fc125cb6a1ad374065a","modified":1496801828000,"hash":"a72ff14effd276015264f870f47ed8f8413bf5d3"},{"_id":"themes/jacman/source/css/_partial/totop.styl","shasum":"b48360e757d501027b7dbe093859d03795476930","modified":1496801828000,"hash":"96363d7c5aaed5f649667fc0752a62620a67e872"},{"_id":"themes/jacman/source/fancybox/blank.gif","shasum":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1496801828000,"hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a"},{"_id":"themes/jacman/source/css/style.styl","shasum":"4610c477560086880acc1ba71c3a72e7c89ecdb7","modified":1496801828000,"hash":"a0a45af186a72ae68979bf26f2a5d0d2303189ca"},{"_id":"themes/jacman/source/fancybox/fancybox_loading.gif","shasum":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1496801828000,"hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c"},{"_id":"themes/jacman/source/fancybox/fancybox_loading@2x.gif","shasum":"273b123496a42ba45c3416adb027cd99745058b0","modified":1496801828000,"hash":"273b123496a42ba45c3416adb027cd99745058b0"},{"_id":"themes/jacman/source/fancybox/fancybox_overlay.png","shasum":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1496801828000,"hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0"},{"_id":"themes/jacman/source/fancybox/fancybox_sprite@2x.png","shasum":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1496801828000,"hash":"30c58913f327e28f466a00f4c1ac8001b560aed8"},{"_id":"themes/jacman/source/fancybox/fancybox_sprite.png","shasum":"17df19f97628e77be09c352bf27425faea248251","modified":1496801828000,"hash":"17df19f97628e77be09c352bf27425faea248251"},{"_id":"themes/jacman/source/fancybox/helpers/fancybox_buttons.png","shasum":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1496801828000,"hash":"e385b139516c6813dcd64b8fc431c364ceafe5f3"},{"_id":"themes/jacman/source/fancybox/helpers/jquery.fancybox-buttons.css","shasum":"6394c48092085788a8c0ef72670b0652006231a1","modified":1496801828000,"hash":"1a9d8e5c22b371fcc69d4dbbb823d9c39f04c0c8"},{"_id":"themes/jacman/source/fancybox/helpers/jquery.fancybox-buttons.js","shasum":"4c9c395d705d22af7da06870d18f434e2a2eeaf9","modified":1496801828000,"hash":"dc3645529a4bf72983a39fa34c1eb9146e082019"},{"_id":"themes/jacman/source/fancybox/helpers/jquery.fancybox-media.js","shasum":"e14c32cc6823b81b2f758512f13ed8eb9ef2b454","modified":1496801828000,"hash":"294420f9ff20f4e3584d212b0c262a00a96ecdb3"},{"_id":"themes/jacman/source/fancybox/helpers/jquery.fancybox-thumbs.css","shasum":"b88b589f5f1aa1b3d87cc7eef34c281ff749b1ae","modified":1496801828000,"hash":"4ac329c16a5277592fc12a37cca3d72ca4ec292f"},{"_id":"themes/jacman/source/fancybox/helpers/jquery.fancybox-thumbs.js","shasum":"83cdfea43632b613771691a11f56f99d85fb6dbd","modified":1496801828000,"hash":"47da1ae5401c24b5c17cc18e2730780f5c1a7a0c"},{"_id":"themes/jacman/source/fancybox/jquery.fancybox.css","shasum":"2e54d51d21e68ebc4bb870f6e57d3bfb660d4f9c","modified":1496801828000,"hash":"aaa582fb9eb4b7092dc69fcb2d5b1c20cca58ab6"},{"_id":"themes/jacman/source/fancybox/jquery.fancybox.js","shasum":"58193c802f307ec9bc9e586c0e8a13ebef45d2f8","modified":1496801828000,"hash":"d08b03a42d5c4ba456ef8ba33116fdbb7a9cabed"},{"_id":"themes/jacman/source/fancybox/jquery.fancybox.pack.js","shasum":"2da892a02778236b64076e5e8802ef0566e1d9e8","modified":1496801828000,"hash":"9e0d51ca1dbe66f6c0c7aefd552dc8122e694a6e"},{"_id":"themes/jacman/source/font/FontAwesome.otf","shasum":"b5b4f9be85f91f10799e87a083da1d050f842734","modified":1496801828000,"hash":"b5b4f9be85f91f10799e87a083da1d050f842734"},{"_id":"themes/jacman/source/font/coveredbyyourgrace-webfont.eot","shasum":"a17d0f10534303e40f210c506ebb8703fa23b7de","modified":1496801828000,"hash":"a17d0f10534303e40f210c506ebb8703fa23b7de"},{"_id":"themes/jacman/source/font/coveredbyyourgrace-webfont.ttf","shasum":"194ccb4acf77a03dc25bcc174edb266143704fec","modified":1496801828000,"hash":"194ccb4acf77a03dc25bcc174edb266143704fec"},{"_id":"themes/jacman/source/font/coveredbyyourgrace-webfont.woff","shasum":"c6f8dc1a2f6ce914f120e80a876b8fd77b98888e","modified":1496801828000,"hash":"c6f8dc1a2f6ce914f120e80a876b8fd77b98888e"},{"_id":"themes/jacman/source/font/fontawesome-webfont.eot","shasum":"7619748fe34c64fb157a57f6d4ef3678f63a8f5e","modified":1496801828000,"hash":"7619748fe34c64fb157a57f6d4ef3678f63a8f5e"},{"_id":"themes/jacman/source/font/fontawesome-webfont.woff","shasum":"04c3bf56d87a0828935bd6b4aee859995f321693","modified":1496801828000,"hash":"04c3bf56d87a0828935bd6b4aee859995f321693"},{"_id":"themes/jacman/source/font/fontdiao.eot","shasum":"9544a0d7ba208989302bc4da5a184faeb0e883c9","modified":1496801828000,"hash":"9544a0d7ba208989302bc4da5a184faeb0e883c9"},{"_id":"themes/jacman/source/font/fontdiao.ttf","shasum":"ee9fd7be2493c9bf6d2841044e69a0830d9d3fab","modified":1496801828000,"hash":"ee9fd7be2493c9bf6d2841044e69a0830d9d3fab"},{"_id":"themes/jacman/source/font/fontdiao.woff","shasum":"71f54eb6e98aa28cafeb04aab71c0e5b349ea89f","modified":1496801828000,"hash":"71f54eb6e98aa28cafeb04aab71c0e5b349ea89f"},{"_id":"themes/jacman/source/img/author.jpg","shasum":"091f7c03f0e81979b64a6e4ce1f749a5eba0386b","modified":1496801828000,"hash":"091f7c03f0e81979b64a6e4ce1f749a5eba0386b"},{"_id":"themes/jacman/source/img/cc-by-nc-nd.svg","shasum":"bc3588c9b2d7c68830524783120ff6cf957cf668","modified":1496801828000,"hash":"c6524ece3f8039a5f612feaf865d21ec8a794564"},{"_id":"themes/jacman/source/img/cc-by-nc-sa.svg","shasum":"6f55543d1fb9cbc436c101d24f802dec7b41efc3","modified":1496801828000,"hash":"3031be41e8753c70508aa88e84ed8f4f653f157e"},{"_id":"themes/jacman/source/img/cc-by-nc.svg","shasum":"6f076713fb9bf934aa2c1046bdf2cf2e37bc1eab","modified":1496801828000,"hash":"8d39b39d88f8501c0d27f8df9aae47136ebc59b7"},{"_id":"themes/jacman/source/img/cc-by-nd.svg","shasum":"42cd73da328077ccc92f859bb8f3cf621b3484f8","modified":1496801828000,"hash":"c563508ce9ced1e66948024ba1153400ac0e0621"},{"_id":"themes/jacman/source/img/cc-by-sa.svg","shasum":"70c1535f43e54e5ff35ca81419e77e4c0c301398","modified":1496801828000,"hash":"aa4742d733c8af8d38d4c183b8adbdcab045872e"},{"_id":"themes/jacman/source/img/cc-by.svg","shasum":"e92a33c32d1dac8ed94849b2b4e6456e887efe70","modified":1496801828000,"hash":"28a0a4fe355a974a5e42f68031652b76798d4f7e"},{"_id":"themes/jacman/source/img/cc-zero.svg","shasum":"9bfb52b2f63527a7049247bf00d44e6dc1170e7d","modified":1496801828000,"hash":"87669bf8ac268a91d027a0a4802c92a1473e9030"},{"_id":"themes/jacman/source/img/favicon.ico","shasum":"59792f8eea6aa0f176fb20195a34c3d3305549b6","modified":1496801828000,"hash":"59792f8eea6aa0f176fb20195a34c3d3305549b6"},{"_id":"themes/jacman/source/img/jacman.jpg","shasum":"36d7503393422d70807bd0b248ba92e0cd62fe46","modified":1496801828000,"hash":"36d7503393422d70807bd0b248ba92e0cd62fe46"},{"_id":"themes/jacman/source/img/logo.png","shasum":"d393075244e6f1290226376b636ea88a2ed80704","modified":1496801828000,"hash":"d393075244e6f1290226376b636ea88a2ed80704"},{"_id":"themes/jacman/source/img/logo.svg","shasum":"cef3f0bb4bf3661dd3a58c81b9a7be79601a0bfb","modified":1496801828000,"hash":"0eb0ae32d95c6f0b14adb9ab491775dcd1da3af3"},{"_id":"themes/jacman/source/img/scrollup.png","shasum":"2137d4f1739aa8aa3fcb0348c3ddf1e41d62f2e3","modified":1496801828000,"hash":"2137d4f1739aa8aa3fcb0348c3ddf1e41d62f2e3"},{"_id":"themes/jacman/source/js/gallery.js","shasum":"735a714e54f0ac229f292a90df3a1f882904f6c7","modified":1496801828000,"hash":"f8a4ba7fb8349cca374a3c69fff9b2bf21f742ed"},{"_id":"themes/jacman/source/js/jquery.imagesloaded.min.js","shasum":"28ef4346743a60c896a9ae492a544c0854904350","modified":1496801828000,"hash":"4109837b1f6477bacc6b095a863b1b95b1b3693f"},{"_id":"themes/jacman/source/js/jquery.qrcode-0.12.0.min.js","shasum":"5f690e8588c8493eb9406aa68fbf1765aaff9476","modified":1496801828000,"hash":"57c3987166a26415a71292162690e82c21e315ad"},{"_id":"themes/jacman/source/js/totop.js","shasum":"48648ec9c86e9ab491831e5a029e6f8864934149","modified":1496801828000,"hash":"cad23c5ea7163d1e5c05a0fd3ef9233469da10cb"},{"_id":"themes/jacman/source/font/coveredbyyourgrace-webfont.svg","shasum":"739808e56a56e10a03bc93d03eb55abd19590942","modified":1496801828000,"hash":"eabdb262d8e246865dfb56031f01ff6e8d2f9d53"},{"_id":"themes/jacman/source/font/fontawesome-webfont.ttf","shasum":"7f09c97f333917034ad08fa7295e916c9f72fd3f","modified":1496801828000,"hash":"7f09c97f333917034ad08fa7295e916c9f72fd3f"},{"_id":"themes/jacman/source/font/fontdiao.svg","shasum":"50e0247e9d39756843b7e4f720503b37bfb6154b","modified":1496801828000,"hash":"334a94e6a66a8b089be7315d876bec93efe38d2b"},{"_id":"themes/jacman/source/js/jquery-2.0.3.min.js","shasum":"cd981db035ec1b6f502fca78fd394c5bd438aba1","modified":1496801828000,"hash":"a0ae3697b0ab8c0e8bd3186c80db42abd6d97a8d"},{"_id":"themes/jacman/source/font/fontawesome-webfont.svg","shasum":"a275426daefd3716c53561fad121d258a7f05b47","modified":1496801828000,"hash":"46fcc0194d75a0ddac0a038aee41b23456784814"},{"_id":"themes/jacman/source/img/banner.jpg","shasum":"5104860c4f8b2e84ef734ba6c37fe7a288bf0d74","modified":1496801828000,"hash":"5104860c4f8b2e84ef734ba6c37fe7a288bf0d74"},{"_id":"public/js/totop.js","hash":"cad23c5ea7163d1e5c05a0fd3ef9233469da10cb","modified":1497511198988},{"_id":"public/js/jquery.qrcode-0.12.0.min.js","hash":"57c3987166a26415a71292162690e82c21e315ad","modified":1497511198989},{"_id":"public/js/jquery.imagesloaded.min.js","hash":"4109837b1f6477bacc6b095a863b1b95b1b3693f","modified":1497511198988},{"_id":"public/js/jquery-2.0.3.min.js","hash":"a0ae3697b0ab8c0e8bd3186c80db42abd6d97a8d","modified":1497511198989},{"_id":"public/js/gallery.js","hash":"f8a4ba7fb8349cca374a3c69fff9b2bf21f742ed","modified":1497511198989},{"_id":"public/img/scrollup.png","hash":"2137d4f1739aa8aa3fcb0348c3ddf1e41d62f2e3","modified":1497511198197},{"_id":"public/img/logo.svg","hash":"0eb0ae32d95c6f0b14adb9ab491775dcd1da3af3","modified":1497511198197},{"_id":"public/img/logo.png","hash":"d393075244e6f1290226376b636ea88a2ed80704","modified":1497511198197},{"_id":"public/img/jacman.jpg","hash":"36d7503393422d70807bd0b248ba92e0cd62fe46","modified":1497511198197},{"_id":"public/img/favicon.ico","hash":"59792f8eea6aa0f176fb20195a34c3d3305549b6","modified":1497511198197},{"_id":"public/img/cc-zero.svg","hash":"87669bf8ac268a91d027a0a4802c92a1473e9030","modified":1497511198197},{"_id":"public/img/cc-by.svg","hash":"28a0a4fe355a974a5e42f68031652b76798d4f7e","modified":1497511198197},{"_id":"public/img/cc-by-sa.svg","hash":"aa4742d733c8af8d38d4c183b8adbdcab045872e","modified":1497511198197},{"_id":"public/img/cc-by-nd.svg","hash":"c563508ce9ced1e66948024ba1153400ac0e0621","modified":1497511198197},{"_id":"public/img/cc-by-nc.svg","hash":"8d39b39d88f8501c0d27f8df9aae47136ebc59b7","modified":1497511198197},{"_id":"public/img/cc-by-nc-sa.svg","hash":"3031be41e8753c70508aa88e84ed8f4f653f157e","modified":1497511198198},{"_id":"public/img/cc-by-nc-nd.svg","hash":"c6524ece3f8039a5f612feaf865d21ec8a794564","modified":1497511198198},{"_id":"public/img/banner.jpg","hash":"5104860c4f8b2e84ef734ba6c37fe7a288bf0d74","modified":1497511198990},{"_id":"public/img/author.jpg","hash":"091f7c03f0e81979b64a6e4ce1f749a5eba0386b","modified":1497511198199},{"_id":"public/font/fontdiao.woff","hash":"71f54eb6e98aa28cafeb04aab71c0e5b349ea89f","modified":1497511198199},{"_id":"public/font/fontdiao.ttf","hash":"ee9fd7be2493c9bf6d2841044e69a0830d9d3fab","modified":1497511198199},{"_id":"public/font/fontdiao.svg","hash":"334a94e6a66a8b089be7315d876bec93efe38d2b","modified":1497511198974},{"_id":"public/font/fontdiao.eot","hash":"9544a0d7ba208989302bc4da5a184faeb0e883c9","modified":1497511198199},{"_id":"public/font/fontawesome-webfont.woff","hash":"04c3bf56d87a0828935bd6b4aee859995f321693","modified":1497511198199},{"_id":"public/font/fontawesome-webfont.ttf","hash":"7f09c97f333917034ad08fa7295e916c9f72fd3f","modified":1497511198978},{"_id":"public/font/fontawesome-webfont.svg","hash":"46fcc0194d75a0ddac0a038aee41b23456784814","modified":1497511198990},{"_id":"public/font/fontawesome-webfont.eot","hash":"7619748fe34c64fb157a57f6d4ef3678f63a8f5e","modified":1497511198199},{"_id":"public/font/coveredbyyourgrace-webfont.woff","hash":"c6f8dc1a2f6ce914f120e80a876b8fd77b98888e","modified":1497511198199},{"_id":"public/font/coveredbyyourgrace-webfont.ttf","hash":"194ccb4acf77a03dc25bcc174edb266143704fec","modified":1497511198199},{"_id":"public/font/coveredbyyourgrace-webfont.svg","hash":"eabdb262d8e246865dfb56031f01ff6e8d2f9d53","modified":1497511198984},{"_id":"public/font/coveredbyyourgrace-webfont.eot","hash":"a17d0f10534303e40f210c506ebb8703fa23b7de","modified":1497511198199},{"_id":"public/font/FontAwesome.otf","hash":"b5b4f9be85f91f10799e87a083da1d050f842734","modified":1497511198199},{"_id":"public/fancybox/jquery.fancybox.pack.js","hash":"9e0d51ca1dbe66f6c0c7aefd552dc8122e694a6e","modified":1497511198989},{"_id":"public/fancybox/jquery.fancybox.js","hash":"d08b03a42d5c4ba456ef8ba33116fdbb7a9cabed","modified":1497511198989},{"_id":"public/fancybox/jquery.fancybox.css","hash":"aaa582fb9eb4b7092dc69fcb2d5b1c20cca58ab6","modified":1497511198989},{"_id":"public/fancybox/helpers/jquery.fancybox-thumbs.js","hash":"47da1ae5401c24b5c17cc18e2730780f5c1a7a0c","modified":1497511198989},{"_id":"public/fancybox/helpers/jquery.fancybox-thumbs.css","hash":"4ac329c16a5277592fc12a37cca3d72ca4ec292f","modified":1497511198989},{"_id":"public/fancybox/helpers/jquery.fancybox-media.js","hash":"294420f9ff20f4e3584d212b0c262a00a96ecdb3","modified":1497511198989},{"_id":"public/fancybox/helpers/jquery.fancybox-buttons.js","hash":"dc3645529a4bf72983a39fa34c1eb9146e082019","modified":1497511198989},{"_id":"public/fancybox/helpers/jquery.fancybox-buttons.css","hash":"1a9d8e5c22b371fcc69d4dbbb823d9c39f04c0c8","modified":1497511198989},{"_id":"public/fancybox/helpers/fancybox_buttons.png","hash":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1497511198199},{"_id":"public/fancybox/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1497511198200},{"_id":"public/fancybox/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1497511198201},{"_id":"public/fancybox/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1497511198201},{"_id":"public/fancybox/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1497511198201},{"_id":"public/fancybox/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1497511198201},{"_id":"public/fancybox/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1497511198201},{"_id":"public/css/style.css","hash":"ace9c3df88af85f862060a4cdd5d4716c9a2e5fc","modified":1497511198989},{"_id":"public/about/index.html","hash":"e9e9a7d2b56950ff90e0c4905ae808f21739a7f8","modified":1497511198119},{"_id":"public/2017/06/13/dubbox-integration-swagger/index.html","hash":"5d58604efb006320183cf83c27222fc1084554cb","modified":1497511198183},{"_id":"public/2017/06/06/json-best-practice/index.html","hash":"3d92940cd4fec09630ff92119935acaba0fc47d5","modified":1497511198164},{"_id":"public/2017/05/25/oracle2mysql01/index.html","hash":"3cd3ad09282d5e9b5052957b086ff5dbd6cbc6a8","modified":1497511198164},{"_id":"public/archives/index.html","hash":"249c75c338261bc8bea93d89145e51535969d971","modified":1497511198161},{"_id":"public/archives/2017/index.html","hash":"d00ab24e2b11dbcff8cbd718d802b078fe1ae3a7","modified":1497511198162},{"_id":"public/archives/2017/05/index.html","hash":"82b056f388292734af01aa9b7bbe7053174e4e81","modified":1497511198163},{"_id":"public/archives/2017/06/index.html","hash":"44c468a69fbec95208278bf5809ab41e8591bb53","modified":1497511198163},{"_id":"public/index.html","hash":"553e78c497ca449a9c7c2e0f2ff210df2ef1b4a2","modified":1497511198164},{"_id":"public/tags/dubbox-swagger/index.html","modified":1497433969020,"shasum":"28e6ea4804f70da99fdefc8ad5e549fef27fdbcf"},{"_id":"public/tags/oracle-mysql-database/index.html","modified":1497433969033,"shasum":"86f11072c01f57fc82b459d9f819f18e29825f21"},{"_id":"public/tags/json/index.html","hash":"6b9eb7403ee94abce5df7a95aa4ed6116609eac2","modified":1497511198164},{"_id":"source/.DS_Store","hash":"6d0d00f0693d3deae9c2e6864611ba5cf5a0d1f4","modified":1497510924000},{"_id":"public/tags/dubbo/index.html","hash":"8fa5e1b9f487c74548fe9446a3ab3e4373a0d9f0","modified":1497511198183},{"_id":"public/tags/database/index.html","hash":"956eb947262813b10ae7dc77612797a6a18841b0","modified":1497511198183}],"Category":[],"Data":[],"Page":[{"_content":"title:关于我\n---\nWelcome to kimmking's blog on github.io.\n\n## Quick Start\n\n### KimmKing\n\n``` JavaScript\nvar kimmking = new Programmer();\nkimmking.writeblog(new BlogPost());\nkimmking.addEmail(\"kimmking@163.com\");\nkimmking.sayHello();\n\n```\n\nMore info: [blog](http://blog.csdn.net/kimmking)\n\n","source":"about/index.md","raw":"title:关于我\n---\nWelcome to kimmking's blog on github.io.\n\n## Quick Start\n\n### KimmKing\n\n``` JavaScript\nvar kimmking = new Programmer();\nkimmking.writeblog(new BlogPost());\nkimmking.addEmail(\"kimmking@163.com\");\nkimmking.sayHello();\n\n```\n\nMore info: [blog](http://blog.csdn.net/kimmking)\n\n","date":"2017-06-07T02:17:08.000Z","updated":"2017-06-07T02:17:08.000Z","path":"about/index.html","_id":"cj3wtirfj0003f4bce7gj7jhj","title":"","comments":1,"layout":"page","content":"<h2 id=\"title_3A_u5173_u4E8E_u6211\"><a href=\"#title_3A_u5173_u4E8E_u6211\" class=\"headerlink\" title=\"title:关于我\"></a>title:关于我</h2><p>Welcome to kimmking’s blog on github.io.</p>\n<h2 id=\"Quick_Start\"><a href=\"#Quick_Start\" class=\"headerlink\" title=\"Quick Start\"></a>Quick Start</h2><h3 id=\"KimmKing\"><a href=\"#KimmKing\" class=\"headerlink\" title=\"KimmKing\"></a>KimmKing</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> kimmking = <span class=\"keyword\">new</span> Programmer();</div><div class=\"line\">kimmking.writeblog(<span class=\"keyword\">new</span> BlogPost());</div><div class=\"line\">kimmking.addEmail(<span class=\"string\">\"kimmking@163.com\"</span>);</div><div class=\"line\">kimmking.sayHello();</div></pre></td></tr></table></figure>\n<p>More info: <a href=\"http://blog.csdn.net/kimmking\" target=\"_blank\" rel=\"external\">blog</a></p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"title_3A_u5173_u4E8E_u6211\"><a href=\"#title_3A_u5173_u4E8E_u6211\" class=\"headerlink\" title=\"title:关于我\"></a>title:关于我</h2><p>Welcome to kimmking’s blog on github.io.</p>\n<h2 id=\"Quick_Start\"><a href=\"#Quick_Start\" class=\"headerlink\" title=\"Quick Start\"></a>Quick Start</h2><h3 id=\"KimmKing\"><a href=\"#KimmKing\" class=\"headerlink\" title=\"KimmKing\"></a>KimmKing</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> kimmking = <span class=\"keyword\">new</span> Programmer();</div><div class=\"line\">kimmking.writeblog(<span class=\"keyword\">new</span> BlogPost());</div><div class=\"line\">kimmking.addEmail(<span class=\"string\">\"kimmking@163.com\"</span>);</div><div class=\"line\">kimmking.sayHello();</div></pre></td></tr></table></figure>\n<p>More info: <a href=\"http://blog.csdn.net/kimmking\" target=\"_blank\" rel=\"external\">blog</a></p>\n"}],"Post":[{"title":"dubbox与swagger集成","date":"2017-06-13T09:50:18.000Z","_content":"\n## dubbox与swagger集成\n实现了dubbox与swagger集成，可以使用SwaggerUI在线测试rest接口，同时顺便升级了dubbox依赖的resteasy/jackson等库。\n\n### 环境准备\ngit、jdk1.7+、maven4+、zookeeper、tomcat7+、Chrome浏览器\n\n### 获取源码\n源码在：https://github.com/kimmking/dubbo/tree/swaggerui\n\n```\ngit clone https://github.com/kimmking/dubbo\ngit checkout -b swaggerui origin/swaggerui\n```\n\n### 编译\n切换到源码根目录dubbo下，使用mvn编译\n\n```\ncd dubbo\nmvn package install -DskipTests\n\n```\n\n1. 编译完成后，在dubbo\\dubbo-demo\\dubbo-demo-provider\\target文件夹下，可以看到打包好的war：dubbo-demo-provider-2.8.4.war；\n2. 删除tomcatwebapps下的所有文件，将dubbo-demo-provider-2.8.4.war复制过来，改名为ROOT.war；\n3. tomcat端口号改为80；\n4. 启动zookeeper，再启动tomcat；\n\n## 测试\n1. chrome浏览器启动参数加上： --args --disable-web-security --user-data-dir\n2. 启动chrome，在chrome地址栏输入http://localhost/swagger/，即可测试rest\n\n## screenshot\n\n![image](https://github.com/kimmking/kk/blob/master/images/dubbo/01.png?raw=true)\n\n![image](https://github.com/kimmking/kk/blob/master/images/dubbo/02.png?raw=true)\n","source":"_posts/dubbox-integration-swagger.md","raw":"title: dubbox与swagger集成\ndate: 2017-06-13 17:50:18\ntags: dubbo\n---\n\n## dubbox与swagger集成\n实现了dubbox与swagger集成，可以使用SwaggerUI在线测试rest接口，同时顺便升级了dubbox依赖的resteasy/jackson等库。\n\n### 环境准备\ngit、jdk1.7+、maven4+、zookeeper、tomcat7+、Chrome浏览器\n\n### 获取源码\n源码在：https://github.com/kimmking/dubbo/tree/swaggerui\n\n```\ngit clone https://github.com/kimmking/dubbo\ngit checkout -b swaggerui origin/swaggerui\n```\n\n### 编译\n切换到源码根目录dubbo下，使用mvn编译\n\n```\ncd dubbo\nmvn package install -DskipTests\n\n```\n\n1. 编译完成后，在dubbo\\dubbo-demo\\dubbo-demo-provider\\target文件夹下，可以看到打包好的war：dubbo-demo-provider-2.8.4.war；\n2. 删除tomcatwebapps下的所有文件，将dubbo-demo-provider-2.8.4.war复制过来，改名为ROOT.war；\n3. tomcat端口号改为80；\n4. 启动zookeeper，再启动tomcat；\n\n## 测试\n1. chrome浏览器启动参数加上： --args --disable-web-security --user-data-dir\n2. 启动chrome，在chrome地址栏输入http://localhost/swagger/，即可测试rest\n\n## screenshot\n\n![image](https://github.com/kimmking/kk/blob/master/images/dubbo/01.png?raw=true)\n\n![image](https://github.com/kimmking/kk/blob/master/images/dubbo/02.png?raw=true)\n","slug":"dubbox-integration-swagger","published":1,"updated":"2017-06-15T07:18:29.000Z","_id":"cj3wtirew0000f4bcj728mhz9","comments":1,"layout":"post","photos":[],"link":"","content":"<h2 id=\"dubbox_u4E0Eswagger_u96C6_u6210\"><a href=\"#dubbox_u4E0Eswagger_u96C6_u6210\" class=\"headerlink\" title=\"dubbox与swagger集成\"></a>dubbox与swagger集成</h2><p>实现了dubbox与swagger集成，可以使用SwaggerUI在线测试rest接口，同时顺便升级了dubbox依赖的resteasy/jackson等库。</p>\n<h3 id=\"u73AF_u5883_u51C6_u5907\"><a href=\"#u73AF_u5883_u51C6_u5907\" class=\"headerlink\" title=\"环境准备\"></a>环境准备</h3><p>git、jdk1.7+、maven4+、zookeeper、tomcat7+、Chrome浏览器</p>\n<h3 id=\"u83B7_u53D6_u6E90_u7801\"><a href=\"#u83B7_u53D6_u6E90_u7801\" class=\"headerlink\" title=\"获取源码\"></a>获取源码</h3><p>源码在：<a href=\"https://github.com/kimmking/dubbo/tree/swaggerui\" target=\"_blank\" rel=\"external\">https://github.com/kimmking/dubbo/tree/swaggerui</a></p>\n<figure class=\"highlight crmsh\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">git <span class=\"keyword\">clone</span> <span class=\"title\">https</span>://github.com/kimmking/dubbo</div><div class=\"line\">git checkout -b swaggerui origin/swaggerui</div></pre></td></tr></table></figure>\n<h3 id=\"u7F16_u8BD1\"><a href=\"#u7F16_u8BD1\" class=\"headerlink\" title=\"编译\"></a>编译</h3><p>切换到源码根目录dubbo下，使用mvn编译</p>\n<figure class=\"highlight ada\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">cd dubbo</div><div class=\"line\">mvn <span class=\"keyword\">package</span> <span class=\"title\">install -DskipTests</span></div></pre></td></tr></table></figure>\n<ol>\n<li>编译完成后，在dubbo\\dubbo-demo\\dubbo-demo-provider\\target文件夹下，可以看到打包好的war：dubbo-demo-provider-2.8.4.war；</li>\n<li>删除tomcatwebapps下的所有文件，将dubbo-demo-provider-2.8.4.war复制过来，改名为ROOT.war；</li>\n<li>tomcat端口号改为80；</li>\n<li>启动zookeeper，再启动tomcat；</li>\n</ol>\n<h2 id=\"u6D4B_u8BD5\"><a href=\"#u6D4B_u8BD5\" class=\"headerlink\" title=\"测试\"></a>测试</h2><ol>\n<li>chrome浏览器启动参数加上： –args –disable-web-security –user-data-dir</li>\n<li>启动chrome，在chrome地址栏输入<a href=\"http://localhost/swagger/，即可测试rest\" target=\"_blank\" rel=\"external\">http://localhost/swagger/，即可测试rest</a></li>\n</ol>\n<h2 id=\"screenshot\"><a href=\"#screenshot\" class=\"headerlink\" title=\"screenshot\"></a>screenshot</h2><p><img src=\"https://github.com/kimmking/kk/blob/master/images/dubbo/01.png?raw=true\" alt=\"image\"></p>\n<p><img src=\"https://github.com/kimmking/kk/blob/master/images/dubbo/02.png?raw=true\" alt=\"image\"></p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"dubbox_u4E0Eswagger_u96C6_u6210\"><a href=\"#dubbox_u4E0Eswagger_u96C6_u6210\" class=\"headerlink\" title=\"dubbox与swagger集成\"></a>dubbox与swagger集成</h2><p>实现了dubbox与swagger集成，可以使用SwaggerUI在线测试rest接口，同时顺便升级了dubbox依赖的resteasy/jackson等库。</p>\n<h3 id=\"u73AF_u5883_u51C6_u5907\"><a href=\"#u73AF_u5883_u51C6_u5907\" class=\"headerlink\" title=\"环境准备\"></a>环境准备</h3><p>git、jdk1.7+、maven4+、zookeeper、tomcat7+、Chrome浏览器</p>\n<h3 id=\"u83B7_u53D6_u6E90_u7801\"><a href=\"#u83B7_u53D6_u6E90_u7801\" class=\"headerlink\" title=\"获取源码\"></a>获取源码</h3><p>源码在：<a href=\"https://github.com/kimmking/dubbo/tree/swaggerui\" target=\"_blank\" rel=\"external\">https://github.com/kimmking/dubbo/tree/swaggerui</a></p>\n<figure class=\"highlight crmsh\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">git <span class=\"keyword\">clone</span> <span class=\"title\">https</span>://github.com/kimmking/dubbo</div><div class=\"line\">git checkout -b swaggerui origin/swaggerui</div></pre></td></tr></table></figure>\n<h3 id=\"u7F16_u8BD1\"><a href=\"#u7F16_u8BD1\" class=\"headerlink\" title=\"编译\"></a>编译</h3><p>切换到源码根目录dubbo下，使用mvn编译</p>\n<figure class=\"highlight ada\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">cd dubbo</div><div class=\"line\">mvn <span class=\"keyword\">package</span> <span class=\"title\">install -DskipTests</span></div></pre></td></tr></table></figure>\n<ol>\n<li>编译完成后，在dubbo\\dubbo-demo\\dubbo-demo-provider\\target文件夹下，可以看到打包好的war：dubbo-demo-provider-2.8.4.war；</li>\n<li>删除tomcatwebapps下的所有文件，将dubbo-demo-provider-2.8.4.war复制过来，改名为ROOT.war；</li>\n<li>tomcat端口号改为80；</li>\n<li>启动zookeeper，再启动tomcat；</li>\n</ol>\n<h2 id=\"u6D4B_u8BD5\"><a href=\"#u6D4B_u8BD5\" class=\"headerlink\" title=\"测试\"></a>测试</h2><ol>\n<li>chrome浏览器启动参数加上： –args –disable-web-security –user-data-dir</li>\n<li>启动chrome，在chrome地址栏输入<a href=\"http://localhost/swagger/，即可测试rest\" target=\"_blank\" rel=\"external\">http://localhost/swagger/，即可测试rest</a></li>\n</ol>\n<h2 id=\"screenshot\"><a href=\"#screenshot\" class=\"headerlink\" title=\"screenshot\"></a>screenshot</h2><p><img src=\"https://github.com/kimmking/kk/blob/master/images/dubbo/01.png?raw=true\" alt=\"image\"></p>\n<p><img src=\"https://github.com/kimmking/kk/blob/master/images/dubbo/02.png?raw=true\" alt=\"image\"></p>\n"},{"title":"企业应用系统由oracle迁移到mysql数据库","date":"2017-05-25T12:10:42.000Z","_content":"传统的中小企业应用中，使用oracle的系统占比较多。迁移到云环境mysql数据库的情况下，需要考虑诸多因素，可用性、效率等。针对阿里云上的系统迁移情况来看，中小企业为主，迁移的应用数量比较大，所用技术五花八门，人肉处理的工作量非常大，效率较低。\n\n## 1.整体思路\n\n最主要的思路是：\n1. 先考虑可用性、跑起来，DDL+数据迁移，基本的DML，程序的修改和调整，\n2. 再考虑高性能高可用高扩展，性能优化，分库分表支持，\n3. 中间可以积累一些通用的框架和平台工具，比如：\n   - 数据库反向建模与DDL生成，基于EMF、GMF之类的\n   - 程序的SQL扫描处理，自动发现\n   - DML转换工具，基于下面第二节的考虑要素\n   - 数据迁移工具，这个应该相对比较成熟\n   - 在线性能度量和优化工具，这个阿里应该也有积累\n   - 将上述工具平台化，并串起来，自动评估企业应用的去O上云复杂度，评估成本\n4. 长期来看，应该基于一些友商，比如用友、金蝶、中软、中科软、中科软等一些固定产品做一些封装和深度定制合作，解决同一类平台上的不同应用系统的去O工作。\n5. 对于特定的一些行业信息化系统，也有一些类型特点，可以积累一些行业类的迁移解决方案。\n\n## 2.数据库修改\n\n### DDL\n- 反向成模型，再生成mysql或其他数据库，主要是数据类型转换，主外键、约束\n- 处理sequence与自增\n\n### DML\n必须改、可以改可以不改、不用改\n\n### 触发器、存储过程\n- 避免，如有需要重写，考虑sql或代码里重写\n\n## 3.程序修改\n\n- 写在代码里的SQL拼装，全文检索或语法分析获取\n- 写在xml里的mapping\n- 写在HQL类的转换引擎隐式SQL\n- 扫描代码、properties和xml\n- JDBC驱动、druid等proxy拦截SQL，系统日志过滤SQL\n- 尽量单表的简单操作，便于移植\n- 如果原先代码里没有用ORM类框架，可以使用快速的脚手架，这套脚手架可以快速的应用到不同的目标数据库，通用性的编程性基础设施都应该是一致和完备的，类似hibernate的思想。\n\n## 4.数据迁移\n### 全量+增量\n\n\n## 5.性能\n优化应该积累成规则，一起做到框架中去，最好能在运行期收集指标信息，持续动态优化，\n### hint\n### 子查询\n### 函数与索引\n\n## 6.扩展性\n### 分库分表\n\n## 7.应用场景\n\n这些工作经过积累沉淀为平台工具后，可以开源出来大家共同维护，也可以在阿里云上作为自助服务式的在线工具，提供给中小企业的技术人员直接操作转换自己的线下应用到云上。\n另一方面，企业内部可能有多种不同的孤立数据源，经过这些工具转换以后，可以比较容易的在阿里云上进一步进行数据的整合，形成企业大数据中心，作为发展企业大数据的出发点。\n\n\n补充：与阿里云去O团队沟通了解，目前做的工作大概就是这个思路，很多东西比这些要更深。","source":"_posts/oracle2mysql01.md","raw":"title: 企业应用系统由oracle迁移到mysql数据库\ndate: 2017-05-25 20:10:42\ntags: database\n---\n传统的中小企业应用中，使用oracle的系统占比较多。迁移到云环境mysql数据库的情况下，需要考虑诸多因素，可用性、效率等。针对阿里云上的系统迁移情况来看，中小企业为主，迁移的应用数量比较大，所用技术五花八门，人肉处理的工作量非常大，效率较低。\n\n## 1.整体思路\n\n最主要的思路是：\n1. 先考虑可用性、跑起来，DDL+数据迁移，基本的DML，程序的修改和调整，\n2. 再考虑高性能高可用高扩展，性能优化，分库分表支持，\n3. 中间可以积累一些通用的框架和平台工具，比如：\n   - 数据库反向建模与DDL生成，基于EMF、GMF之类的\n   - 程序的SQL扫描处理，自动发现\n   - DML转换工具，基于下面第二节的考虑要素\n   - 数据迁移工具，这个应该相对比较成熟\n   - 在线性能度量和优化工具，这个阿里应该也有积累\n   - 将上述工具平台化，并串起来，自动评估企业应用的去O上云复杂度，评估成本\n4. 长期来看，应该基于一些友商，比如用友、金蝶、中软、中科软、中科软等一些固定产品做一些封装和深度定制合作，解决同一类平台上的不同应用系统的去O工作。\n5. 对于特定的一些行业信息化系统，也有一些类型特点，可以积累一些行业类的迁移解决方案。\n\n## 2.数据库修改\n\n### DDL\n- 反向成模型，再生成mysql或其他数据库，主要是数据类型转换，主外键、约束\n- 处理sequence与自增\n\n### DML\n必须改、可以改可以不改、不用改\n\n### 触发器、存储过程\n- 避免，如有需要重写，考虑sql或代码里重写\n\n## 3.程序修改\n\n- 写在代码里的SQL拼装，全文检索或语法分析获取\n- 写在xml里的mapping\n- 写在HQL类的转换引擎隐式SQL\n- 扫描代码、properties和xml\n- JDBC驱动、druid等proxy拦截SQL，系统日志过滤SQL\n- 尽量单表的简单操作，便于移植\n- 如果原先代码里没有用ORM类框架，可以使用快速的脚手架，这套脚手架可以快速的应用到不同的目标数据库，通用性的编程性基础设施都应该是一致和完备的，类似hibernate的思想。\n\n## 4.数据迁移\n### 全量+增量\n\n\n## 5.性能\n优化应该积累成规则，一起做到框架中去，最好能在运行期收集指标信息，持续动态优化，\n### hint\n### 子查询\n### 函数与索引\n\n## 6.扩展性\n### 分库分表\n\n## 7.应用场景\n\n这些工作经过积累沉淀为平台工具后，可以开源出来大家共同维护，也可以在阿里云上作为自助服务式的在线工具，提供给中小企业的技术人员直接操作转换自己的线下应用到云上。\n另一方面，企业内部可能有多种不同的孤立数据源，经过这些工具转换以后，可以比较容易的在阿里云上进一步进行数据的整合，形成企业大数据中心，作为发展企业大数据的出发点。\n\n\n补充：与阿里云去O团队沟通了解，目前做的工作大概就是这个思路，很多东西比这些要更深。","slug":"oracle2mysql01","published":1,"updated":"2017-06-15T07:19:01.000Z","_id":"cj3wtirgh0004f4bcts9gai3o","comments":1,"layout":"post","photos":[],"link":"","content":"<p>传统的中小企业应用中，使用oracle的系统占比较多。迁移到云环境mysql数据库的情况下，需要考虑诸多因素，可用性、效率等。针对阿里云上的系统迁移情况来看，中小企业为主，迁移的应用数量比较大，所用技术五花八门，人肉处理的工作量非常大，效率较低。</p>\n<h2 id=\"1-_u6574_u4F53_u601D_u8DEF\"><a href=\"#1-_u6574_u4F53_u601D_u8DEF\" class=\"headerlink\" title=\"1.整体思路\"></a>1.整体思路</h2><p>最主要的思路是：</p>\n<ol>\n<li>先考虑可用性、跑起来，DDL+数据迁移，基本的DML，程序的修改和调整，</li>\n<li>再考虑高性能高可用高扩展，性能优化，分库分表支持，</li>\n<li>中间可以积累一些通用的框架和平台工具，比如：<ul>\n<li>数据库反向建模与DDL生成，基于EMF、GMF之类的</li>\n<li>程序的SQL扫描处理，自动发现</li>\n<li>DML转换工具，基于下面第二节的考虑要素</li>\n<li>数据迁移工具，这个应该相对比较成熟</li>\n<li>在线性能度量和优化工具，这个阿里应该也有积累</li>\n<li>将上述工具平台化，并串起来，自动评估企业应用的去O上云复杂度，评估成本</li>\n</ul>\n</li>\n<li>长期来看，应该基于一些友商，比如用友、金蝶、中软、中科软、中科软等一些固定产品做一些封装和深度定制合作，解决同一类平台上的不同应用系统的去O工作。</li>\n<li>对于特定的一些行业信息化系统，也有一些类型特点，可以积累一些行业类的迁移解决方案。</li>\n</ol>\n<h2 id=\"2-_u6570_u636E_u5E93_u4FEE_u6539\"><a href=\"#2-_u6570_u636E_u5E93_u4FEE_u6539\" class=\"headerlink\" title=\"2.数据库修改\"></a>2.数据库修改</h2><h3 id=\"DDL\"><a href=\"#DDL\" class=\"headerlink\" title=\"DDL\"></a>DDL</h3><ul>\n<li>反向成模型，再生成mysql或其他数据库，主要是数据类型转换，主外键、约束</li>\n<li>处理sequence与自增</li>\n</ul>\n<h3 id=\"DML\"><a href=\"#DML\" class=\"headerlink\" title=\"DML\"></a>DML</h3><p>必须改、可以改可以不改、不用改</p>\n<h3 id=\"u89E6_u53D1_u5668_u3001_u5B58_u50A8_u8FC7_u7A0B\"><a href=\"#u89E6_u53D1_u5668_u3001_u5B58_u50A8_u8FC7_u7A0B\" class=\"headerlink\" title=\"触发器、存储过程\"></a>触发器、存储过程</h3><ul>\n<li>避免，如有需要重写，考虑sql或代码里重写</li>\n</ul>\n<h2 id=\"3-_u7A0B_u5E8F_u4FEE_u6539\"><a href=\"#3-_u7A0B_u5E8F_u4FEE_u6539\" class=\"headerlink\" title=\"3.程序修改\"></a>3.程序修改</h2><ul>\n<li>写在代码里的SQL拼装，全文检索或语法分析获取</li>\n<li>写在xml里的mapping</li>\n<li>写在HQL类的转换引擎隐式SQL</li>\n<li>扫描代码、properties和xml</li>\n<li>JDBC驱动、druid等proxy拦截SQL，系统日志过滤SQL</li>\n<li>尽量单表的简单操作，便于移植</li>\n<li>如果原先代码里没有用ORM类框架，可以使用快速的脚手架，这套脚手架可以快速的应用到不同的目标数据库，通用性的编程性基础设施都应该是一致和完备的，类似hibernate的思想。</li>\n</ul>\n<h2 id=\"4-_u6570_u636E_u8FC1_u79FB\"><a href=\"#4-_u6570_u636E_u8FC1_u79FB\" class=\"headerlink\" title=\"4.数据迁移\"></a>4.数据迁移</h2><h3 id=\"u5168_u91CF+_u589E_u91CF\"><a href=\"#u5168_u91CF+_u589E_u91CF\" class=\"headerlink\" title=\"全量+增量\"></a>全量+增量</h3><h2 id=\"5-_u6027_u80FD\"><a href=\"#5-_u6027_u80FD\" class=\"headerlink\" title=\"5.性能\"></a>5.性能</h2><p>优化应该积累成规则，一起做到框架中去，最好能在运行期收集指标信息，持续动态优化，</p>\n<h3 id=\"hint\"><a href=\"#hint\" class=\"headerlink\" title=\"hint\"></a>hint</h3><h3 id=\"u5B50_u67E5_u8BE2\"><a href=\"#u5B50_u67E5_u8BE2\" class=\"headerlink\" title=\"子查询\"></a>子查询</h3><h3 id=\"u51FD_u6570_u4E0E_u7D22_u5F15\"><a href=\"#u51FD_u6570_u4E0E_u7D22_u5F15\" class=\"headerlink\" title=\"函数与索引\"></a>函数与索引</h3><h2 id=\"6-_u6269_u5C55_u6027\"><a href=\"#6-_u6269_u5C55_u6027\" class=\"headerlink\" title=\"6.扩展性\"></a>6.扩展性</h2><h3 id=\"u5206_u5E93_u5206_u8868\"><a href=\"#u5206_u5E93_u5206_u8868\" class=\"headerlink\" title=\"分库分表\"></a>分库分表</h3><h2 id=\"7-_u5E94_u7528_u573A_u666F\"><a href=\"#7-_u5E94_u7528_u573A_u666F\" class=\"headerlink\" title=\"7.应用场景\"></a>7.应用场景</h2><p>这些工作经过积累沉淀为平台工具后，可以开源出来大家共同维护，也可以在阿里云上作为自助服务式的在线工具，提供给中小企业的技术人员直接操作转换自己的线下应用到云上。<br>另一方面，企业内部可能有多种不同的孤立数据源，经过这些工具转换以后，可以比较容易的在阿里云上进一步进行数据的整合，形成企业大数据中心，作为发展企业大数据的出发点。</p>\n<p>补充：与阿里云去O团队沟通了解，目前做的工作大概就是这个思路，很多东西比这些要更深。</p>\n","site":{"data":{}},"excerpt":"","more":"<p>传统的中小企业应用中，使用oracle的系统占比较多。迁移到云环境mysql数据库的情况下，需要考虑诸多因素，可用性、效率等。针对阿里云上的系统迁移情况来看，中小企业为主，迁移的应用数量比较大，所用技术五花八门，人肉处理的工作量非常大，效率较低。</p>\n<h2 id=\"1-_u6574_u4F53_u601D_u8DEF\"><a href=\"#1-_u6574_u4F53_u601D_u8DEF\" class=\"headerlink\" title=\"1.整体思路\"></a>1.整体思路</h2><p>最主要的思路是：</p>\n<ol>\n<li>先考虑可用性、跑起来，DDL+数据迁移，基本的DML，程序的修改和调整，</li>\n<li>再考虑高性能高可用高扩展，性能优化，分库分表支持，</li>\n<li>中间可以积累一些通用的框架和平台工具，比如：<ul>\n<li>数据库反向建模与DDL生成，基于EMF、GMF之类的</li>\n<li>程序的SQL扫描处理，自动发现</li>\n<li>DML转换工具，基于下面第二节的考虑要素</li>\n<li>数据迁移工具，这个应该相对比较成熟</li>\n<li>在线性能度量和优化工具，这个阿里应该也有积累</li>\n<li>将上述工具平台化，并串起来，自动评估企业应用的去O上云复杂度，评估成本</li>\n</ul>\n</li>\n<li>长期来看，应该基于一些友商，比如用友、金蝶、中软、中科软、中科软等一些固定产品做一些封装和深度定制合作，解决同一类平台上的不同应用系统的去O工作。</li>\n<li>对于特定的一些行业信息化系统，也有一些类型特点，可以积累一些行业类的迁移解决方案。</li>\n</ol>\n<h2 id=\"2-_u6570_u636E_u5E93_u4FEE_u6539\"><a href=\"#2-_u6570_u636E_u5E93_u4FEE_u6539\" class=\"headerlink\" title=\"2.数据库修改\"></a>2.数据库修改</h2><h3 id=\"DDL\"><a href=\"#DDL\" class=\"headerlink\" title=\"DDL\"></a>DDL</h3><ul>\n<li>反向成模型，再生成mysql或其他数据库，主要是数据类型转换，主外键、约束</li>\n<li>处理sequence与自增</li>\n</ul>\n<h3 id=\"DML\"><a href=\"#DML\" class=\"headerlink\" title=\"DML\"></a>DML</h3><p>必须改、可以改可以不改、不用改</p>\n<h3 id=\"u89E6_u53D1_u5668_u3001_u5B58_u50A8_u8FC7_u7A0B\"><a href=\"#u89E6_u53D1_u5668_u3001_u5B58_u50A8_u8FC7_u7A0B\" class=\"headerlink\" title=\"触发器、存储过程\"></a>触发器、存储过程</h3><ul>\n<li>避免，如有需要重写，考虑sql或代码里重写</li>\n</ul>\n<h2 id=\"3-_u7A0B_u5E8F_u4FEE_u6539\"><a href=\"#3-_u7A0B_u5E8F_u4FEE_u6539\" class=\"headerlink\" title=\"3.程序修改\"></a>3.程序修改</h2><ul>\n<li>写在代码里的SQL拼装，全文检索或语法分析获取</li>\n<li>写在xml里的mapping</li>\n<li>写在HQL类的转换引擎隐式SQL</li>\n<li>扫描代码、properties和xml</li>\n<li>JDBC驱动、druid等proxy拦截SQL，系统日志过滤SQL</li>\n<li>尽量单表的简单操作，便于移植</li>\n<li>如果原先代码里没有用ORM类框架，可以使用快速的脚手架，这套脚手架可以快速的应用到不同的目标数据库，通用性的编程性基础设施都应该是一致和完备的，类似hibernate的思想。</li>\n</ul>\n<h2 id=\"4-_u6570_u636E_u8FC1_u79FB\"><a href=\"#4-_u6570_u636E_u8FC1_u79FB\" class=\"headerlink\" title=\"4.数据迁移\"></a>4.数据迁移</h2><h3 id=\"u5168_u91CF+_u589E_u91CF\"><a href=\"#u5168_u91CF+_u589E_u91CF\" class=\"headerlink\" title=\"全量+增量\"></a>全量+增量</h3><h2 id=\"5-_u6027_u80FD\"><a href=\"#5-_u6027_u80FD\" class=\"headerlink\" title=\"5.性能\"></a>5.性能</h2><p>优化应该积累成规则，一起做到框架中去，最好能在运行期收集指标信息，持续动态优化，</p>\n<h3 id=\"hint\"><a href=\"#hint\" class=\"headerlink\" title=\"hint\"></a>hint</h3><h3 id=\"u5B50_u67E5_u8BE2\"><a href=\"#u5B50_u67E5_u8BE2\" class=\"headerlink\" title=\"子查询\"></a>子查询</h3><h3 id=\"u51FD_u6570_u4E0E_u7D22_u5F15\"><a href=\"#u51FD_u6570_u4E0E_u7D22_u5F15\" class=\"headerlink\" title=\"函数与索引\"></a>函数与索引</h3><h2 id=\"6-_u6269_u5C55_u6027\"><a href=\"#6-_u6269_u5C55_u6027\" class=\"headerlink\" title=\"6.扩展性\"></a>6.扩展性</h2><h3 id=\"u5206_u5E93_u5206_u8868\"><a href=\"#u5206_u5E93_u5206_u8868\" class=\"headerlink\" title=\"分库分表\"></a>分库分表</h3><h2 id=\"7-_u5E94_u7528_u573A_u666F\"><a href=\"#7-_u5E94_u7528_u573A_u666F\" class=\"headerlink\" title=\"7.应用场景\"></a>7.应用场景</h2><p>这些工作经过积累沉淀为平台工具后，可以开源出来大家共同维护，也可以在阿里云上作为自助服务式的在线工具，提供给中小企业的技术人员直接操作转换自己的线下应用到云上。<br>另一方面，企业内部可能有多种不同的孤立数据源，经过这些工具转换以后，可以比较容易的在阿里云上进一步进行数据的整合，形成企业大数据中心，作为发展企业大数据的出发点。</p>\n<p>补充：与阿里云去O团队沟通了解，目前做的工作大概就是这个思路，很多东西比这些要更深。</p>\n"},{"title":"JSON最佳实践","date":"2017-06-06T15:00:05.000Z","_content":"JSON是一种文本方式展示结构化数据的方式，从产生的时候开始就由于其简单好用、跨平台，特别适合HTTP下数据的传输（例如现在很流行的REST）而被广泛使用。\n\n## 1、JSON是什么\nJSON起源于1999年的[JS语言规范ECMA262的一个子集](http://javascript.crockford.com/)（即15.12章节描述了格式与解析），后来2003年作为一个数据格式[ECMA404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf)（很囧的序号有不有？）发布。\n2006年，作为[rfc4627](http://www.ietf.org/rfc/rfc4627.txt)发布，这时规范增加到18页，去掉没用的部分，十页不到。\n\nJSON的应用很广泛，这里有超过100种语言下的JSON库：[json.org](http://www.json.org/)。\n\n更多的可以参考这里，[关于json的一切](https://github.com/burningtree/awesome-json)。\n\n\n## 2、优缺点、标准与schema\n### 2.1 结构与类型\n这估计是最简单标准规范之一：\n- 只有两种结构：对象内的键值对集合结构和数组，对象用{}表示、内部是\"key\":\"value\"，数组用[]表示，不同值用逗号分开\n- 基本数值有7个： false / null / true / object / array / number / string\n- 再加上结构可以嵌套，进而可以用来表达复杂的数据\n\n一个简单实例：\n \n```javascript\n\n   {\n      \"Image\": {\n          \"Width\":  800,\n          \"Height\": 600,\n          \"Title\":  \"View from 15th Floor\",\n          \"Thumbnail\": {\n              \"Url\":    \"http://www.example.com/image/481989943\",\n              \"Height\": 125,\n              \"Width\":  \"100\"\n          },\n          \"IDs\": [116, 943, 234, 38793]\n        }\n   }\n\n\n```\n\n### 2.2 优点\n- 基于纯文本，所以对于人类阅读是很友好的。\n- 规范简单，所以容易处理，开箱即用，特别是JS类的ECMA脚本里是内建支持的，可以直接作为对象使用。\n- 平台无关性，因为类型和结构都是平台无关的，而且好处理，容易实现不同语言的处理类库，可以作为多个不同异构系统之间的数据传输格式协议，特别是在HTTP/REST下的数据格式。\n\n### 2.3 缺点\n缺点也很明显：\n- 性能一般，文本表示的数据一般来说比二进制大得多，在数据传输上和解析处理上都要更影响性能。\n- 缺乏schema，跟同是文本数据格式的XML比，在类型的严格性和丰富性上要差很多。XML可以借由XSD或DTD来定义复杂的格式，并由此来验证XML文档是否符合格式要求，甚至进一步的，可以基于XSD来生成具体语言的操作代码，例如apache xmlbeans。并且这些工具组合到一起，形成一套庞大的生态，例如基于XML可以实现SOAP和WSDL，一系列的ws-*规范。但是我们也可以看到JSON在缺乏规范的情况下，实际上有更大一些的灵活性，特别是近年来REST的快速发展，已经有一些schema相关的发展(例如[理解JSON Schema](https://spacetelescope.github.io/understanding-json-schema/index.html)，[使用JSON Schema](http://usingjsonschema.com/downloads/)， [在线schema测试](http://azimi.me/json-schema-view/demo/demo.html))，也有类似于WSDL的[WADL](https://www.w3.org/Submission/wadl/)出现。\n\n<!-- more -->\n\n## 3. 常用技术与工具\n### 3.1 相关技术以及与XML的关系\n- 使用JSON实现RPC（类似XML-RPC）：[JSON-RPC](http://www.jsonrpc.org/)\n- 使用JSON实现path查询操作（类似XML-PATH）：[JsonPATH](https://github.com/json-path/JsonPath)\n- 在线查询工具：[JsonPATH](http://jsonpath.com/)\n \n例如上面的示例json，用表达式$.Image.IDs[:1]查询，得到116：\n![image](https://raw.githubusercontent.com/kimmking/kk/master/images/json/jsonpath.png)\n\n\n我们看到JSON与XML是如此之像，实际上这两个格式可以看做一个是学院排，一个是平民派。一个对象从POJO转换成XML与JSON的过程，基本是一致的（绝大部分工作可以复用，以后有机会再详细聊这个过程），10年前我自己也做过一个基于XML的RPC（[http://code.google.com/p/rpcfx/](http://code.google.com/p/rpcfx/)，貌似已经被墙），里面实现了java和dotnet、JS的XML序列化与反序列化，同时作为一个副产品，实现了JSON序列化。\n\n后来thoughtsworks公司出品的XStream就是同时做了XML与JSON的序列化。而创建Jackson库的组织本来叫fasterxml，就是处理xml的。当然从这个角度来看，Fastjson库，稍微改改也是一个高性能的XML序列化库。\n只是XML有着更严格的结构，更丰富的工具生态，拿查询与操作来说，XML还有XQuery、XLST等工具。处理方式上也有DOM方式与SAX流模式，这两个绝然不同的技术。\n\n单从性能来考虑，XML更是有[VTD-XML](http://vtd-xml.sourceforge.net/)这种解决了DOM消耗太大内存与SAX只能单向每个节点读一次不能随机读的缺点的高性能处理方式。\n\n### 3.2 Java类库\n- [Fastjson](https://github.com/alibaba/fastjson)\n- [Jackson](http://wiki.fasterxml.com/JacksonHome)\n- [Gson](https://github.com/google/gson)\n- [Xstream](http://x-stream.github.io/)\n\n### 3.3 工具\n- 格式化工具：[jsbeautifier](http://jsbeautifier.org/)\n- chrome插件：[5个Json View插件](http://www.cnplugins.com/zhuanti/five-chrome-json-plugins.html)\n- 在线Mock: [在线mock](https://www.easy-mock.com/)\n- 其他Mock：[SoapUI](https://www.soapui.org/rest-testing-mocking/rest-service-mocking.html)可以支持，SwaggerUI也可以，[RestMock](https://github.com/andrzejchm/RESTMock)也可以。\n\n![image](https://github.com/kimmking/kk/blob/master/images/json/json01.png?raw=true)\n![image](https://github.com/kimmking/kk/blob/master/images/json/json02.png?raw=true)\n\n## 4. JSON编码指南\n### 4.1 Google JSON风格指南\n遵循好的设计与编码风格，能提前解决80%的问题:\n- 英文版[Google JSON Style Guide](https://google.github.io/styleguide/jsoncstyleguide.xml)：https://google.github.io/styleguide/jsoncstyleguide.xml\n- 中文版[Google JSON风格指南](https://github.com/darcyliu/google-styleguide/blob/master/JSONStyleGuide.md)：https://github.com/darcyliu/google-styleguide/blob/master/JSONStyleGuide.md\n\n简单摘录如下：\n- 属性名和值都是用双引号，不要把注释写到对象里面，对象数据要简洁\n- 不要随意结构化分组对象，推荐是用扁平化方式，层次不要太复杂\n- 命名方式要有意义，比如单复数表示\n- 驼峰式命名，遵循Bean规范\n- 使用版本来控制变更冲突\n- 对于一些关键字，不要拿来做key\n- 如果一个属性是可选的或者包含空值或null值，考虑从JSON中去掉该属性，除非它的存在有很强的语义原因\n- 序列化枚举类型时，使用name而不是value\n- 日期要用标准格式处理\n- 设计好通用的分页参数\n- 设计好异常处理\n\n### 4.2 使用JSON实现API\n[JSON API](http://jsonapi.org.cn/format/)与Google JSON风格指南有很多可以相互参照之处。\n\n[JSON API](http://jsonapi.org.cn/format/)是数据交互规范，用以定义客户端如何获取与修改资源，以及服务器如何响应对应请求。\n\nJSON API设计用来最小化请求的数量，以及客户端与服务器间传输的数据量。在高效实现的同时，无需牺牲可读性、灵活性和可发现性。\n\n## 5. REST\n todo list\n - dubbox\n - resteasy\n - restlet\n - jersey\n \n![image](https://github.com/kimmking/kk/blob/master/images/json/rest.jpg?raw=true)\n\n## 6. SwaggerUI实现API文档管理与在线测试\n todo list\n \n![image](https://github.com/kimmking/kk/blob/master/images/json/json03.png?raw=true)\n\n## 7. JSON使用场景分析\nJSON的使用，依据不同用途，有几个典型的场景：\n1. 内部后台系统之间的数据传输，此种情况下基于HTTP的JSON格式其实没有优势。\n2. 前后台之间的API调用，典型的是前端作为React/VUE/AngularJS/ExtJS等框架做的，前后端使用JSON交互。\n- 此时可以使用类似Dubbox之类的框架，或者原始一些SpringMVC的Controller上直接@ResponseBody或@RestController也可以。\n- 强烈建议在Dubbox之类的rest之上再加一个Nginx转发，这样一些策略的控制，比如同源的控制、简单的缓存策略、安全策略等都可以放到Nginx上来做，也利于多个机器时的负载均衡。\n- 建议使用swaggerUI来自动实现API文档和在线测试。功能很强大，操作简单，而且可以mock接口，在后台没有做好之前，前台就可以先开发了。\n- 可以使用RestUnit或SoapUI来实现自动化测试与压力测试。\n\n3. 提供给第三方的开发接口API\n基本同上，可以参考Google JSON风格指南与JSON API章节。\n\n## 8.JSON的一些经验\n最近在协助处理一些Fastjson的bug问题，发现最常见的其实是大家使用的不规范性，这样碰到各种坑的可能性就很大。根据我平时使用的经验，以及总结大家常见的问题，归纳如下：\n\n### 7.1 遵循Java Beans规范与JSON规范\n实践告诉我们：遵循beans规范和JSON规范的方式，能减少大部分的问题，比如正确实现setter、getter，用别名就加annotation。注意基本类型的匹配转换，比如在fastjson的issue见到试图把\"{\"a\":{}}\"中的a转换成List的。\n\n### 7.2 使用正常的key\n尽量不要使用数字等字符开头的key，尽量使用符合Java的class或property命名规范的key，这样会减少不必要的冲突。在jsonpath或js里，a.1可能会被解释成a[1]或a[\"1\"]，这些都会带来不必要的麻烦。\n\n### 7.3 关于日期处理\n这一点前面的Google JSON风格指南里也提到了，尽量使用标准的日期格式。或者序列化和反序列化里都是用同样的datePattern格式。\n\n### 7.4 关于自定义序列化与反序列化（包括过滤器）\n对于新手来说，自定义序列化是一切罪恶的根源。\n\n尽量不要使用自定义序列化，除非万不得已，优先考虑使用注解过滤，别名等方式，甚至是重新建一个VO类来组装实际需要的属性。使用自定义序列化时一切要小心，因为这样会导致两个问题：\n- 改变了pojo <-> jsonstring 的自然对应关系，从而不利于阅读代码和排查问题，你改变的关系无法简单的从bean和json上看出来了；\n- 反序列化可能出错，因为对应不上原来的属性了。\n\n如果只是序列化发出去（响应）的是JSON数据、传过来（请求）的数据格式跟JSON无关或者是标准的，此时自定义序列化就无所谓了，反正是要接收方来处理。\n\n### 7.5 JSONObject的使用\nJSONObject是JSON字符串与pojo对象转换过程中的中间表达类型，实现了Map接口，可以看做是一个模拟JSON对象键值对再加上多层嵌套的数据集合，对象的每一个基本类型属性是map里的一个key-value，一个非基本类型属性是一个嵌套的JSONObject对象（key是属性名称，value是表示这个属性值的对象的JSONObject）。如果以前用过apache beanutils里的DynamicBean之类的，就知道JSONObject也是一种动态描述Bean的实现，相当于是拆解了Bean本身的结构与数据。这时候由于JSONObject里可能会没有记录全部的Bean类型数据，例如泛型的具体子类型之类的元数据，如果JSONObject与正常的POJO混用，出现问题的概率较高。\n下列方式尽量不要使用：\n\n```java\npublic class TestBean{\n    @Setter @Getter\n    private TestBean1 testBean1;\n    \n    @Setter @Getter\n    private JSONObject testBean2; // 尽量不要在POJO里用JSONObject\n}\n```\n\n应该从设计上改为都用POJO比较合适:\n\n```java\npublic class TestBean{\n    @Setter @Getter\n    private TestBean1 testBean1;\n    \n    @Setter @Getter\n    private TestBean2 testBean2;; // 使用POJO\n}\n```\n相对的，写一些临时性的测试代码，demo代码，可以直接全部用JSONObject先快速run起来。\n\n同理，jsonstring中嵌套jsonstring也尽量不要用，例如：\n\n```javascript\n{\n    \"name\":\"zhangsan\",\n    \"score\":\"{\\\"math\\\":78,\\\"history\\\":82}\"\n}\n```\n\n应该改为全部都是JSON风格的结构：\n\n```javascript\n{\n    \"name\":\"zhangsan\",\n    \"score\":{\n        \"math\":78,\n        \"history\":82\n    }\n}\n```\n\n另外，对于jsonstring转POJO（或POJO转jsonstring），尽量使用直接转的方式，而不是先转成JSONObject过渡的方式。特别是对于Fastjson，由于性能优化的考虑，这两个执行的代码是不一样的，可能导致不一样的结果。\n\n```java\n    String jsonstring = \"{\\\"a\\\":12}\";\n    \n    // 不推荐这种方式\n    // 除非这里需要对jsonObject做一些简单处理\n    JSONObject jsonObject = JSON.parseObject(jsonstring);\n    A a = jsonObject.toJavaObject(A.class);\n    \n    // 推荐方式\n    A a = JSON.parseObject(jsonstring, A.class);\n    \n```\n\n### 7.6 Hibernate相关问题\n懒加载与级联，可能导致出现问题，例如hibernate，建议封装一层VO类型来序列化。使用VO类还有一个好处，就是可以去掉一些没用的属性，减少数据量，同时可以加上额外的属性。\n\n### 7.7 深层嵌套与泛型问题\n尽量不要在使用过多的层次嵌套的同时使用泛型（List、Map等），可能导致类型丢失，而且问题比较难查。\n\n### 7.8 抽象类型与子类型问题\n尽量不要在同一个Bean的层次结构里使用多个子类型对象，可能导致类型丢失，而且问题比较难查。当然我们可以通过代码显示的传递各种正确的类型，但是这样做引入了更多的不确定性。良好的做法应该是一开始设计时就避免出现这些问题。\n\n### 7.9 避免循环引用\n尽量避免循环引用，这个虽然可以通过序列化特性禁掉，但是如果能避免则避免。\n\n### 7.10 注意编码和不可见字符（特别是二进制数据流）\n对于InputStream、OutputStream的处理，有时候会报一些奇怪的错误，not match之类的，这时候也许我们看日志里的json字符串可能很正常，但就是出错。\n\n这时可能就是编码的问题了，可能是导致字符错乱，也可能是因为UTF-8文件的BOM头，这些潜在的问题可能在二进制数据转文本的时候，因为一些不可见字符无法显示，导致日志看起来只有正常字符而是正确的，问题很难排查。\n\n处理办法就是按二进制的方式把Stream保存起来，然后按hex方式查看，看看是否有多余字符，或者其他错误。\n\n## 8.fastjson的最佳实践\n### 8.1 Maven下引入Fastjson\npom.xml文件里添加依赖即可：\n\n```xml\n<dependency>\n    <groupId>com.alibaba</groupId>\n    <artifactId>fastjson</artifactId>\n    <version>1.2.32</version>\n</dependency>\n```\n\n### 8.2 序列化一个对象成JSON字符串\n\n```java\nUser user = new User();\nuser.setName(\"校长\");\nuser.setAge(3);\nuser.setSalary(new BigDecimal(\"123456789.0123\"));\nString jsonString = JSON.toJSONString(user);\nSystem.out.println(jsonString);\n// 输出 {\"age\":3,\"name\":\"校长\",\"old\":false,\"salary\":123456789.0123}\n```\n\n### 8.3 反序列化一个JSON字符串成Java对象\n\n```java\n String jsonString = \"{\\\"age\\\":3,\\\"birthdate\\\":1496738822842,\\\"name\\\":\\\"校长\\\",\\\"old\\\":true,\\\"salary\\\":123456789.0123}\";\n User u = JSON.parseObject(jsonString ,User.class);\n System.out.println(u.getName());\n // 输出 校长\n\nString jsonStringArray = \"[{\\\"age\\\":3,\\\"birthdate\\\":1496738822842,\\\"name\\\":\\\"校长\\\",\\\"old\\\":true,\\\"salary\\\":123456789.0123}]\";\nList<User> userList = JSON.parseArray(jsonStringArray, User.class);\nSystem.out.println(userList.size());\n// 输出 1\n```\n\n### 8.4 日期格式处理\nFastjson能识别下面这么多种日期格式的字符串：\n\n```java\n    private final static String            defaultPatttern    = \"yyyy-MM-dd HH:mm:ss\";\n    private final static DateTimeFormatter defaultFormatter   = DateTimeFormatter.ofPattern(defaultPatttern);\n    private final static DateTimeFormatter formatter_dt19_tw  = DateTimeFormatter.ofPattern(\"yyyy/MM/dd HH:mm:ss\");\n    private final static DateTimeFormatter formatter_dt19_cn  = DateTimeFormatter.ofPattern(\"yyyy年M月d日 HH:mm:ss\");\n    private final static DateTimeFormatter formatter_dt19_cn_1  = DateTimeFormatter.ofPattern(\"yyyy年M月d日 H时m分s秒\");\n    private final static DateTimeFormatter formatter_dt19_kr  = DateTimeFormatter.ofPattern(\"yyyy년M월d일 HH:mm:ss\");\n    private final static DateTimeFormatter formatter_dt19_us  = DateTimeFormatter.ofPattern(\"MM/dd/yyyy HH:mm:ss\");\n    private final static DateTimeFormatter formatter_dt19_eur = DateTimeFormatter.ofPattern(\"dd/MM/yyyy HH:mm:ss\");\n    private final static DateTimeFormatter formatter_dt19_de  = DateTimeFormatter.ofPattern(\"dd.MM.yyyy HH:mm:ss\");\n    private final static DateTimeFormatter formatter_dt19_in  = DateTimeFormatter.ofPattern(\"dd-MM-yyyy HH:mm:ss\");\n\n    private final static DateTimeFormatter formatter_d8       = DateTimeFormatter.ofPattern(\"yyyyMMdd\");\n    private final static DateTimeFormatter formatter_d10_tw   = DateTimeFormatter.ofPattern(\"yyyy/MM/dd\");\n    private final static DateTimeFormatter formatter_d10_cn   = DateTimeFormatter.ofPattern(\"yyyy年M月d日\");\n    private final static DateTimeFormatter formatter_d10_kr   = DateTimeFormatter.ofPattern(\"yyyy년M월d일\");\n    private final static DateTimeFormatter formatter_d10_us   = DateTimeFormatter.ofPattern(\"MM/dd/yyyy\");\n    private final static DateTimeFormatter formatter_d10_eur  = DateTimeFormatter.ofPattern(\"dd/MM/yyyy\");\n    private final static DateTimeFormatter formatter_d10_de   = DateTimeFormatter.ofPattern(\"dd.MM.yyyy\");\n    private final static DateTimeFormatter formatter_d10_in   = DateTimeFormatter.ofPattern(\"dd-MM-yyyy\");\n\n    private final static DateTimeFormatter ISO_FIXED_FORMAT =\n            DateTimeFormatter.ofPattern(\"yyyy-MM-dd HH:mm:ss\").withZone(ZoneId.systemDefault());\n\n    private final static String formatter_iso8601_pattern     = \"yyyy-MM-dd'T'HH:mm:ss\";\n    private final static DateTimeFormatter formatter_iso8601  = DateTimeFormatter.ofPattern(formatter_iso8601_pattern);\n```\n默认序列化Date输出使用\"yyyy-MM-dd HH:mm:ss\"格式，可以用UseISO8601DateFormat特性换成\"yyyy-MM-dd'T'HH:mm:ss\"格式。\n\n\n```java\nJSON.defaultTimeZone = TimeZone.getTimeZone(\"Asia/Shanghai\");\nJSON.defaultLocale = Locale.US;\n        \npublic static class Model {\n        @JSONField(format = \"MMM dd, yyyy h:mm:ss aa\")\n        private java.util.Date date;\n\n        public java.util.Date getDate() {\n            return date;\n        }\n\n        public void setDate(java.util.Date date) {\n            this.date = date;\n        }\n\n        @JSONField(format = \"MMM-dd-yyyy h:mm:ss aa\")\n        public java.sql.Date date2;\n}\n```\n\n### 8.5 常见序列化特性的使用\nFastjson的序列化特性定义在枚举类com\\alibaba\\fastjson\\serializer\\SerializerFeature.java中，目前正好有30项。\n可以通过设置多个特性到FastjsonConfig中全局使用，也可以在某个具体的JSON.writeJSONString时作为参数使用。\n1. QuoteFieldNames, //key使用引号\n2. UseSingleQuotes, //使用单引号\n3. WriteMapNullValue, //输出Map的null值\n4. WriteEnumUsingToString, //枚举属性输出toString的结果\n5. WriteEnumUsingName, //枚举数据输出name\n6. UseISO8601DateFormat, //使用日期格式\n7. WriteNullListAsEmpty, //List为空则输出[]\n8. WriteNullStringAsEmpty, //String为空则输出\"\"\n9. WriteNullNumberAsZero, //Number类型为空则输出0\n10. WriteNullBooleanAsFalse, //Boolean类型为空则输出false\n11. SkipTransientField,\n12. SortField, //排序字段\n13. WriteTabAsSpecial,\n14. PrettyFormat, // 格式化JSON缩进\n15. WriteClassName, // 输出类名\n16. DisableCircularReferenceDetect, // 禁止循环引用\n17. WriteSlashAsSpecial, // 对斜杠’/’进行转义\n18. BrowserCompatible,\n19. WriteDateUseDateFormat, // 全局修改日期格式,默认为false。JSON.DEFFAULT_DATE_FORMAT = “yyyy-MM-dd”;JSON.toJSONString(obj, SerializerFeature.WriteDateUseDateFormat);\n20. NotWriteRootClassName,\n21. DisableCheckSpecialChar,\n22. BeanToArray,\n23. WriteNonStringKeyAsString,\n24. NotWriteDefaultValue,\n25. BrowserSecure,\n26. IgnoreNonFieldGetter,\n27. WriteNonStringValueAsString,\n28. IgnoreErrorGetter,\n29. WriteBigDecimalAsPlain,\n30. MapSortField\n\n\n使用示例如下（可以[参见此处](http://blog.csdn.net/u010246789/article/details/52539576)）：\n\n```java\nWord word = new Word();\nword.setA(\"a\");\nword.setB(2);\nword.setC(true);\nword.setD(\"d\");\nword.setE(\"\");\nword.setF(null);\nword.setDate(new Date());\n\nSystem.out.println(JSON.toJSONString(word));\nSystem.out.println(JSON.toJSONString(word, SerializerFeature.PrettyFormat,\n    SerializerFeature.WriteMapNullValue, SerializerFeature.WriteNullStringAsEmpty,\n    SerializerFeature.DisableCircularReferenceDetect,\n    SerializerFeature.WriteNullListAsEmpty));\n\n```\n\n### 8.6 Annotation注解的使用\n1) JSONField\n\n可以配置在属性（setter、getter）和字段（必须是public field）上。\n详情参见此处：[JSONField用法](https://github.com/alibaba/fastjson/wiki/JSONField)\n\n```java\npackage com.alibaba.fastjson.annotation;\n\npublic @interface JSONField {\n    // 配置序列化和反序列化的顺序，1.1.42版本之后才支持\n    int ordinal() default 0;\n\n     // 指定字段的名称\n    String name() default \"\";\n\n    // 指定字段的格式，对日期格式有用\n    String format() default \"\";\n\n    // 是否序列化\n    boolean serialize() default true;\n\n    // 是否反序列化\n    boolean deserialize() default true;\n}\n```\n\n```java\n@JSONField(name=\"ID\")\npublic int getId() {return id;}\n\n// 配置date序列化和反序列使用yyyyMMdd日期格式\n@JSONField(format=\"yyyyMMdd\")\npublic Date date1;  \n\n // 不序列化\n @JSONField(serialize=false)\n public Date date2;\n\n // 不反序列化\n @JSONField(deserialize=false)\n public Date date3;\n\n // 按ordinal排序\n @JSONField(ordinal = 2)\n private int f1;\n\n @JSONField(ordinal = 1)\n private int f2;\n    \n```\n\n2) JSONType\n\n- 自定义序列化：[ObjectSerializer](https://github.com/alibaba/fastjson/wiki/JSONType_serializer)\n- 子类型处理：[SeeAlso](https://github.com/alibaba/fastjson/wiki/JSONType_seeAlso_cn)\n- JSONType.alphabetic属性: fastjson缺省时会使用字母序序列化，如果你是希望按照java fields/getters的自然顺序序列化，可以配置JSONType.alphabetic，使用方法如下：\n\n```java\n@JSONType(alphabetic = false)\npublic static class B {\n    public int f2;\n    public int f1;\n    public int f0;\n}\n```\n\n### 8.7 自定义序列化与反序列化\n\n- 自定义序列化\n\n只需要2步：[参见此处](https://github.com/alibaba/fastjson/wiki/ObjectSerializer_cn)\n1)实现ObjectSerializer\n\n```java\npublic class CharacterSerializer implements ObjectSerializer {\n    public void write(JSONSerializer serializer, \n                      Object object, \n                      Object fieldName, \n                      Type fieldType, \n                      int features) throws IOException {\n        SerializeWriter out = serializer.out;\n    \n        Character value = (Character) object;\n        if (value == null) {\n            out.writeString(\"\");\n            return;\n        }\n    \n        char c = value.charValue();\n        if (c == 0) {\n            out.writeString(\"\\u0000\");\n        } else {\n            out.writeString(value.toString());\n        }\n    }\n}\n```\n\n2)注册ObjectSerializer\n\n```java\nSerializeConfig.getGlobalInstance().put(Character.class, new CharacterSerializer());\n```\n\n- 自定义反序列化\n\n只需要2步：[参见此处](https://github.com/alibaba/fastjson/wiki/ObjectDeserializer_cn)\n\n1)自定义实现ObjectDeserializer\n\n```java\npublic static enum OrderActionEnum {\n                                    FAIL(1), SUCC(0);\n\n    private int code;\n\n    OrderActionEnum(int code){\n        this.code = code;\n    }\n}\n\npublic static class Msg {\n\n    public OrderActionEnum actionEnum;\n    public String          body;\n}\n\npublic static class OrderActionEnumDeser implements ObjectDeserializer {\n\n    @SuppressWarnings(\"unchecked\")\n    @Override\n    public <T> T deserialze(DefaultJSONParser parser, Type type, Object fieldName) {\n        Integer intValue = parser.parseObject(int.class);\n        if (intValue == 1) {\n            return (T) OrderActionEnum.FAIL;\n        } else if (intValue == 0) {\n            return (T) OrderActionEnum.SUCC;\n        }\n        throw new IllegalStateException();\n    }\n\n    @Override\n    public int getFastMatchToken() {\n        return JSONToken.LITERAL_INT;\n    }\n\n}\n```\n\n2)注册并使用ObjectDeserializer\n\n```java\nParserConfig.getGlobalInstance().putDeserializer(OrderActionEnum.class, new OrderActionEnumDeser());\n\n{\n    Msg msg = JSON.parseObject(\"{\\\"actionEnum\\\":1,\\\"body\\\":\\\"A\\\"}\", Msg.class);\n    Assert.assertEquals(msg.body, \"A\");\n    Assert.assertEquals(msg.actionEnum, OrderActionEnum.FAIL);\n}\n{\n    Msg msg = JSON.parseObject(\"{\\\"actionEnum\\\":0,\\\"body\\\":\\\"B\\\"}\", Msg.class);\n    Assert.assertEquals(msg.body, \"B\");\n    Assert.assertEquals(msg.actionEnum, OrderActionEnum.SUCC);\n}\n```\n\n### 8.8 自定义序列化之过滤器\n- 全局的过滤器：JSON.toJSONString方法的参数中可以配置处理所有类型的SerializeFilter\n- 类级别过滤器：[Class_Level_SerializeFilter](https://github.com/alibaba/fastjson/wiki/Class_Level_SerializeFilter)\n- 属性过滤器：[使用PropertyPreFilter过滤属性](https://github.com/alibaba/fastjson/wiki/%E4%BD%BF%E7%94%A8SimplePropertyPreFilter%E8%BF%87%E6%BB%A4%E5%B1%9E%E6%80%A7)\n- 多余字段处理器：[ExtraProcessor 用于处理多余的字段、\nExtraTypeProvider用于处理多余字段时提供类型信息](https://github.com/alibaba/fastjson/wiki/ParseProcess)\n- 定制反序列化：[在fastjson-1.2.9版本后提供了ExtraProcessable接口，用于定制对象的反序列化功能](https://github.com/alibaba/fastjson/wiki/ExtraProcessable)，可用于添加没有的字段\n- 标签过滤：[JSONField(label)，相当于分组](https://github.com/alibaba/fastjson/wiki/LabelFilter)\n- 自动识别嵌套对象子类型：[FieldTypeResolver](https://github.com/alibaba/fastjson/wiki/FieldTypeResolver)\n\n### 8.9 与Spring MVC的配合使用\n\nFastJson 提供了Spring MVC HttpMessageConverter的实现，将POJO输出为JSONP，支持跨域数据访问。\n\nFastJsonpHttpMessageConverter4 for Spring MVC 4.2+：\n\n```xml\n<mvc:annotation-driven>\n    <mvc:message-converters>\n        <bean\n            class=\"com.alibaba.fastjson.support.spring.FastJsonpHttpMessageConverter4\">\n            <property name=\"supportedMediaTypes\">\n                <list>\n                    <value>application/json;charset=UTF-8</value>\n                </list>\n            </property>\n        </bean>\n    </mvc:message-converters>\n</mvc:annotation-driven>\n\n<mvc:default-servlet-handler />\n\n<bean id=\"fastJsonpResponseBodyAdvice\" class=\"com.alibaba.fastjson.support.spring.FastJsonpResponseBodyAdvice\">\n    <constructor-arg>\n        <list>\n            <value>callback</value>\n            <value>jsonp</value>\n        </list>\n    </constructor-arg>\n</bean>\n```\n\n[详细配置参见此处](https://github.com/alibaba/fastjson/wiki/FastJsonpHttpMessageConverter4_CN)\n\n### 8.10 与Spring Boot的集成使用\n\n参见此处：[spring-boot-starter-fastjson](https://github.com/storezhang/utils/tree/master/spring-boot-starter-fastjson)\n\n\n### 8.11 泛型处理\n[在fastjson中提供了一个用于处理泛型反序列化的类TypeReference](https://github.com/alibaba/fastjson/wiki/Typ)eReference\n\n### 8.12jaxrs支持\nFastJson 提供了JAX-RS Provider的实现 [FastJsonProvider](https://github.com/alibaba/fastjson/wiki/FastJsonProvider_CN)\n\n可用于在构建Restful服务时使用FastJson进行数据的Serialize and Deserialize\n\n### 8.13 swagger支持\n\n[增加对swagger的支持](https://github.com/alibaba/fastjson/pull/716)\n\n\n更多功能 todo list\n\n## 9.Fastjson的设计说明\ntodo list\n\n","source":"_posts/json-best-practice.md","raw":"title: JSON最佳实践\ndate: 2017-06-06 23:00:05\ntags: json\n---\nJSON是一种文本方式展示结构化数据的方式，从产生的时候开始就由于其简单好用、跨平台，特别适合HTTP下数据的传输（例如现在很流行的REST）而被广泛使用。\n\n## 1、JSON是什么\nJSON起源于1999年的[JS语言规范ECMA262的一个子集](http://javascript.crockford.com/)（即15.12章节描述了格式与解析），后来2003年作为一个数据格式[ECMA404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf)（很囧的序号有不有？）发布。\n2006年，作为[rfc4627](http://www.ietf.org/rfc/rfc4627.txt)发布，这时规范增加到18页，去掉没用的部分，十页不到。\n\nJSON的应用很广泛，这里有超过100种语言下的JSON库：[json.org](http://www.json.org/)。\n\n更多的可以参考这里，[关于json的一切](https://github.com/burningtree/awesome-json)。\n\n\n## 2、优缺点、标准与schema\n### 2.1 结构与类型\n这估计是最简单标准规范之一：\n- 只有两种结构：对象内的键值对集合结构和数组，对象用{}表示、内部是\"key\":\"value\"，数组用[]表示，不同值用逗号分开\n- 基本数值有7个： false / null / true / object / array / number / string\n- 再加上结构可以嵌套，进而可以用来表达复杂的数据\n\n一个简单实例：\n \n```javascript\n\n   {\n      \"Image\": {\n          \"Width\":  800,\n          \"Height\": 600,\n          \"Title\":  \"View from 15th Floor\",\n          \"Thumbnail\": {\n              \"Url\":    \"http://www.example.com/image/481989943\",\n              \"Height\": 125,\n              \"Width\":  \"100\"\n          },\n          \"IDs\": [116, 943, 234, 38793]\n        }\n   }\n\n\n```\n\n### 2.2 优点\n- 基于纯文本，所以对于人类阅读是很友好的。\n- 规范简单，所以容易处理，开箱即用，特别是JS类的ECMA脚本里是内建支持的，可以直接作为对象使用。\n- 平台无关性，因为类型和结构都是平台无关的，而且好处理，容易实现不同语言的处理类库，可以作为多个不同异构系统之间的数据传输格式协议，特别是在HTTP/REST下的数据格式。\n\n### 2.3 缺点\n缺点也很明显：\n- 性能一般，文本表示的数据一般来说比二进制大得多，在数据传输上和解析处理上都要更影响性能。\n- 缺乏schema，跟同是文本数据格式的XML比，在类型的严格性和丰富性上要差很多。XML可以借由XSD或DTD来定义复杂的格式，并由此来验证XML文档是否符合格式要求，甚至进一步的，可以基于XSD来生成具体语言的操作代码，例如apache xmlbeans。并且这些工具组合到一起，形成一套庞大的生态，例如基于XML可以实现SOAP和WSDL，一系列的ws-*规范。但是我们也可以看到JSON在缺乏规范的情况下，实际上有更大一些的灵活性，特别是近年来REST的快速发展，已经有一些schema相关的发展(例如[理解JSON Schema](https://spacetelescope.github.io/understanding-json-schema/index.html)，[使用JSON Schema](http://usingjsonschema.com/downloads/)， [在线schema测试](http://azimi.me/json-schema-view/demo/demo.html))，也有类似于WSDL的[WADL](https://www.w3.org/Submission/wadl/)出现。\n\n<!-- more -->\n\n## 3. 常用技术与工具\n### 3.1 相关技术以及与XML的关系\n- 使用JSON实现RPC（类似XML-RPC）：[JSON-RPC](http://www.jsonrpc.org/)\n- 使用JSON实现path查询操作（类似XML-PATH）：[JsonPATH](https://github.com/json-path/JsonPath)\n- 在线查询工具：[JsonPATH](http://jsonpath.com/)\n \n例如上面的示例json，用表达式$.Image.IDs[:1]查询，得到116：\n![image](https://raw.githubusercontent.com/kimmking/kk/master/images/json/jsonpath.png)\n\n\n我们看到JSON与XML是如此之像，实际上这两个格式可以看做一个是学院排，一个是平民派。一个对象从POJO转换成XML与JSON的过程，基本是一致的（绝大部分工作可以复用，以后有机会再详细聊这个过程），10年前我自己也做过一个基于XML的RPC（[http://code.google.com/p/rpcfx/](http://code.google.com/p/rpcfx/)，貌似已经被墙），里面实现了java和dotnet、JS的XML序列化与反序列化，同时作为一个副产品，实现了JSON序列化。\n\n后来thoughtsworks公司出品的XStream就是同时做了XML与JSON的序列化。而创建Jackson库的组织本来叫fasterxml，就是处理xml的。当然从这个角度来看，Fastjson库，稍微改改也是一个高性能的XML序列化库。\n只是XML有着更严格的结构，更丰富的工具生态，拿查询与操作来说，XML还有XQuery、XLST等工具。处理方式上也有DOM方式与SAX流模式，这两个绝然不同的技术。\n\n单从性能来考虑，XML更是有[VTD-XML](http://vtd-xml.sourceforge.net/)这种解决了DOM消耗太大内存与SAX只能单向每个节点读一次不能随机读的缺点的高性能处理方式。\n\n### 3.2 Java类库\n- [Fastjson](https://github.com/alibaba/fastjson)\n- [Jackson](http://wiki.fasterxml.com/JacksonHome)\n- [Gson](https://github.com/google/gson)\n- [Xstream](http://x-stream.github.io/)\n\n### 3.3 工具\n- 格式化工具：[jsbeautifier](http://jsbeautifier.org/)\n- chrome插件：[5个Json View插件](http://www.cnplugins.com/zhuanti/five-chrome-json-plugins.html)\n- 在线Mock: [在线mock](https://www.easy-mock.com/)\n- 其他Mock：[SoapUI](https://www.soapui.org/rest-testing-mocking/rest-service-mocking.html)可以支持，SwaggerUI也可以，[RestMock](https://github.com/andrzejchm/RESTMock)也可以。\n\n![image](https://github.com/kimmking/kk/blob/master/images/json/json01.png?raw=true)\n![image](https://github.com/kimmking/kk/blob/master/images/json/json02.png?raw=true)\n\n## 4. JSON编码指南\n### 4.1 Google JSON风格指南\n遵循好的设计与编码风格，能提前解决80%的问题:\n- 英文版[Google JSON Style Guide](https://google.github.io/styleguide/jsoncstyleguide.xml)：https://google.github.io/styleguide/jsoncstyleguide.xml\n- 中文版[Google JSON风格指南](https://github.com/darcyliu/google-styleguide/blob/master/JSONStyleGuide.md)：https://github.com/darcyliu/google-styleguide/blob/master/JSONStyleGuide.md\n\n简单摘录如下：\n- 属性名和值都是用双引号，不要把注释写到对象里面，对象数据要简洁\n- 不要随意结构化分组对象，推荐是用扁平化方式，层次不要太复杂\n- 命名方式要有意义，比如单复数表示\n- 驼峰式命名，遵循Bean规范\n- 使用版本来控制变更冲突\n- 对于一些关键字，不要拿来做key\n- 如果一个属性是可选的或者包含空值或null值，考虑从JSON中去掉该属性，除非它的存在有很强的语义原因\n- 序列化枚举类型时，使用name而不是value\n- 日期要用标准格式处理\n- 设计好通用的分页参数\n- 设计好异常处理\n\n### 4.2 使用JSON实现API\n[JSON API](http://jsonapi.org.cn/format/)与Google JSON风格指南有很多可以相互参照之处。\n\n[JSON API](http://jsonapi.org.cn/format/)是数据交互规范，用以定义客户端如何获取与修改资源，以及服务器如何响应对应请求。\n\nJSON API设计用来最小化请求的数量，以及客户端与服务器间传输的数据量。在高效实现的同时，无需牺牲可读性、灵活性和可发现性。\n\n## 5. REST\n todo list\n - dubbox\n - resteasy\n - restlet\n - jersey\n \n![image](https://github.com/kimmking/kk/blob/master/images/json/rest.jpg?raw=true)\n\n## 6. SwaggerUI实现API文档管理与在线测试\n todo list\n \n![image](https://github.com/kimmking/kk/blob/master/images/json/json03.png?raw=true)\n\n## 7. JSON使用场景分析\nJSON的使用，依据不同用途，有几个典型的场景：\n1. 内部后台系统之间的数据传输，此种情况下基于HTTP的JSON格式其实没有优势。\n2. 前后台之间的API调用，典型的是前端作为React/VUE/AngularJS/ExtJS等框架做的，前后端使用JSON交互。\n- 此时可以使用类似Dubbox之类的框架，或者原始一些SpringMVC的Controller上直接@ResponseBody或@RestController也可以。\n- 强烈建议在Dubbox之类的rest之上再加一个Nginx转发，这样一些策略的控制，比如同源的控制、简单的缓存策略、安全策略等都可以放到Nginx上来做，也利于多个机器时的负载均衡。\n- 建议使用swaggerUI来自动实现API文档和在线测试。功能很强大，操作简单，而且可以mock接口，在后台没有做好之前，前台就可以先开发了。\n- 可以使用RestUnit或SoapUI来实现自动化测试与压力测试。\n\n3. 提供给第三方的开发接口API\n基本同上，可以参考Google JSON风格指南与JSON API章节。\n\n## 8.JSON的一些经验\n最近在协助处理一些Fastjson的bug问题，发现最常见的其实是大家使用的不规范性，这样碰到各种坑的可能性就很大。根据我平时使用的经验，以及总结大家常见的问题，归纳如下：\n\n### 7.1 遵循Java Beans规范与JSON规范\n实践告诉我们：遵循beans规范和JSON规范的方式，能减少大部分的问题，比如正确实现setter、getter，用别名就加annotation。注意基本类型的匹配转换，比如在fastjson的issue见到试图把\"{\"a\":{}}\"中的a转换成List的。\n\n### 7.2 使用正常的key\n尽量不要使用数字等字符开头的key，尽量使用符合Java的class或property命名规范的key，这样会减少不必要的冲突。在jsonpath或js里，a.1可能会被解释成a[1]或a[\"1\"]，这些都会带来不必要的麻烦。\n\n### 7.3 关于日期处理\n这一点前面的Google JSON风格指南里也提到了，尽量使用标准的日期格式。或者序列化和反序列化里都是用同样的datePattern格式。\n\n### 7.4 关于自定义序列化与反序列化（包括过滤器）\n对于新手来说，自定义序列化是一切罪恶的根源。\n\n尽量不要使用自定义序列化，除非万不得已，优先考虑使用注解过滤，别名等方式，甚至是重新建一个VO类来组装实际需要的属性。使用自定义序列化时一切要小心，因为这样会导致两个问题：\n- 改变了pojo <-> jsonstring 的自然对应关系，从而不利于阅读代码和排查问题，你改变的关系无法简单的从bean和json上看出来了；\n- 反序列化可能出错，因为对应不上原来的属性了。\n\n如果只是序列化发出去（响应）的是JSON数据、传过来（请求）的数据格式跟JSON无关或者是标准的，此时自定义序列化就无所谓了，反正是要接收方来处理。\n\n### 7.5 JSONObject的使用\nJSONObject是JSON字符串与pojo对象转换过程中的中间表达类型，实现了Map接口，可以看做是一个模拟JSON对象键值对再加上多层嵌套的数据集合，对象的每一个基本类型属性是map里的一个key-value，一个非基本类型属性是一个嵌套的JSONObject对象（key是属性名称，value是表示这个属性值的对象的JSONObject）。如果以前用过apache beanutils里的DynamicBean之类的，就知道JSONObject也是一种动态描述Bean的实现，相当于是拆解了Bean本身的结构与数据。这时候由于JSONObject里可能会没有记录全部的Bean类型数据，例如泛型的具体子类型之类的元数据，如果JSONObject与正常的POJO混用，出现问题的概率较高。\n下列方式尽量不要使用：\n\n```java\npublic class TestBean{\n    @Setter @Getter\n    private TestBean1 testBean1;\n    \n    @Setter @Getter\n    private JSONObject testBean2; // 尽量不要在POJO里用JSONObject\n}\n```\n\n应该从设计上改为都用POJO比较合适:\n\n```java\npublic class TestBean{\n    @Setter @Getter\n    private TestBean1 testBean1;\n    \n    @Setter @Getter\n    private TestBean2 testBean2;; // 使用POJO\n}\n```\n相对的，写一些临时性的测试代码，demo代码，可以直接全部用JSONObject先快速run起来。\n\n同理，jsonstring中嵌套jsonstring也尽量不要用，例如：\n\n```javascript\n{\n    \"name\":\"zhangsan\",\n    \"score\":\"{\\\"math\\\":78,\\\"history\\\":82}\"\n}\n```\n\n应该改为全部都是JSON风格的结构：\n\n```javascript\n{\n    \"name\":\"zhangsan\",\n    \"score\":{\n        \"math\":78,\n        \"history\":82\n    }\n}\n```\n\n另外，对于jsonstring转POJO（或POJO转jsonstring），尽量使用直接转的方式，而不是先转成JSONObject过渡的方式。特别是对于Fastjson，由于性能优化的考虑，这两个执行的代码是不一样的，可能导致不一样的结果。\n\n```java\n    String jsonstring = \"{\\\"a\\\":12}\";\n    \n    // 不推荐这种方式\n    // 除非这里需要对jsonObject做一些简单处理\n    JSONObject jsonObject = JSON.parseObject(jsonstring);\n    A a = jsonObject.toJavaObject(A.class);\n    \n    // 推荐方式\n    A a = JSON.parseObject(jsonstring, A.class);\n    \n```\n\n### 7.6 Hibernate相关问题\n懒加载与级联，可能导致出现问题，例如hibernate，建议封装一层VO类型来序列化。使用VO类还有一个好处，就是可以去掉一些没用的属性，减少数据量，同时可以加上额外的属性。\n\n### 7.7 深层嵌套与泛型问题\n尽量不要在使用过多的层次嵌套的同时使用泛型（List、Map等），可能导致类型丢失，而且问题比较难查。\n\n### 7.8 抽象类型与子类型问题\n尽量不要在同一个Bean的层次结构里使用多个子类型对象，可能导致类型丢失，而且问题比较难查。当然我们可以通过代码显示的传递各种正确的类型，但是这样做引入了更多的不确定性。良好的做法应该是一开始设计时就避免出现这些问题。\n\n### 7.9 避免循环引用\n尽量避免循环引用，这个虽然可以通过序列化特性禁掉，但是如果能避免则避免。\n\n### 7.10 注意编码和不可见字符（特别是二进制数据流）\n对于InputStream、OutputStream的处理，有时候会报一些奇怪的错误，not match之类的，这时候也许我们看日志里的json字符串可能很正常，但就是出错。\n\n这时可能就是编码的问题了，可能是导致字符错乱，也可能是因为UTF-8文件的BOM头，这些潜在的问题可能在二进制数据转文本的时候，因为一些不可见字符无法显示，导致日志看起来只有正常字符而是正确的，问题很难排查。\n\n处理办法就是按二进制的方式把Stream保存起来，然后按hex方式查看，看看是否有多余字符，或者其他错误。\n\n## 8.fastjson的最佳实践\n### 8.1 Maven下引入Fastjson\npom.xml文件里添加依赖即可：\n\n```xml\n<dependency>\n    <groupId>com.alibaba</groupId>\n    <artifactId>fastjson</artifactId>\n    <version>1.2.32</version>\n</dependency>\n```\n\n### 8.2 序列化一个对象成JSON字符串\n\n```java\nUser user = new User();\nuser.setName(\"校长\");\nuser.setAge(3);\nuser.setSalary(new BigDecimal(\"123456789.0123\"));\nString jsonString = JSON.toJSONString(user);\nSystem.out.println(jsonString);\n// 输出 {\"age\":3,\"name\":\"校长\",\"old\":false,\"salary\":123456789.0123}\n```\n\n### 8.3 反序列化一个JSON字符串成Java对象\n\n```java\n String jsonString = \"{\\\"age\\\":3,\\\"birthdate\\\":1496738822842,\\\"name\\\":\\\"校长\\\",\\\"old\\\":true,\\\"salary\\\":123456789.0123}\";\n User u = JSON.parseObject(jsonString ,User.class);\n System.out.println(u.getName());\n // 输出 校长\n\nString jsonStringArray = \"[{\\\"age\\\":3,\\\"birthdate\\\":1496738822842,\\\"name\\\":\\\"校长\\\",\\\"old\\\":true,\\\"salary\\\":123456789.0123}]\";\nList<User> userList = JSON.parseArray(jsonStringArray, User.class);\nSystem.out.println(userList.size());\n// 输出 1\n```\n\n### 8.4 日期格式处理\nFastjson能识别下面这么多种日期格式的字符串：\n\n```java\n    private final static String            defaultPatttern    = \"yyyy-MM-dd HH:mm:ss\";\n    private final static DateTimeFormatter defaultFormatter   = DateTimeFormatter.ofPattern(defaultPatttern);\n    private final static DateTimeFormatter formatter_dt19_tw  = DateTimeFormatter.ofPattern(\"yyyy/MM/dd HH:mm:ss\");\n    private final static DateTimeFormatter formatter_dt19_cn  = DateTimeFormatter.ofPattern(\"yyyy年M月d日 HH:mm:ss\");\n    private final static DateTimeFormatter formatter_dt19_cn_1  = DateTimeFormatter.ofPattern(\"yyyy年M月d日 H时m分s秒\");\n    private final static DateTimeFormatter formatter_dt19_kr  = DateTimeFormatter.ofPattern(\"yyyy년M월d일 HH:mm:ss\");\n    private final static DateTimeFormatter formatter_dt19_us  = DateTimeFormatter.ofPattern(\"MM/dd/yyyy HH:mm:ss\");\n    private final static DateTimeFormatter formatter_dt19_eur = DateTimeFormatter.ofPattern(\"dd/MM/yyyy HH:mm:ss\");\n    private final static DateTimeFormatter formatter_dt19_de  = DateTimeFormatter.ofPattern(\"dd.MM.yyyy HH:mm:ss\");\n    private final static DateTimeFormatter formatter_dt19_in  = DateTimeFormatter.ofPattern(\"dd-MM-yyyy HH:mm:ss\");\n\n    private final static DateTimeFormatter formatter_d8       = DateTimeFormatter.ofPattern(\"yyyyMMdd\");\n    private final static DateTimeFormatter formatter_d10_tw   = DateTimeFormatter.ofPattern(\"yyyy/MM/dd\");\n    private final static DateTimeFormatter formatter_d10_cn   = DateTimeFormatter.ofPattern(\"yyyy年M月d日\");\n    private final static DateTimeFormatter formatter_d10_kr   = DateTimeFormatter.ofPattern(\"yyyy년M월d일\");\n    private final static DateTimeFormatter formatter_d10_us   = DateTimeFormatter.ofPattern(\"MM/dd/yyyy\");\n    private final static DateTimeFormatter formatter_d10_eur  = DateTimeFormatter.ofPattern(\"dd/MM/yyyy\");\n    private final static DateTimeFormatter formatter_d10_de   = DateTimeFormatter.ofPattern(\"dd.MM.yyyy\");\n    private final static DateTimeFormatter formatter_d10_in   = DateTimeFormatter.ofPattern(\"dd-MM-yyyy\");\n\n    private final static DateTimeFormatter ISO_FIXED_FORMAT =\n            DateTimeFormatter.ofPattern(\"yyyy-MM-dd HH:mm:ss\").withZone(ZoneId.systemDefault());\n\n    private final static String formatter_iso8601_pattern     = \"yyyy-MM-dd'T'HH:mm:ss\";\n    private final static DateTimeFormatter formatter_iso8601  = DateTimeFormatter.ofPattern(formatter_iso8601_pattern);\n```\n默认序列化Date输出使用\"yyyy-MM-dd HH:mm:ss\"格式，可以用UseISO8601DateFormat特性换成\"yyyy-MM-dd'T'HH:mm:ss\"格式。\n\n\n```java\nJSON.defaultTimeZone = TimeZone.getTimeZone(\"Asia/Shanghai\");\nJSON.defaultLocale = Locale.US;\n        \npublic static class Model {\n        @JSONField(format = \"MMM dd, yyyy h:mm:ss aa\")\n        private java.util.Date date;\n\n        public java.util.Date getDate() {\n            return date;\n        }\n\n        public void setDate(java.util.Date date) {\n            this.date = date;\n        }\n\n        @JSONField(format = \"MMM-dd-yyyy h:mm:ss aa\")\n        public java.sql.Date date2;\n}\n```\n\n### 8.5 常见序列化特性的使用\nFastjson的序列化特性定义在枚举类com\\alibaba\\fastjson\\serializer\\SerializerFeature.java中，目前正好有30项。\n可以通过设置多个特性到FastjsonConfig中全局使用，也可以在某个具体的JSON.writeJSONString时作为参数使用。\n1. QuoteFieldNames, //key使用引号\n2. UseSingleQuotes, //使用单引号\n3. WriteMapNullValue, //输出Map的null值\n4. WriteEnumUsingToString, //枚举属性输出toString的结果\n5. WriteEnumUsingName, //枚举数据输出name\n6. UseISO8601DateFormat, //使用日期格式\n7. WriteNullListAsEmpty, //List为空则输出[]\n8. WriteNullStringAsEmpty, //String为空则输出\"\"\n9. WriteNullNumberAsZero, //Number类型为空则输出0\n10. WriteNullBooleanAsFalse, //Boolean类型为空则输出false\n11. SkipTransientField,\n12. SortField, //排序字段\n13. WriteTabAsSpecial,\n14. PrettyFormat, // 格式化JSON缩进\n15. WriteClassName, // 输出类名\n16. DisableCircularReferenceDetect, // 禁止循环引用\n17. WriteSlashAsSpecial, // 对斜杠’/’进行转义\n18. BrowserCompatible,\n19. WriteDateUseDateFormat, // 全局修改日期格式,默认为false。JSON.DEFFAULT_DATE_FORMAT = “yyyy-MM-dd”;JSON.toJSONString(obj, SerializerFeature.WriteDateUseDateFormat);\n20. NotWriteRootClassName,\n21. DisableCheckSpecialChar,\n22. BeanToArray,\n23. WriteNonStringKeyAsString,\n24. NotWriteDefaultValue,\n25. BrowserSecure,\n26. IgnoreNonFieldGetter,\n27. WriteNonStringValueAsString,\n28. IgnoreErrorGetter,\n29. WriteBigDecimalAsPlain,\n30. MapSortField\n\n\n使用示例如下（可以[参见此处](http://blog.csdn.net/u010246789/article/details/52539576)）：\n\n```java\nWord word = new Word();\nword.setA(\"a\");\nword.setB(2);\nword.setC(true);\nword.setD(\"d\");\nword.setE(\"\");\nword.setF(null);\nword.setDate(new Date());\n\nSystem.out.println(JSON.toJSONString(word));\nSystem.out.println(JSON.toJSONString(word, SerializerFeature.PrettyFormat,\n    SerializerFeature.WriteMapNullValue, SerializerFeature.WriteNullStringAsEmpty,\n    SerializerFeature.DisableCircularReferenceDetect,\n    SerializerFeature.WriteNullListAsEmpty));\n\n```\n\n### 8.6 Annotation注解的使用\n1) JSONField\n\n可以配置在属性（setter、getter）和字段（必须是public field）上。\n详情参见此处：[JSONField用法](https://github.com/alibaba/fastjson/wiki/JSONField)\n\n```java\npackage com.alibaba.fastjson.annotation;\n\npublic @interface JSONField {\n    // 配置序列化和反序列化的顺序，1.1.42版本之后才支持\n    int ordinal() default 0;\n\n     // 指定字段的名称\n    String name() default \"\";\n\n    // 指定字段的格式，对日期格式有用\n    String format() default \"\";\n\n    // 是否序列化\n    boolean serialize() default true;\n\n    // 是否反序列化\n    boolean deserialize() default true;\n}\n```\n\n```java\n@JSONField(name=\"ID\")\npublic int getId() {return id;}\n\n// 配置date序列化和反序列使用yyyyMMdd日期格式\n@JSONField(format=\"yyyyMMdd\")\npublic Date date1;  \n\n // 不序列化\n @JSONField(serialize=false)\n public Date date2;\n\n // 不反序列化\n @JSONField(deserialize=false)\n public Date date3;\n\n // 按ordinal排序\n @JSONField(ordinal = 2)\n private int f1;\n\n @JSONField(ordinal = 1)\n private int f2;\n    \n```\n\n2) JSONType\n\n- 自定义序列化：[ObjectSerializer](https://github.com/alibaba/fastjson/wiki/JSONType_serializer)\n- 子类型处理：[SeeAlso](https://github.com/alibaba/fastjson/wiki/JSONType_seeAlso_cn)\n- JSONType.alphabetic属性: fastjson缺省时会使用字母序序列化，如果你是希望按照java fields/getters的自然顺序序列化，可以配置JSONType.alphabetic，使用方法如下：\n\n```java\n@JSONType(alphabetic = false)\npublic static class B {\n    public int f2;\n    public int f1;\n    public int f0;\n}\n```\n\n### 8.7 自定义序列化与反序列化\n\n- 自定义序列化\n\n只需要2步：[参见此处](https://github.com/alibaba/fastjson/wiki/ObjectSerializer_cn)\n1)实现ObjectSerializer\n\n```java\npublic class CharacterSerializer implements ObjectSerializer {\n    public void write(JSONSerializer serializer, \n                      Object object, \n                      Object fieldName, \n                      Type fieldType, \n                      int features) throws IOException {\n        SerializeWriter out = serializer.out;\n    \n        Character value = (Character) object;\n        if (value == null) {\n            out.writeString(\"\");\n            return;\n        }\n    \n        char c = value.charValue();\n        if (c == 0) {\n            out.writeString(\"\\u0000\");\n        } else {\n            out.writeString(value.toString());\n        }\n    }\n}\n```\n\n2)注册ObjectSerializer\n\n```java\nSerializeConfig.getGlobalInstance().put(Character.class, new CharacterSerializer());\n```\n\n- 自定义反序列化\n\n只需要2步：[参见此处](https://github.com/alibaba/fastjson/wiki/ObjectDeserializer_cn)\n\n1)自定义实现ObjectDeserializer\n\n```java\npublic static enum OrderActionEnum {\n                                    FAIL(1), SUCC(0);\n\n    private int code;\n\n    OrderActionEnum(int code){\n        this.code = code;\n    }\n}\n\npublic static class Msg {\n\n    public OrderActionEnum actionEnum;\n    public String          body;\n}\n\npublic static class OrderActionEnumDeser implements ObjectDeserializer {\n\n    @SuppressWarnings(\"unchecked\")\n    @Override\n    public <T> T deserialze(DefaultJSONParser parser, Type type, Object fieldName) {\n        Integer intValue = parser.parseObject(int.class);\n        if (intValue == 1) {\n            return (T) OrderActionEnum.FAIL;\n        } else if (intValue == 0) {\n            return (T) OrderActionEnum.SUCC;\n        }\n        throw new IllegalStateException();\n    }\n\n    @Override\n    public int getFastMatchToken() {\n        return JSONToken.LITERAL_INT;\n    }\n\n}\n```\n\n2)注册并使用ObjectDeserializer\n\n```java\nParserConfig.getGlobalInstance().putDeserializer(OrderActionEnum.class, new OrderActionEnumDeser());\n\n{\n    Msg msg = JSON.parseObject(\"{\\\"actionEnum\\\":1,\\\"body\\\":\\\"A\\\"}\", Msg.class);\n    Assert.assertEquals(msg.body, \"A\");\n    Assert.assertEquals(msg.actionEnum, OrderActionEnum.FAIL);\n}\n{\n    Msg msg = JSON.parseObject(\"{\\\"actionEnum\\\":0,\\\"body\\\":\\\"B\\\"}\", Msg.class);\n    Assert.assertEquals(msg.body, \"B\");\n    Assert.assertEquals(msg.actionEnum, OrderActionEnum.SUCC);\n}\n```\n\n### 8.8 自定义序列化之过滤器\n- 全局的过滤器：JSON.toJSONString方法的参数中可以配置处理所有类型的SerializeFilter\n- 类级别过滤器：[Class_Level_SerializeFilter](https://github.com/alibaba/fastjson/wiki/Class_Level_SerializeFilter)\n- 属性过滤器：[使用PropertyPreFilter过滤属性](https://github.com/alibaba/fastjson/wiki/%E4%BD%BF%E7%94%A8SimplePropertyPreFilter%E8%BF%87%E6%BB%A4%E5%B1%9E%E6%80%A7)\n- 多余字段处理器：[ExtraProcessor 用于处理多余的字段、\nExtraTypeProvider用于处理多余字段时提供类型信息](https://github.com/alibaba/fastjson/wiki/ParseProcess)\n- 定制反序列化：[在fastjson-1.2.9版本后提供了ExtraProcessable接口，用于定制对象的反序列化功能](https://github.com/alibaba/fastjson/wiki/ExtraProcessable)，可用于添加没有的字段\n- 标签过滤：[JSONField(label)，相当于分组](https://github.com/alibaba/fastjson/wiki/LabelFilter)\n- 自动识别嵌套对象子类型：[FieldTypeResolver](https://github.com/alibaba/fastjson/wiki/FieldTypeResolver)\n\n### 8.9 与Spring MVC的配合使用\n\nFastJson 提供了Spring MVC HttpMessageConverter的实现，将POJO输出为JSONP，支持跨域数据访问。\n\nFastJsonpHttpMessageConverter4 for Spring MVC 4.2+：\n\n```xml\n<mvc:annotation-driven>\n    <mvc:message-converters>\n        <bean\n            class=\"com.alibaba.fastjson.support.spring.FastJsonpHttpMessageConverter4\">\n            <property name=\"supportedMediaTypes\">\n                <list>\n                    <value>application/json;charset=UTF-8</value>\n                </list>\n            </property>\n        </bean>\n    </mvc:message-converters>\n</mvc:annotation-driven>\n\n<mvc:default-servlet-handler />\n\n<bean id=\"fastJsonpResponseBodyAdvice\" class=\"com.alibaba.fastjson.support.spring.FastJsonpResponseBodyAdvice\">\n    <constructor-arg>\n        <list>\n            <value>callback</value>\n            <value>jsonp</value>\n        </list>\n    </constructor-arg>\n</bean>\n```\n\n[详细配置参见此处](https://github.com/alibaba/fastjson/wiki/FastJsonpHttpMessageConverter4_CN)\n\n### 8.10 与Spring Boot的集成使用\n\n参见此处：[spring-boot-starter-fastjson](https://github.com/storezhang/utils/tree/master/spring-boot-starter-fastjson)\n\n\n### 8.11 泛型处理\n[在fastjson中提供了一个用于处理泛型反序列化的类TypeReference](https://github.com/alibaba/fastjson/wiki/Typ)eReference\n\n### 8.12jaxrs支持\nFastJson 提供了JAX-RS Provider的实现 [FastJsonProvider](https://github.com/alibaba/fastjson/wiki/FastJsonProvider_CN)\n\n可用于在构建Restful服务时使用FastJson进行数据的Serialize and Deserialize\n\n### 8.13 swagger支持\n\n[增加对swagger的支持](https://github.com/alibaba/fastjson/pull/716)\n\n\n更多功能 todo list\n\n## 9.Fastjson的设计说明\ntodo list\n\n","slug":"json-best-practice","published":1,"updated":"2017-06-15T07:15:32.000Z","_id":"cj3wtirgl0007f4bchzbxyqcm","comments":1,"layout":"post","photos":[],"link":"","content":"<p>JSON是一种文本方式展示结构化数据的方式，从产生的时候开始就由于其简单好用、跨平台，特别适合HTTP下数据的传输（例如现在很流行的REST）而被广泛使用。</p>\n<h2 id=\"1_u3001JSON_u662F_u4EC0_u4E48\"><a href=\"#1_u3001JSON_u662F_u4EC0_u4E48\" class=\"headerlink\" title=\"1、JSON是什么\"></a>1、JSON是什么</h2><p>JSON起源于1999年的<a href=\"http://javascript.crockford.com/\" target=\"_blank\" rel=\"external\">JS语言规范ECMA262的一个子集</a>（即15.12章节描述了格式与解析），后来2003年作为一个数据格式<a href=\"http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf\" target=\"_blank\" rel=\"external\">ECMA404</a>（很囧的序号有不有？）发布。<br>2006年，作为<a href=\"http://www.ietf.org/rfc/rfc4627.txt\" target=\"_blank\" rel=\"external\">rfc4627</a>发布，这时规范增加到18页，去掉没用的部分，十页不到。</p>\n<p>JSON的应用很广泛，这里有超过100种语言下的JSON库：<a href=\"http://www.json.org/\" target=\"_blank\" rel=\"external\">json.org</a>。</p>\n<p>更多的可以参考这里，<a href=\"https://github.com/burningtree/awesome-json\" target=\"_blank\" rel=\"external\">关于json的一切</a>。</p>\n<h2 id=\"2_u3001_u4F18_u7F3A_u70B9_u3001_u6807_u51C6_u4E0Eschema\"><a href=\"#2_u3001_u4F18_u7F3A_u70B9_u3001_u6807_u51C6_u4E0Eschema\" class=\"headerlink\" title=\"2、优缺点、标准与schema\"></a>2、优缺点、标准与schema</h2><h3 id=\"2-1__u7ED3_u6784_u4E0E_u7C7B_u578B\"><a href=\"#2-1__u7ED3_u6784_u4E0E_u7C7B_u578B\" class=\"headerlink\" title=\"2.1 结构与类型\"></a>2.1 结构与类型</h3><p>这估计是最简单标准规范之一：</p>\n<ul>\n<li>只有两种结构：对象内的键值对集合结构和数组，对象用{}表示、内部是”key”:”value”，数组用[]表示，不同值用逗号分开</li>\n<li>基本数值有7个： false / null / true / object / array / number / string</li>\n<li>再加上结构可以嵌套，进而可以用来表达复杂的数据</li>\n</ul>\n<p>一个简单实例：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\">&#123;</div><div class=\"line\">   <span class=\"string\">\"Image\"</span>: &#123;</div><div class=\"line\">       <span class=\"string\">\"Width\"</span>:  <span class=\"number\">800</span>,</div><div class=\"line\">       <span class=\"string\">\"Height\"</span>: <span class=\"number\">600</span>,</div><div class=\"line\">       <span class=\"string\">\"Title\"</span>:  <span class=\"string\">\"View from 15th Floor\"</span>,</div><div class=\"line\">       <span class=\"string\">\"Thumbnail\"</span>: &#123;</div><div class=\"line\">           <span class=\"string\">\"Url\"</span>:    <span class=\"string\">\"http://www.example.com/image/481989943\"</span>,</div><div class=\"line\">           <span class=\"string\">\"Height\"</span>: <span class=\"number\">125</span>,</div><div class=\"line\">           <span class=\"string\">\"Width\"</span>:  <span class=\"string\">\"100\"</span></div><div class=\"line\">       &#125;,</div><div class=\"line\">       <span class=\"string\">\"IDs\"</span>: [<span class=\"number\">116</span>, <span class=\"number\">943</span>, <span class=\"number\">234</span>, <span class=\"number\">38793</span>]</div><div class=\"line\">     &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h3 id=\"2-2__u4F18_u70B9\"><a href=\"#2-2__u4F18_u70B9\" class=\"headerlink\" title=\"2.2 优点\"></a>2.2 优点</h3><ul>\n<li>基于纯文本，所以对于人类阅读是很友好的。</li>\n<li>规范简单，所以容易处理，开箱即用，特别是JS类的ECMA脚本里是内建支持的，可以直接作为对象使用。</li>\n<li>平台无关性，因为类型和结构都是平台无关的，而且好处理，容易实现不同语言的处理类库，可以作为多个不同异构系统之间的数据传输格式协议，特别是在HTTP/REST下的数据格式。</li>\n</ul>\n<h3 id=\"2-3__u7F3A_u70B9\"><a href=\"#2-3__u7F3A_u70B9\" class=\"headerlink\" title=\"2.3 缺点\"></a>2.3 缺点</h3><p>缺点也很明显：</p>\n<ul>\n<li>性能一般，文本表示的数据一般来说比二进制大得多，在数据传输上和解析处理上都要更影响性能。</li>\n<li>缺乏schema，跟同是文本数据格式的XML比，在类型的严格性和丰富性上要差很多。XML可以借由XSD或DTD来定义复杂的格式，并由此来验证XML文档是否符合格式要求，甚至进一步的，可以基于XSD来生成具体语言的操作代码，例如apache xmlbeans。并且这些工具组合到一起，形成一套庞大的生态，例如基于XML可以实现SOAP和WSDL，一系列的ws-*规范。但是我们也可以看到JSON在缺乏规范的情况下，实际上有更大一些的灵活性，特别是近年来REST的快速发展，已经有一些schema相关的发展(例如<a href=\"https://spacetelescope.github.io/understanding-json-schema/index.html\" target=\"_blank\" rel=\"external\">理解JSON Schema</a>，<a href=\"http://usingjsonschema.com/downloads/\" target=\"_blank\" rel=\"external\">使用JSON Schema</a>， <a href=\"http://azimi.me/json-schema-view/demo/demo.html\" target=\"_blank\" rel=\"external\">在线schema测试</a>)，也有类似于WSDL的<a href=\"https://www.w3.org/Submission/wadl/\" target=\"_blank\" rel=\"external\">WADL</a>出现。</li>\n</ul>\n<a id=\"more\"></a>\n<h2 id=\"3-__u5E38_u7528_u6280_u672F_u4E0E_u5DE5_u5177\"><a href=\"#3-__u5E38_u7528_u6280_u672F_u4E0E_u5DE5_u5177\" class=\"headerlink\" title=\"3. 常用技术与工具\"></a>3. 常用技术与工具</h2><h3 id=\"3-1__u76F8_u5173_u6280_u672F_u4EE5_u53CA_u4E0EXML_u7684_u5173_u7CFB\"><a href=\"#3-1__u76F8_u5173_u6280_u672F_u4EE5_u53CA_u4E0EXML_u7684_u5173_u7CFB\" class=\"headerlink\" title=\"3.1 相关技术以及与XML的关系\"></a>3.1 相关技术以及与XML的关系</h3><ul>\n<li>使用JSON实现RPC（类似XML-RPC）：<a href=\"http://www.jsonrpc.org/\" target=\"_blank\" rel=\"external\">JSON-RPC</a></li>\n<li>使用JSON实现path查询操作（类似XML-PATH）：<a href=\"https://github.com/json-path/JsonPath\" target=\"_blank\" rel=\"external\">JsonPATH</a></li>\n<li>在线查询工具：<a href=\"http://jsonpath.com/\" target=\"_blank\" rel=\"external\">JsonPATH</a></li>\n</ul>\n<p>例如上面的示例json，用表达式$.Image.IDs[:1]查询，得到116：<br><img src=\"https://raw.githubusercontent.com/kimmking/kk/master/images/json/jsonpath.png\" alt=\"image\"></p>\n<p>我们看到JSON与XML是如此之像，实际上这两个格式可以看做一个是学院排，一个是平民派。一个对象从POJO转换成XML与JSON的过程，基本是一致的（绝大部分工作可以复用，以后有机会再详细聊这个过程），10年前我自己也做过一个基于XML的RPC（<a href=\"http://code.google.com/p/rpcfx/\" target=\"_blank\" rel=\"external\">http://code.google.com/p/rpcfx/</a>，貌似已经被墙），里面实现了java和dotnet、JS的XML序列化与反序列化，同时作为一个副产品，实现了JSON序列化。</p>\n<p>后来thoughtsworks公司出品的XStream就是同时做了XML与JSON的序列化。而创建Jackson库的组织本来叫fasterxml，就是处理xml的。当然从这个角度来看，Fastjson库，稍微改改也是一个高性能的XML序列化库。<br>只是XML有着更严格的结构，更丰富的工具生态，拿查询与操作来说，XML还有XQuery、XLST等工具。处理方式上也有DOM方式与SAX流模式，这两个绝然不同的技术。</p>\n<p>单从性能来考虑，XML更是有<a href=\"http://vtd-xml.sourceforge.net/\" target=\"_blank\" rel=\"external\">VTD-XML</a>这种解决了DOM消耗太大内存与SAX只能单向每个节点读一次不能随机读的缺点的高性能处理方式。</p>\n<h3 id=\"3-2_Java_u7C7B_u5E93\"><a href=\"#3-2_Java_u7C7B_u5E93\" class=\"headerlink\" title=\"3.2 Java类库\"></a>3.2 Java类库</h3><ul>\n<li><a href=\"https://github.com/alibaba/fastjson\" target=\"_blank\" rel=\"external\">Fastjson</a></li>\n<li><a href=\"http://wiki.fasterxml.com/JacksonHome\" target=\"_blank\" rel=\"external\">Jackson</a></li>\n<li><a href=\"https://github.com/google/gson\" target=\"_blank\" rel=\"external\">Gson</a></li>\n<li><a href=\"http://x-stream.github.io/\" target=\"_blank\" rel=\"external\">Xstream</a></li>\n</ul>\n<h3 id=\"3-3__u5DE5_u5177\"><a href=\"#3-3__u5DE5_u5177\" class=\"headerlink\" title=\"3.3 工具\"></a>3.3 工具</h3><ul>\n<li>格式化工具：<a href=\"http://jsbeautifier.org/\" target=\"_blank\" rel=\"external\">jsbeautifier</a></li>\n<li>chrome插件：<a href=\"http://www.cnplugins.com/zhuanti/five-chrome-json-plugins.html\" target=\"_blank\" rel=\"external\">5个Json View插件</a></li>\n<li>在线Mock: <a href=\"https://www.easy-mock.com/\" target=\"_blank\" rel=\"external\">在线mock</a></li>\n<li>其他Mock：<a href=\"https://www.soapui.org/rest-testing-mocking/rest-service-mocking.html\" target=\"_blank\" rel=\"external\">SoapUI</a>可以支持，SwaggerUI也可以，<a href=\"https://github.com/andrzejchm/RESTMock\" target=\"_blank\" rel=\"external\">RestMock</a>也可以。</li>\n</ul>\n<p><img src=\"https://github.com/kimmking/kk/blob/master/images/json/json01.png?raw=true\" alt=\"image\"><br><img src=\"https://github.com/kimmking/kk/blob/master/images/json/json02.png?raw=true\" alt=\"image\"></p>\n<h2 id=\"4-_JSON_u7F16_u7801_u6307_u5357\"><a href=\"#4-_JSON_u7F16_u7801_u6307_u5357\" class=\"headerlink\" title=\"4. JSON编码指南\"></a>4. JSON编码指南</h2><h3 id=\"4-1_Google_JSON_u98CE_u683C_u6307_u5357\"><a href=\"#4-1_Google_JSON_u98CE_u683C_u6307_u5357\" class=\"headerlink\" title=\"4.1 Google JSON风格指南\"></a>4.1 Google JSON风格指南</h3><p>遵循好的设计与编码风格，能提前解决80%的问题:</p>\n<ul>\n<li>英文版<a href=\"https://google.github.io/styleguide/jsoncstyleguide.xml\" target=\"_blank\" rel=\"external\">Google JSON Style Guide</a>：<a href=\"https://google.github.io/styleguide/jsoncstyleguide.xml\" target=\"_blank\" rel=\"external\">https://google.github.io/styleguide/jsoncstyleguide.xml</a></li>\n<li>中文版<a href=\"https://github.com/darcyliu/google-styleguide/blob/master/JSONStyleGuide.md\" target=\"_blank\" rel=\"external\">Google JSON风格指南</a>：<a href=\"https://github.com/darcyliu/google-styleguide/blob/master/JSONStyleGuide.md\" target=\"_blank\" rel=\"external\">https://github.com/darcyliu/google-styleguide/blob/master/JSONStyleGuide.md</a></li>\n</ul>\n<p>简单摘录如下：</p>\n<ul>\n<li>属性名和值都是用双引号，不要把注释写到对象里面，对象数据要简洁</li>\n<li>不要随意结构化分组对象，推荐是用扁平化方式，层次不要太复杂</li>\n<li>命名方式要有意义，比如单复数表示</li>\n<li>驼峰式命名，遵循Bean规范</li>\n<li>使用版本来控制变更冲突</li>\n<li>对于一些关键字，不要拿来做key</li>\n<li>如果一个属性是可选的或者包含空值或null值，考虑从JSON中去掉该属性，除非它的存在有很强的语义原因</li>\n<li>序列化枚举类型时，使用name而不是value</li>\n<li>日期要用标准格式处理</li>\n<li>设计好通用的分页参数</li>\n<li>设计好异常处理</li>\n</ul>\n<h3 id=\"4-2__u4F7F_u7528JSON_u5B9E_u73B0API\"><a href=\"#4-2__u4F7F_u7528JSON_u5B9E_u73B0API\" class=\"headerlink\" title=\"4.2 使用JSON实现API\"></a>4.2 使用JSON实现API</h3><p><a href=\"http://jsonapi.org.cn/format/\" target=\"_blank\" rel=\"external\">JSON API</a>与Google JSON风格指南有很多可以相互参照之处。</p>\n<p><a href=\"http://jsonapi.org.cn/format/\" target=\"_blank\" rel=\"external\">JSON API</a>是数据交互规范，用以定义客户端如何获取与修改资源，以及服务器如何响应对应请求。</p>\n<p>JSON API设计用来最小化请求的数量，以及客户端与服务器间传输的数据量。在高效实现的同时，无需牺牲可读性、灵活性和可发现性。</p>\n<h2 id=\"5-_REST\"><a href=\"#5-_REST\" class=\"headerlink\" title=\"5. REST\"></a>5. REST</h2><p> todo list</p>\n<ul>\n<li>dubbox</li>\n<li>resteasy</li>\n<li>restlet</li>\n<li>jersey</li>\n</ul>\n<p><img src=\"https://github.com/kimmking/kk/blob/master/images/json/rest.jpg?raw=true\" alt=\"image\"></p>\n<h2 id=\"6-_SwaggerUI_u5B9E_u73B0API_u6587_u6863_u7BA1_u7406_u4E0E_u5728_u7EBF_u6D4B_u8BD5\"><a href=\"#6-_SwaggerUI_u5B9E_u73B0API_u6587_u6863_u7BA1_u7406_u4E0E_u5728_u7EBF_u6D4B_u8BD5\" class=\"headerlink\" title=\"6. SwaggerUI实现API文档管理与在线测试\"></a>6. SwaggerUI实现API文档管理与在线测试</h2><p> todo list</p>\n<p><img src=\"https://github.com/kimmking/kk/blob/master/images/json/json03.png?raw=true\" alt=\"image\"></p>\n<h2 id=\"7-_JSON_u4F7F_u7528_u573A_u666F_u5206_u6790\"><a href=\"#7-_JSON_u4F7F_u7528_u573A_u666F_u5206_u6790\" class=\"headerlink\" title=\"7. JSON使用场景分析\"></a>7. JSON使用场景分析</h2><p>JSON的使用，依据不同用途，有几个典型的场景：</p>\n<ol>\n<li>内部后台系统之间的数据传输，此种情况下基于HTTP的JSON格式其实没有优势。</li>\n<li>前后台之间的API调用，典型的是前端作为React/VUE/AngularJS/ExtJS等框架做的，前后端使用JSON交互。</li>\n</ol>\n<ul>\n<li>此时可以使用类似Dubbox之类的框架，或者原始一些SpringMVC的Controller上直接@ResponseBody或@RestController也可以。</li>\n<li>强烈建议在Dubbox之类的rest之上再加一个Nginx转发，这样一些策略的控制，比如同源的控制、简单的缓存策略、安全策略等都可以放到Nginx上来做，也利于多个机器时的负载均衡。</li>\n<li>建议使用swaggerUI来自动实现API文档和在线测试。功能很强大，操作简单，而且可以mock接口，在后台没有做好之前，前台就可以先开发了。</li>\n<li>可以使用RestUnit或SoapUI来实现自动化测试与压力测试。</li>\n</ul>\n<ol>\n<li>提供给第三方的开发接口API<br>基本同上，可以参考Google JSON风格指南与JSON API章节。</li>\n</ol>\n<h2 id=\"8-JSON_u7684_u4E00_u4E9B_u7ECF_u9A8C\"><a href=\"#8-JSON_u7684_u4E00_u4E9B_u7ECF_u9A8C\" class=\"headerlink\" title=\"8.JSON的一些经验\"></a>8.JSON的一些经验</h2><p>最近在协助处理一些Fastjson的bug问题，发现最常见的其实是大家使用的不规范性，这样碰到各种坑的可能性就很大。根据我平时使用的经验，以及总结大家常见的问题，归纳如下：</p>\n<h3 id=\"7-1__u9075_u5FAAJava_Beans_u89C4_u8303_u4E0EJSON_u89C4_u8303\"><a href=\"#7-1__u9075_u5FAAJava_Beans_u89C4_u8303_u4E0EJSON_u89C4_u8303\" class=\"headerlink\" title=\"7.1 遵循Java Beans规范与JSON规范\"></a>7.1 遵循Java Beans规范与JSON规范</h3><p>实践告诉我们：遵循beans规范和JSON规范的方式，能减少大部分的问题，比如正确实现setter、getter，用别名就加annotation。注意基本类型的匹配转换，比如在fastjson的issue见到试图把”{“a”:{}}”中的a转换成List的。</p>\n<h3 id=\"7-2__u4F7F_u7528_u6B63_u5E38_u7684key\"><a href=\"#7-2__u4F7F_u7528_u6B63_u5E38_u7684key\" class=\"headerlink\" title=\"7.2 使用正常的key\"></a>7.2 使用正常的key</h3><p>尽量不要使用数字等字符开头的key，尽量使用符合Java的class或property命名规范的key，这样会减少不必要的冲突。在jsonpath或js里，a.1可能会被解释成a[1]或a[“1”]，这些都会带来不必要的麻烦。</p>\n<h3 id=\"7-3__u5173_u4E8E_u65E5_u671F_u5904_u7406\"><a href=\"#7-3__u5173_u4E8E_u65E5_u671F_u5904_u7406\" class=\"headerlink\" title=\"7.3 关于日期处理\"></a>7.3 关于日期处理</h3><p>这一点前面的Google JSON风格指南里也提到了，尽量使用标准的日期格式。或者序列化和反序列化里都是用同样的datePattern格式。</p>\n<h3 id=\"7-4__u5173_u4E8E_u81EA_u5B9A_u4E49_u5E8F_u5217_u5316_u4E0E_u53CD_u5E8F_u5217_u5316_uFF08_u5305_u62EC_u8FC7_u6EE4_u5668_uFF09\"><a href=\"#7-4__u5173_u4E8E_u81EA_u5B9A_u4E49_u5E8F_u5217_u5316_u4E0E_u53CD_u5E8F_u5217_u5316_uFF08_u5305_u62EC_u8FC7_u6EE4_u5668_uFF09\" class=\"headerlink\" title=\"7.4 关于自定义序列化与反序列化（包括过滤器）\"></a>7.4 关于自定义序列化与反序列化（包括过滤器）</h3><p>对于新手来说，自定义序列化是一切罪恶的根源。</p>\n<p>尽量不要使用自定义序列化，除非万不得已，优先考虑使用注解过滤，别名等方式，甚至是重新建一个VO类来组装实际需要的属性。使用自定义序列化时一切要小心，因为这样会导致两个问题：</p>\n<ul>\n<li>改变了pojo &lt;-&gt; jsonstring 的自然对应关系，从而不利于阅读代码和排查问题，你改变的关系无法简单的从bean和json上看出来了；</li>\n<li>反序列化可能出错，因为对应不上原来的属性了。</li>\n</ul>\n<p>如果只是序列化发出去（响应）的是JSON数据、传过来（请求）的数据格式跟JSON无关或者是标准的，此时自定义序列化就无所谓了，反正是要接收方来处理。</p>\n<h3 id=\"7-5_JSONObject_u7684_u4F7F_u7528\"><a href=\"#7-5_JSONObject_u7684_u4F7F_u7528\" class=\"headerlink\" title=\"7.5 JSONObject的使用\"></a>7.5 JSONObject的使用</h3><p>JSONObject是JSON字符串与pojo对象转换过程中的中间表达类型，实现了Map接口，可以看做是一个模拟JSON对象键值对再加上多层嵌套的数据集合，对象的每一个基本类型属性是map里的一个key-value，一个非基本类型属性是一个嵌套的JSONObject对象（key是属性名称，value是表示这个属性值的对象的JSONObject）。如果以前用过apache beanutils里的DynamicBean之类的，就知道JSONObject也是一种动态描述Bean的实现，相当于是拆解了Bean本身的结构与数据。这时候由于JSONObject里可能会没有记录全部的Bean类型数据，例如泛型的具体子类型之类的元数据，如果JSONObject与正常的POJO混用，出现问题的概率较高。<br>下列方式尽量不要使用：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">TestBean</span></span>&#123;</div><div class=\"line\">    <span class=\"meta\">@Setter</span> <span class=\"meta\">@Getter</span></div><div class=\"line\">    <span class=\"keyword\">private</span> TestBean1 testBean1;</div><div class=\"line\">    </div><div class=\"line\">    <span class=\"meta\">@Setter</span> <span class=\"meta\">@Getter</span></div><div class=\"line\">    <span class=\"keyword\">private</span> JSONObject testBean2; <span class=\"comment\">// 尽量不要在POJO里用JSONObject</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>应该从设计上改为都用POJO比较合适:</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">TestBean</span></span>&#123;</div><div class=\"line\">    <span class=\"meta\">@Setter</span> <span class=\"meta\">@Getter</span></div><div class=\"line\">    <span class=\"keyword\">private</span> TestBean1 testBean1;</div><div class=\"line\">    </div><div class=\"line\">    <span class=\"meta\">@Setter</span> <span class=\"meta\">@Getter</span></div><div class=\"line\">    <span class=\"keyword\">private</span> TestBean2 testBean2;; <span class=\"comment\">// 使用POJO</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>相对的，写一些临时性的测试代码，demo代码，可以直接全部用JSONObject先快速run起来。</p>\n<p>同理，jsonstring中嵌套jsonstring也尽量不要用，例如：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">&#123;</div><div class=\"line\">    <span class=\"string\">\"name\"</span>:<span class=\"string\">\"zhangsan\"</span>,</div><div class=\"line\">    <span class=\"string\">\"score\"</span>:<span class=\"string\">\"&#123;\\\"math\\\":78,\\\"history\\\":82&#125;\"</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>应该改为全部都是JSON风格的结构：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">&#123;</div><div class=\"line\">    <span class=\"string\">\"name\"</span>:<span class=\"string\">\"zhangsan\"</span>,</div><div class=\"line\">    <span class=\"string\">\"score\"</span>:&#123;</div><div class=\"line\">        <span class=\"string\">\"math\"</span>:<span class=\"number\">78</span>,</div><div class=\"line\">        <span class=\"string\">\"history\"</span>:<span class=\"number\">82</span></div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>另外，对于jsonstring转POJO（或POJO转jsonstring），尽量使用直接转的方式，而不是先转成JSONObject过渡的方式。特别是对于Fastjson，由于性能优化的考虑，这两个执行的代码是不一样的，可能导致不一样的结果。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\">String jsonstring = <span class=\"string\">\"&#123;\\\"a\\\":12&#125;\"</span>;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 不推荐这种方式</span></div><div class=\"line\"><span class=\"comment\">// 除非这里需要对jsonObject做一些简单处理</span></div><div class=\"line\">JSONObject jsonObject = JSON.parseObject(jsonstring);</div><div class=\"line\">A a = jsonObject.toJavaObject(A.class);</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 推荐方式</span></div><div class=\"line\">A a = JSON.parseObject(jsonstring, A.class);</div></pre></td></tr></table></figure>\n<h3 id=\"7-6_Hibernate_u76F8_u5173_u95EE_u9898\"><a href=\"#7-6_Hibernate_u76F8_u5173_u95EE_u9898\" class=\"headerlink\" title=\"7.6 Hibernate相关问题\"></a>7.6 Hibernate相关问题</h3><p>懒加载与级联，可能导致出现问题，例如hibernate，建议封装一层VO类型来序列化。使用VO类还有一个好处，就是可以去掉一些没用的属性，减少数据量，同时可以加上额外的属性。</p>\n<h3 id=\"7-7__u6DF1_u5C42_u5D4C_u5957_u4E0E_u6CDB_u578B_u95EE_u9898\"><a href=\"#7-7__u6DF1_u5C42_u5D4C_u5957_u4E0E_u6CDB_u578B_u95EE_u9898\" class=\"headerlink\" title=\"7.7 深层嵌套与泛型问题\"></a>7.7 深层嵌套与泛型问题</h3><p>尽量不要在使用过多的层次嵌套的同时使用泛型（List、Map等），可能导致类型丢失，而且问题比较难查。</p>\n<h3 id=\"7-8__u62BD_u8C61_u7C7B_u578B_u4E0E_u5B50_u7C7B_u578B_u95EE_u9898\"><a href=\"#7-8__u62BD_u8C61_u7C7B_u578B_u4E0E_u5B50_u7C7B_u578B_u95EE_u9898\" class=\"headerlink\" title=\"7.8 抽象类型与子类型问题\"></a>7.8 抽象类型与子类型问题</h3><p>尽量不要在同一个Bean的层次结构里使用多个子类型对象，可能导致类型丢失，而且问题比较难查。当然我们可以通过代码显示的传递各种正确的类型，但是这样做引入了更多的不确定性。良好的做法应该是一开始设计时就避免出现这些问题。</p>\n<h3 id=\"7-9__u907F_u514D_u5FAA_u73AF_u5F15_u7528\"><a href=\"#7-9__u907F_u514D_u5FAA_u73AF_u5F15_u7528\" class=\"headerlink\" title=\"7.9 避免循环引用\"></a>7.9 避免循环引用</h3><p>尽量避免循环引用，这个虽然可以通过序列化特性禁掉，但是如果能避免则避免。</p>\n<h3 id=\"7-10__u6CE8_u610F_u7F16_u7801_u548C_u4E0D_u53EF_u89C1_u5B57_u7B26_uFF08_u7279_u522B_u662F_u4E8C_u8FDB_u5236_u6570_u636E_u6D41_uFF09\"><a href=\"#7-10__u6CE8_u610F_u7F16_u7801_u548C_u4E0D_u53EF_u89C1_u5B57_u7B26_uFF08_u7279_u522B_u662F_u4E8C_u8FDB_u5236_u6570_u636E_u6D41_uFF09\" class=\"headerlink\" title=\"7.10 注意编码和不可见字符（特别是二进制数据流）\"></a>7.10 注意编码和不可见字符（特别是二进制数据流）</h3><p>对于InputStream、OutputStream的处理，有时候会报一些奇怪的错误，not match之类的，这时候也许我们看日志里的json字符串可能很正常，但就是出错。</p>\n<p>这时可能就是编码的问题了，可能是导致字符错乱，也可能是因为UTF-8文件的BOM头，这些潜在的问题可能在二进制数据转文本的时候，因为一些不可见字符无法显示，导致日志看起来只有正常字符而是正确的，问题很难排查。</p>\n<p>处理办法就是按二进制的方式把Stream保存起来，然后按hex方式查看，看看是否有多余字符，或者其他错误。</p>\n<h2 id=\"8-fastjson_u7684_u6700_u4F73_u5B9E_u8DF5\"><a href=\"#8-fastjson_u7684_u6700_u4F73_u5B9E_u8DF5\" class=\"headerlink\" title=\"8.fastjson的最佳实践\"></a>8.fastjson的最佳实践</h2><h3 id=\"8-1_Maven_u4E0B_u5F15_u5165Fastjson\"><a href=\"#8-1_Maven_u4E0B_u5F15_u5165Fastjson\" class=\"headerlink\" title=\"8.1 Maven下引入Fastjson\"></a>8.1 Maven下引入Fastjson</h3><p>pom.xml文件里添加依赖即可：</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>com.alibaba<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>fastjson<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>1.2.32<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></div></pre></td></tr></table></figure>\n<h3 id=\"8-2__u5E8F_u5217_u5316_u4E00_u4E2A_u5BF9_u8C61_u6210JSON_u5B57_u7B26_u4E32\"><a href=\"#8-2__u5E8F_u5217_u5316_u4E00_u4E2A_u5BF9_u8C61_u6210JSON_u5B57_u7B26_u4E32\" class=\"headerlink\" title=\"8.2 序列化一个对象成JSON字符串\"></a>8.2 序列化一个对象成JSON字符串</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">User user = <span class=\"keyword\">new</span> User();</div><div class=\"line\">user.setName(<span class=\"string\">\"校长\"</span>);</div><div class=\"line\">user.setAge(<span class=\"number\">3</span>);</div><div class=\"line\">user.setSalary(<span class=\"keyword\">new</span> BigDecimal(<span class=\"string\">\"123456789.0123\"</span>));</div><div class=\"line\">String jsonString = JSON.toJSONString(user);</div><div class=\"line\">System.out.println(jsonString);</div><div class=\"line\"><span class=\"comment\">// 输出 &#123;\"age\":3,\"name\":\"校长\",\"old\":false,\"salary\":123456789.0123&#125;</span></div></pre></td></tr></table></figure>\n<h3 id=\"8-3__u53CD_u5E8F_u5217_u5316_u4E00_u4E2AJSON_u5B57_u7B26_u4E32_u6210Java_u5BF9_u8C61\"><a href=\"#8-3__u53CD_u5E8F_u5217_u5316_u4E00_u4E2AJSON_u5B57_u7B26_u4E32_u6210Java_u5BF9_u8C61\" class=\"headerlink\" title=\"8.3 反序列化一个JSON字符串成Java对象\"></a>8.3 反序列化一个JSON字符串成Java对象</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"> String jsonString = <span class=\"string\">\"&#123;\\\"age\\\":3,\\\"birthdate\\\":1496738822842,\\\"name\\\":\\\"校长\\\",\\\"old\\\":true,\\\"salary\\\":123456789.0123&#125;\"</span>;</div><div class=\"line\"> User u = JSON.parseObject(jsonString ,User.class);</div><div class=\"line\"> System.out.println(u.getName());</div><div class=\"line\"> <span class=\"comment\">// 输出 校长</span></div><div class=\"line\"></div><div class=\"line\">String jsonStringArray = <span class=\"string\">\"[&#123;\\\"age\\\":3,\\\"birthdate\\\":1496738822842,\\\"name\\\":\\\"校长\\\",\\\"old\\\":true,\\\"salary\\\":123456789.0123&#125;]\"</span>;</div><div class=\"line\">List&lt;User&gt; userList = JSON.parseArray(jsonStringArray, User.class);</div><div class=\"line\">System.out.println(userList.size());</div><div class=\"line\"><span class=\"comment\">// 输出 1</span></div></pre></td></tr></table></figure>\n<h3 id=\"8-4__u65E5_u671F_u683C_u5F0F_u5904_u7406\"><a href=\"#8-4__u65E5_u671F_u683C_u5F0F_u5904_u7406\" class=\"headerlink\" title=\"8.4 日期格式处理\"></a>8.4 日期格式处理</h3><p>Fastjson能识别下面这么多种日期格式的字符串：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">final</span> <span class=\"keyword\">static</span> String            defaultPatttern    = <span class=\"string\">\"yyyy-MM-dd HH:mm:ss\"</span>;</div><div class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">final</span> <span class=\"keyword\">static</span> DateTimeFormatter defaultFormatter   = DateTimeFormatter.ofPattern(defaultPatttern);</div><div class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">final</span> <span class=\"keyword\">static</span> DateTimeFormatter formatter_dt19_tw  = DateTimeFormatter.ofPattern(<span class=\"string\">\"yyyy/MM/dd HH:mm:ss\"</span>);</div><div class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">final</span> <span class=\"keyword\">static</span> DateTimeFormatter formatter_dt19_cn  = DateTimeFormatter.ofPattern(<span class=\"string\">\"yyyy年M月d日 HH:mm:ss\"</span>);</div><div class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">final</span> <span class=\"keyword\">static</span> DateTimeFormatter formatter_dt19_cn_1  = DateTimeFormatter.ofPattern(<span class=\"string\">\"yyyy年M月d日 H时m分s秒\"</span>);</div><div class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">final</span> <span class=\"keyword\">static</span> DateTimeFormatter formatter_dt19_kr  = DateTimeFormatter.ofPattern(<span class=\"string\">\"yyyy년M월d일 HH:mm:ss\"</span>);</div><div class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">final</span> <span class=\"keyword\">static</span> DateTimeFormatter formatter_dt19_us  = DateTimeFormatter.ofPattern(<span class=\"string\">\"MM/dd/yyyy HH:mm:ss\"</span>);</div><div class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">final</span> <span class=\"keyword\">static</span> DateTimeFormatter formatter_dt19_eur = DateTimeFormatter.ofPattern(<span class=\"string\">\"dd/MM/yyyy HH:mm:ss\"</span>);</div><div class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">final</span> <span class=\"keyword\">static</span> DateTimeFormatter formatter_dt19_de  = DateTimeFormatter.ofPattern(<span class=\"string\">\"dd.MM.yyyy HH:mm:ss\"</span>);</div><div class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">final</span> <span class=\"keyword\">static</span> DateTimeFormatter formatter_dt19_in  = DateTimeFormatter.ofPattern(<span class=\"string\">\"dd-MM-yyyy HH:mm:ss\"</span>);</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">final</span> <span class=\"keyword\">static</span> DateTimeFormatter formatter_d8       = DateTimeFormatter.ofPattern(<span class=\"string\">\"yyyyMMdd\"</span>);</div><div class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">final</span> <span class=\"keyword\">static</span> DateTimeFormatter formatter_d10_tw   = DateTimeFormatter.ofPattern(<span class=\"string\">\"yyyy/MM/dd\"</span>);</div><div class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">final</span> <span class=\"keyword\">static</span> DateTimeFormatter formatter_d10_cn   = DateTimeFormatter.ofPattern(<span class=\"string\">\"yyyy年M月d日\"</span>);</div><div class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">final</span> <span class=\"keyword\">static</span> DateTimeFormatter formatter_d10_kr   = DateTimeFormatter.ofPattern(<span class=\"string\">\"yyyy년M월d일\"</span>);</div><div class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">final</span> <span class=\"keyword\">static</span> DateTimeFormatter formatter_d10_us   = DateTimeFormatter.ofPattern(<span class=\"string\">\"MM/dd/yyyy\"</span>);</div><div class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">final</span> <span class=\"keyword\">static</span> DateTimeFormatter formatter_d10_eur  = DateTimeFormatter.ofPattern(<span class=\"string\">\"dd/MM/yyyy\"</span>);</div><div class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">final</span> <span class=\"keyword\">static</span> DateTimeFormatter formatter_d10_de   = DateTimeFormatter.ofPattern(<span class=\"string\">\"dd.MM.yyyy\"</span>);</div><div class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">final</span> <span class=\"keyword\">static</span> DateTimeFormatter formatter_d10_in   = DateTimeFormatter.ofPattern(<span class=\"string\">\"dd-MM-yyyy\"</span>);</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">final</span> <span class=\"keyword\">static</span> DateTimeFormatter ISO_FIXED_FORMAT =</div><div class=\"line\">        DateTimeFormatter.ofPattern(<span class=\"string\">\"yyyy-MM-dd HH:mm:ss\"</span>).withZone(ZoneId.systemDefault());</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">final</span> <span class=\"keyword\">static</span> String formatter_iso8601_pattern     = <span class=\"string\">\"yyyy-MM-dd'T'HH:mm:ss\"</span>;</div><div class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">final</span> <span class=\"keyword\">static</span> DateTimeFormatter formatter_iso8601  = DateTimeFormatter.ofPattern(formatter_iso8601_pattern);</div></pre></td></tr></table></figure>\n<p>默认序列化Date输出使用”yyyy-MM-dd HH:mm:ss”格式，可以用UseISO8601DateFormat特性换成”yyyy-MM-dd’T’HH:mm:ss”格式。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div></pre></td><td class=\"code\"><pre><div class=\"line\">JSON.defaultTimeZone = TimeZone.getTimeZone(<span class=\"string\">\"Asia/Shanghai\"</span>);</div><div class=\"line\">JSON.defaultLocale = Locale.US;</div><div class=\"line\">        </div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Model</span> </span>&#123;</div><div class=\"line\">        <span class=\"meta\">@JSONField</span>(format = <span class=\"string\">\"MMM dd, yyyy h:mm:ss aa\"</span>)</div><div class=\"line\">        <span class=\"keyword\">private</span> java.util.Date date;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">public</span> java.util.<span class=\"function\">Date <span class=\"title\">getDate</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">            <span class=\"keyword\">return</span> date;</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setDate</span><span class=\"params\">(java.util.Date date)</span> </span>&#123;</div><div class=\"line\">            <span class=\"keyword\">this</span>.date = date;</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"meta\">@JSONField</span>(format = <span class=\"string\">\"MMM-dd-yyyy h:mm:ss aa\"</span>)</div><div class=\"line\">        <span class=\"keyword\">public</span> java.sql.Date date2;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h3 id=\"8-5__u5E38_u89C1_u5E8F_u5217_u5316_u7279_u6027_u7684_u4F7F_u7528\"><a href=\"#8-5__u5E38_u89C1_u5E8F_u5217_u5316_u7279_u6027_u7684_u4F7F_u7528\" class=\"headerlink\" title=\"8.5 常见序列化特性的使用\"></a>8.5 常见序列化特性的使用</h3><p>Fastjson的序列化特性定义在枚举类com\\alibaba\\fastjson\\serializer\\SerializerFeature.java中，目前正好有30项。<br>可以通过设置多个特性到FastjsonConfig中全局使用，也可以在某个具体的JSON.writeJSONString时作为参数使用。</p>\n<ol>\n<li>QuoteFieldNames, //key使用引号</li>\n<li>UseSingleQuotes, //使用单引号</li>\n<li>WriteMapNullValue, //输出Map的null值</li>\n<li>WriteEnumUsingToString, //枚举属性输出toString的结果</li>\n<li>WriteEnumUsingName, //枚举数据输出name</li>\n<li>UseISO8601DateFormat, //使用日期格式</li>\n<li>WriteNullListAsEmpty, //List为空则输出[]</li>\n<li>WriteNullStringAsEmpty, //String为空则输出””</li>\n<li>WriteNullNumberAsZero, //Number类型为空则输出0</li>\n<li>WriteNullBooleanAsFalse, //Boolean类型为空则输出false</li>\n<li>SkipTransientField,</li>\n<li>SortField, //排序字段</li>\n<li>WriteTabAsSpecial,</li>\n<li>PrettyFormat, // 格式化JSON缩进</li>\n<li>WriteClassName, // 输出类名</li>\n<li>DisableCircularReferenceDetect, // 禁止循环引用</li>\n<li>WriteSlashAsSpecial, // 对斜杠’/’进行转义</li>\n<li>BrowserCompatible,</li>\n<li>WriteDateUseDateFormat, // 全局修改日期格式,默认为false。JSON.DEFFAULT_DATE_FORMAT = “yyyy-MM-dd”;JSON.toJSONString(obj, SerializerFeature.WriteDateUseDateFormat);</li>\n<li>NotWriteRootClassName,</li>\n<li>DisableCheckSpecialChar,</li>\n<li>BeanToArray,</li>\n<li>WriteNonStringKeyAsString,</li>\n<li>NotWriteDefaultValue,</li>\n<li>BrowserSecure,</li>\n<li>IgnoreNonFieldGetter,</li>\n<li>WriteNonStringValueAsString,</li>\n<li>IgnoreErrorGetter,</li>\n<li>WriteBigDecimalAsPlain,</li>\n<li>MapSortField</li>\n</ol>\n<p>使用示例如下（可以<a href=\"http://blog.csdn.net/u010246789/article/details/52539576\" target=\"_blank\" rel=\"external\">参见此处</a>）：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\">Word word = <span class=\"keyword\">new</span> Word();</div><div class=\"line\">word.setA(<span class=\"string\">\"a\"</span>);</div><div class=\"line\">word.setB(<span class=\"number\">2</span>);</div><div class=\"line\">word.setC(<span class=\"keyword\">true</span>);</div><div class=\"line\">word.setD(<span class=\"string\">\"d\"</span>);</div><div class=\"line\">word.setE(<span class=\"string\">\"\"</span>);</div><div class=\"line\">word.setF(<span class=\"keyword\">null</span>);</div><div class=\"line\">word.setDate(<span class=\"keyword\">new</span> Date());</div><div class=\"line\"></div><div class=\"line\">System.out.println(JSON.toJSONString(word));</div><div class=\"line\">System.out.println(JSON.toJSONString(word, SerializerFeature.PrettyFormat,</div><div class=\"line\">    SerializerFeature.WriteMapNullValue, SerializerFeature.WriteNullStringAsEmpty,</div><div class=\"line\">    SerializerFeature.DisableCircularReferenceDetect,</div><div class=\"line\">    SerializerFeature.WriteNullListAsEmpty));</div></pre></td></tr></table></figure>\n<h3 id=\"8-6_Annotation_u6CE8_u89E3_u7684_u4F7F_u7528\"><a href=\"#8-6_Annotation_u6CE8_u89E3_u7684_u4F7F_u7528\" class=\"headerlink\" title=\"8.6 Annotation注解的使用\"></a>8.6 Annotation注解的使用</h3><p>1) JSONField</p>\n<p>可以配置在属性（setter、getter）和字段（必须是public field）上。<br>详情参见此处：<a href=\"https://github.com/alibaba/fastjson/wiki/JSONField\" target=\"_blank\" rel=\"external\">JSONField用法</a></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">package</span> com.alibaba.fastjson.annotation;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"meta\">@interface</span> JSONField &#123;</div><div class=\"line\">    <span class=\"comment\">// 配置序列化和反序列化的顺序，1.1.42版本之后才支持</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">ordinal</span><span class=\"params\">()</span> <span class=\"keyword\">default</span> 0</span>;</div><div class=\"line\"></div><div class=\"line\">     <span class=\"comment\">// 指定字段的名称</span></div><div class=\"line\">    <span class=\"function\">String <span class=\"title\">name</span><span class=\"params\">()</span> <span class=\"keyword\">default</span> \"\"</span>;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// 指定字段的格式，对日期格式有用</span></div><div class=\"line\">    <span class=\"function\">String <span class=\"title\">format</span><span class=\"params\">()</span> <span class=\"keyword\">default</span> \"\"</span>;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// 是否序列化</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">boolean</span> <span class=\"title\">serialize</span><span class=\"params\">()</span> <span class=\"keyword\">default</span> <span class=\"keyword\">true</span></span>;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// 是否反序列化</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">boolean</span> <span class=\"title\">deserialize</span><span class=\"params\">()</span> <span class=\"keyword\">default</span> <span class=\"keyword\">true</span></span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">@JSONField</span>(name=<span class=\"string\">\"ID\"</span>)</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">getId</span><span class=\"params\">()</span> </span>&#123;<span class=\"keyword\">return</span> id;&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 配置date序列化和反序列使用yyyyMMdd日期格式</span></div><div class=\"line\"><span class=\"meta\">@JSONField</span>(format=<span class=\"string\">\"yyyyMMdd\"</span>)</div><div class=\"line\"><span class=\"keyword\">public</span> Date date1;  </div><div class=\"line\"></div><div class=\"line\"> <span class=\"comment\">// 不序列化</span></div><div class=\"line\"> <span class=\"meta\">@JSONField</span>(serialize=<span class=\"keyword\">false</span>)</div><div class=\"line\"> <span class=\"keyword\">public</span> Date date2;</div><div class=\"line\"></div><div class=\"line\"> <span class=\"comment\">// 不反序列化</span></div><div class=\"line\"> <span class=\"meta\">@JSONField</span>(deserialize=<span class=\"keyword\">false</span>)</div><div class=\"line\"> <span class=\"keyword\">public</span> Date date3;</div><div class=\"line\"></div><div class=\"line\"> <span class=\"comment\">// 按ordinal排序</span></div><div class=\"line\"> <span class=\"meta\">@JSONField</span>(ordinal = <span class=\"number\">2</span>)</div><div class=\"line\"> <span class=\"keyword\">private</span> <span class=\"keyword\">int</span> f1;</div><div class=\"line\"></div><div class=\"line\"> <span class=\"meta\">@JSONField</span>(ordinal = <span class=\"number\">1</span>)</div><div class=\"line\"> <span class=\"keyword\">private</span> <span class=\"keyword\">int</span> f2;</div></pre></td></tr></table></figure>\n<p>2) JSONType</p>\n<ul>\n<li>自定义序列化：<a href=\"https://github.com/alibaba/fastjson/wiki/JSONType_serializer\" target=\"_blank\" rel=\"external\">ObjectSerializer</a></li>\n<li>子类型处理：<a href=\"https://github.com/alibaba/fastjson/wiki/JSONType_seeAlso_cn\" target=\"_blank\" rel=\"external\">SeeAlso</a></li>\n<li>JSONType.alphabetic属性: fastjson缺省时会使用字母序序列化，如果你是希望按照java fields/getters的自然顺序序列化，可以配置JSONType.alphabetic，使用方法如下：</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">@JSONType</span>(alphabetic = <span class=\"keyword\">false</span>)</div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">B</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">int</span> f2;</div><div class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">int</span> f1;</div><div class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">int</span> f0;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h3 id=\"8-7__u81EA_u5B9A_u4E49_u5E8F_u5217_u5316_u4E0E_u53CD_u5E8F_u5217_u5316\"><a href=\"#8-7__u81EA_u5B9A_u4E49_u5E8F_u5217_u5316_u4E0E_u53CD_u5E8F_u5217_u5316\" class=\"headerlink\" title=\"8.7 自定义序列化与反序列化\"></a>8.7 自定义序列化与反序列化</h3><ul>\n<li>自定义序列化</li>\n</ul>\n<p>只需要2步：<a href=\"https://github.com/alibaba/fastjson/wiki/ObjectSerializer_cn\" target=\"_blank\" rel=\"external\">参见此处</a><br>1)实现ObjectSerializer</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">CharacterSerializer</span> <span class=\"keyword\">implements</span> <span class=\"title\">ObjectSerializer</span> </span>&#123;</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">write</span><span class=\"params\">(JSONSerializer serializer, </span></span></div><div class=\"line\">                      Object object, </div><div class=\"line\">                      Object fieldName, </div><div class=\"line\">                      Type fieldType, </div><div class=\"line\">                      <span class=\"keyword\">int</span> features) <span class=\"keyword\">throws</span> IOException &#123;</div><div class=\"line\">        SerializeWriter out = serializer.out;</div><div class=\"line\">    </div><div class=\"line\">        Character value = (Character) object;</div><div class=\"line\">        <span class=\"keyword\">if</span> (value == <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">            out.writeString(<span class=\"string\">\"\"</span>);</div><div class=\"line\">            <span class=\"keyword\">return</span>;</div><div class=\"line\">        &#125;</div><div class=\"line\">    </div><div class=\"line\">        <span class=\"keyword\">char</span> c = value.charValue();</div><div class=\"line\">        <span class=\"keyword\">if</span> (c == <span class=\"number\">0</span>) &#123;</div><div class=\"line\">            out.writeString(<span class=\"string\">\"\\u0000\"</span>);</div><div class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">            out.writeString(value.toString());</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>2)注册ObjectSerializer</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">SerializeConfig.getGlobalInstance().put(Character.class, <span class=\"keyword\">new</span> CharacterSerializer());</div></pre></td></tr></table></figure>\n<ul>\n<li>自定义反序列化</li>\n</ul>\n<p>只需要2步：<a href=\"https://github.com/alibaba/fastjson/wiki/ObjectDeserializer_cn\" target=\"_blank\" rel=\"external\">参见此处</a></p>\n<p>1)自定义实现ObjectDeserializer</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">enum</span> OrderActionEnum &#123;</div><div class=\"line\">                                    FAIL(<span class=\"number\">1</span>), SUCC(<span class=\"number\">0</span>);</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">int</span> code;</div><div class=\"line\"></div><div class=\"line\">    OrderActionEnum(<span class=\"keyword\">int</span> code)&#123;</div><div class=\"line\">        <span class=\"keyword\">this</span>.code = code;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Msg</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">public</span> OrderActionEnum actionEnum;</div><div class=\"line\">    <span class=\"keyword\">public</span> String          body;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">OrderActionEnumDeser</span> <span class=\"keyword\">implements</span> <span class=\"title\">ObjectDeserializer</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"meta\">@SuppressWarnings</span>(<span class=\"string\">\"unchecked\"</span>)</div><div class=\"line\">    <span class=\"meta\">@Override</span></div><div class=\"line\">    <span class=\"keyword\">public</span> &lt;T&gt; <span class=\"function\">T <span class=\"title\">deserialze</span><span class=\"params\">(DefaultJSONParser parser, Type type, Object fieldName)</span> </span>&#123;</div><div class=\"line\">        Integer intValue = parser.parseObject(<span class=\"keyword\">int</span>.class);</div><div class=\"line\">        <span class=\"keyword\">if</span> (intValue == <span class=\"number\">1</span>) &#123;</div><div class=\"line\">            <span class=\"keyword\">return</span> (T) OrderActionEnum.FAIL;</div><div class=\"line\">        &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (intValue == <span class=\"number\">0</span>) &#123;</div><div class=\"line\">            <span class=\"keyword\">return</span> (T) OrderActionEnum.SUCC;</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> IllegalStateException();</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"meta\">@Override</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">getFastMatchToken</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> JSONToken.LITERAL_INT;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>2)注册并使用ObjectDeserializer</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\">ParserConfig.getGlobalInstance().putDeserializer(OrderActionEnum.class, <span class=\"keyword\">new</span> OrderActionEnumDeser());</div><div class=\"line\"></div><div class=\"line\">&#123;</div><div class=\"line\">    Msg msg = JSON.parseObject(<span class=\"string\">\"&#123;\\\"actionEnum\\\":1,\\\"body\\\":\\\"A\\\"&#125;\"</span>, Msg.class);</div><div class=\"line\">    Assert.assertEquals(msg.body, <span class=\"string\">\"A\"</span>);</div><div class=\"line\">    Assert.assertEquals(msg.actionEnum, OrderActionEnum.FAIL);</div><div class=\"line\">&#125;</div><div class=\"line\">&#123;</div><div class=\"line\">    Msg msg = JSON.parseObject(<span class=\"string\">\"&#123;\\\"actionEnum\\\":0,\\\"body\\\":\\\"B\\\"&#125;\"</span>, Msg.class);</div><div class=\"line\">    Assert.assertEquals(msg.body, <span class=\"string\">\"B\"</span>);</div><div class=\"line\">    Assert.assertEquals(msg.actionEnum, OrderActionEnum.SUCC);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h3 id=\"8-8__u81EA_u5B9A_u4E49_u5E8F_u5217_u5316_u4E4B_u8FC7_u6EE4_u5668\"><a href=\"#8-8__u81EA_u5B9A_u4E49_u5E8F_u5217_u5316_u4E4B_u8FC7_u6EE4_u5668\" class=\"headerlink\" title=\"8.8 自定义序列化之过滤器\"></a>8.8 自定义序列化之过滤器</h3><ul>\n<li>全局的过滤器：JSON.toJSONString方法的参数中可以配置处理所有类型的SerializeFilter</li>\n<li>类级别过滤器：<a href=\"https://github.com/alibaba/fastjson/wiki/Class_Level_SerializeFilter\" target=\"_blank\" rel=\"external\">Class_Level_SerializeFilter</a></li>\n<li>属性过滤器：<a href=\"https://github.com/alibaba/fastjson/wiki/%E4%BD%BF%E7%94%A8SimplePropertyPreFilter%E8%BF%87%E6%BB%A4%E5%B1%9E%E6%80%A7\" target=\"_blank\" rel=\"external\">使用PropertyPreFilter过滤属性</a></li>\n<li>多余字段处理器：<a href=\"https://github.com/alibaba/fastjson/wiki/ParseProcess\" target=\"_blank\" rel=\"external\">ExtraProcessor 用于处理多余的字段、<br>ExtraTypeProvider用于处理多余字段时提供类型信息</a></li>\n<li>定制反序列化：<a href=\"https://github.com/alibaba/fastjson/wiki/ExtraProcessable\" target=\"_blank\" rel=\"external\">在fastjson-1.2.9版本后提供了ExtraProcessable接口，用于定制对象的反序列化功能</a>，可用于添加没有的字段</li>\n<li>标签过滤：<a href=\"https://github.com/alibaba/fastjson/wiki/LabelFilter\" target=\"_blank\" rel=\"external\">JSONField(label)，相当于分组</a></li>\n<li>自动识别嵌套对象子类型：<a href=\"https://github.com/alibaba/fastjson/wiki/FieldTypeResolver\" target=\"_blank\" rel=\"external\">FieldTypeResolver</a></li>\n</ul>\n<h3 id=\"8-9__u4E0ESpring_MVC_u7684_u914D_u5408_u4F7F_u7528\"><a href=\"#8-9__u4E0ESpring_MVC_u7684_u914D_u5408_u4F7F_u7528\" class=\"headerlink\" title=\"8.9 与Spring MVC的配合使用\"></a>8.9 与Spring MVC的配合使用</h3><p>FastJson 提供了Spring MVC HttpMessageConverter的实现，将POJO输出为JSONP，支持跨域数据访问。</p>\n<p>FastJsonpHttpMessageConverter4 for Spring MVC 4.2+：</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">mvc:annotation-driven</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">mvc:message-converters</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">bean</span></span></div><div class=\"line\">            <span class=\"attr\">class</span>=<span class=\"string\">\"com.alibaba.fastjson.support.spring.FastJsonpHttpMessageConverter4\"</span>&gt;</div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"supportedMediaTypes\"</span>&gt;</span></div><div class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">list</span>&gt;</span></div><div class=\"line\">                    <span class=\"tag\">&lt;<span class=\"name\">value</span>&gt;</span>application/json;charset=UTF-8<span class=\"tag\">&lt;/<span class=\"name\">value</span>&gt;</span></div><div class=\"line\">                <span class=\"tag\">&lt;/<span class=\"name\">list</span>&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;/<span class=\"name\">property</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">bean</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">mvc:message-converters</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">mvc:annotation-driven</span>&gt;</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">mvc:default-servlet-handler</span> /&gt;</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">bean</span> <span class=\"attr\">id</span>=<span class=\"string\">\"fastJsonpResponseBodyAdvice\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"com.alibaba.fastjson.support.spring.FastJsonpResponseBodyAdvice\"</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">constructor-arg</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">list</span>&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">value</span>&gt;</span>callback<span class=\"tag\">&lt;/<span class=\"name\">value</span>&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">value</span>&gt;</span>jsonp<span class=\"tag\">&lt;/<span class=\"name\">value</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">list</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">constructor-arg</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">bean</span>&gt;</span></div></pre></td></tr></table></figure>\n<p><a href=\"https://github.com/alibaba/fastjson/wiki/FastJsonpHttpMessageConverter4_CN\" target=\"_blank\" rel=\"external\">详细配置参见此处</a></p>\n<h3 id=\"8-10__u4E0ESpring_Boot_u7684_u96C6_u6210_u4F7F_u7528\"><a href=\"#8-10__u4E0ESpring_Boot_u7684_u96C6_u6210_u4F7F_u7528\" class=\"headerlink\" title=\"8.10 与Spring Boot的集成使用\"></a>8.10 与Spring Boot的集成使用</h3><p>参见此处：<a href=\"https://github.com/storezhang/utils/tree/master/spring-boot-starter-fastjson\" target=\"_blank\" rel=\"external\">spring-boot-starter-fastjson</a></p>\n<h3 id=\"8-11__u6CDB_u578B_u5904_u7406\"><a href=\"#8-11__u6CDB_u578B_u5904_u7406\" class=\"headerlink\" title=\"8.11 泛型处理\"></a>8.11 泛型处理</h3><p><a href=\"https://github.com/alibaba/fastjson/wiki/Typ\" target=\"_blank\" rel=\"external\">在fastjson中提供了一个用于处理泛型反序列化的类TypeReference</a>eReference</p>\n<h3 id=\"8-12jaxrs_u652F_u6301\"><a href=\"#8-12jaxrs_u652F_u6301\" class=\"headerlink\" title=\"8.12jaxrs支持\"></a>8.12jaxrs支持</h3><p>FastJson 提供了JAX-RS Provider的实现 <a href=\"https://github.com/alibaba/fastjson/wiki/FastJsonProvider_CN\" target=\"_blank\" rel=\"external\">FastJsonProvider</a></p>\n<p>可用于在构建Restful服务时使用FastJson进行数据的Serialize and Deserialize</p>\n<h3 id=\"8-13_swagger_u652F_u6301\"><a href=\"#8-13_swagger_u652F_u6301\" class=\"headerlink\" title=\"8.13 swagger支持\"></a>8.13 swagger支持</h3><p><a href=\"https://github.com/alibaba/fastjson/pull/716\" target=\"_blank\" rel=\"external\">增加对swagger的支持</a></p>\n<p>更多功能 todo list</p>\n<h2 id=\"9-Fastjson_u7684_u8BBE_u8BA1_u8BF4_u660E\"><a href=\"#9-Fastjson_u7684_u8BBE_u8BA1_u8BF4_u660E\" class=\"headerlink\" title=\"9.Fastjson的设计说明\"></a>9.Fastjson的设计说明</h2><p>todo list</p>\n","site":{"data":{}},"excerpt":"<p>JSON是一种文本方式展示结构化数据的方式，从产生的时候开始就由于其简单好用、跨平台，特别适合HTTP下数据的传输（例如现在很流行的REST）而被广泛使用。</p>\n<h2 id=\"1_u3001JSON_u662F_u4EC0_u4E48\"><a href=\"#1_u3001JSON_u662F_u4EC0_u4E48\" class=\"headerlink\" title=\"1、JSON是什么\"></a>1、JSON是什么</h2><p>JSON起源于1999年的<a href=\"http://javascript.crockford.com/\" target=\"_blank\" rel=\"external\">JS语言规范ECMA262的一个子集</a>（即15.12章节描述了格式与解析），后来2003年作为一个数据格式<a href=\"http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf\" target=\"_blank\" rel=\"external\">ECMA404</a>（很囧的序号有不有？）发布。<br>2006年，作为<a href=\"http://www.ietf.org/rfc/rfc4627.txt\" target=\"_blank\" rel=\"external\">rfc4627</a>发布，这时规范增加到18页，去掉没用的部分，十页不到。</p>\n<p>JSON的应用很广泛，这里有超过100种语言下的JSON库：<a href=\"http://www.json.org/\" target=\"_blank\" rel=\"external\">json.org</a>。</p>\n<p>更多的可以参考这里，<a href=\"https://github.com/burningtree/awesome-json\" target=\"_blank\" rel=\"external\">关于json的一切</a>。</p>\n<h2 id=\"2_u3001_u4F18_u7F3A_u70B9_u3001_u6807_u51C6_u4E0Eschema\"><a href=\"#2_u3001_u4F18_u7F3A_u70B9_u3001_u6807_u51C6_u4E0Eschema\" class=\"headerlink\" title=\"2、优缺点、标准与schema\"></a>2、优缺点、标准与schema</h2><h3 id=\"2-1__u7ED3_u6784_u4E0E_u7C7B_u578B\"><a href=\"#2-1__u7ED3_u6784_u4E0E_u7C7B_u578B\" class=\"headerlink\" title=\"2.1 结构与类型\"></a>2.1 结构与类型</h3><p>这估计是最简单标准规范之一：</p>\n<ul>\n<li>只有两种结构：对象内的键值对集合结构和数组，对象用{}表示、内部是”key”:”value”，数组用[]表示，不同值用逗号分开</li>\n<li>基本数值有7个： false / null / true / object / array / number / string</li>\n<li>再加上结构可以嵌套，进而可以用来表达复杂的数据</li>\n</ul>\n<p>一个简单实例：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\">&#123;</div><div class=\"line\">   <span class=\"string\">\"Image\"</span>: &#123;</div><div class=\"line\">       <span class=\"string\">\"Width\"</span>:  <span class=\"number\">800</span>,</div><div class=\"line\">       <span class=\"string\">\"Height\"</span>: <span class=\"number\">600</span>,</div><div class=\"line\">       <span class=\"string\">\"Title\"</span>:  <span class=\"string\">\"View from 15th Floor\"</span>,</div><div class=\"line\">       <span class=\"string\">\"Thumbnail\"</span>: &#123;</div><div class=\"line\">           <span class=\"string\">\"Url\"</span>:    <span class=\"string\">\"http://www.example.com/image/481989943\"</span>,</div><div class=\"line\">           <span class=\"string\">\"Height\"</span>: <span class=\"number\">125</span>,</div><div class=\"line\">           <span class=\"string\">\"Width\"</span>:  <span class=\"string\">\"100\"</span></div><div class=\"line\">       &#125;,</div><div class=\"line\">       <span class=\"string\">\"IDs\"</span>: [<span class=\"number\">116</span>, <span class=\"number\">943</span>, <span class=\"number\">234</span>, <span class=\"number\">38793</span>]</div><div class=\"line\">     &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h3 id=\"2-2__u4F18_u70B9\"><a href=\"#2-2__u4F18_u70B9\" class=\"headerlink\" title=\"2.2 优点\"></a>2.2 优点</h3><ul>\n<li>基于纯文本，所以对于人类阅读是很友好的。</li>\n<li>规范简单，所以容易处理，开箱即用，特别是JS类的ECMA脚本里是内建支持的，可以直接作为对象使用。</li>\n<li>平台无关性，因为类型和结构都是平台无关的，而且好处理，容易实现不同语言的处理类库，可以作为多个不同异构系统之间的数据传输格式协议，特别是在HTTP/REST下的数据格式。</li>\n</ul>\n<h3 id=\"2-3__u7F3A_u70B9\"><a href=\"#2-3__u7F3A_u70B9\" class=\"headerlink\" title=\"2.3 缺点\"></a>2.3 缺点</h3><p>缺点也很明显：</p>\n<ul>\n<li>性能一般，文本表示的数据一般来说比二进制大得多，在数据传输上和解析处理上都要更影响性能。</li>\n<li>缺乏schema，跟同是文本数据格式的XML比，在类型的严格性和丰富性上要差很多。XML可以借由XSD或DTD来定义复杂的格式，并由此来验证XML文档是否符合格式要求，甚至进一步的，可以基于XSD来生成具体语言的操作代码，例如apache xmlbeans。并且这些工具组合到一起，形成一套庞大的生态，例如基于XML可以实现SOAP和WSDL，一系列的ws-*规范。但是我们也可以看到JSON在缺乏规范的情况下，实际上有更大一些的灵活性，特别是近年来REST的快速发展，已经有一些schema相关的发展(例如<a href=\"https://spacetelescope.github.io/understanding-json-schema/index.html\" target=\"_blank\" rel=\"external\">理解JSON Schema</a>，<a href=\"http://usingjsonschema.com/downloads/\" target=\"_blank\" rel=\"external\">使用JSON Schema</a>， <a href=\"http://azimi.me/json-schema-view/demo/demo.html\" target=\"_blank\" rel=\"external\">在线schema测试</a>)，也有类似于WSDL的<a href=\"https://www.w3.org/Submission/wadl/\" target=\"_blank\" rel=\"external\">WADL</a>出现。</li>\n</ul>","more":"<h2 id=\"3-__u5E38_u7528_u6280_u672F_u4E0E_u5DE5_u5177\"><a href=\"#3-__u5E38_u7528_u6280_u672F_u4E0E_u5DE5_u5177\" class=\"headerlink\" title=\"3. 常用技术与工具\"></a>3. 常用技术与工具</h2><h3 id=\"3-1__u76F8_u5173_u6280_u672F_u4EE5_u53CA_u4E0EXML_u7684_u5173_u7CFB\"><a href=\"#3-1__u76F8_u5173_u6280_u672F_u4EE5_u53CA_u4E0EXML_u7684_u5173_u7CFB\" class=\"headerlink\" title=\"3.1 相关技术以及与XML的关系\"></a>3.1 相关技术以及与XML的关系</h3><ul>\n<li>使用JSON实现RPC（类似XML-RPC）：<a href=\"http://www.jsonrpc.org/\" target=\"_blank\" rel=\"external\">JSON-RPC</a></li>\n<li>使用JSON实现path查询操作（类似XML-PATH）：<a href=\"https://github.com/json-path/JsonPath\" target=\"_blank\" rel=\"external\">JsonPATH</a></li>\n<li>在线查询工具：<a href=\"http://jsonpath.com/\" target=\"_blank\" rel=\"external\">JsonPATH</a></li>\n</ul>\n<p>例如上面的示例json，用表达式$.Image.IDs[:1]查询，得到116：<br><img src=\"https://raw.githubusercontent.com/kimmking/kk/master/images/json/jsonpath.png\" alt=\"image\"></p>\n<p>我们看到JSON与XML是如此之像，实际上这两个格式可以看做一个是学院排，一个是平民派。一个对象从POJO转换成XML与JSON的过程，基本是一致的（绝大部分工作可以复用，以后有机会再详细聊这个过程），10年前我自己也做过一个基于XML的RPC（<a href=\"http://code.google.com/p/rpcfx/\" target=\"_blank\" rel=\"external\">http://code.google.com/p/rpcfx/</a>，貌似已经被墙），里面实现了java和dotnet、JS的XML序列化与反序列化，同时作为一个副产品，实现了JSON序列化。</p>\n<p>后来thoughtsworks公司出品的XStream就是同时做了XML与JSON的序列化。而创建Jackson库的组织本来叫fasterxml，就是处理xml的。当然从这个角度来看，Fastjson库，稍微改改也是一个高性能的XML序列化库。<br>只是XML有着更严格的结构，更丰富的工具生态，拿查询与操作来说，XML还有XQuery、XLST等工具。处理方式上也有DOM方式与SAX流模式，这两个绝然不同的技术。</p>\n<p>单从性能来考虑，XML更是有<a href=\"http://vtd-xml.sourceforge.net/\" target=\"_blank\" rel=\"external\">VTD-XML</a>这种解决了DOM消耗太大内存与SAX只能单向每个节点读一次不能随机读的缺点的高性能处理方式。</p>\n<h3 id=\"3-2_Java_u7C7B_u5E93\"><a href=\"#3-2_Java_u7C7B_u5E93\" class=\"headerlink\" title=\"3.2 Java类库\"></a>3.2 Java类库</h3><ul>\n<li><a href=\"https://github.com/alibaba/fastjson\" target=\"_blank\" rel=\"external\">Fastjson</a></li>\n<li><a href=\"http://wiki.fasterxml.com/JacksonHome\" target=\"_blank\" rel=\"external\">Jackson</a></li>\n<li><a href=\"https://github.com/google/gson\" target=\"_blank\" rel=\"external\">Gson</a></li>\n<li><a href=\"http://x-stream.github.io/\" target=\"_blank\" rel=\"external\">Xstream</a></li>\n</ul>\n<h3 id=\"3-3__u5DE5_u5177\"><a href=\"#3-3__u5DE5_u5177\" class=\"headerlink\" title=\"3.3 工具\"></a>3.3 工具</h3><ul>\n<li>格式化工具：<a href=\"http://jsbeautifier.org/\" target=\"_blank\" rel=\"external\">jsbeautifier</a></li>\n<li>chrome插件：<a href=\"http://www.cnplugins.com/zhuanti/five-chrome-json-plugins.html\" target=\"_blank\" rel=\"external\">5个Json View插件</a></li>\n<li>在线Mock: <a href=\"https://www.easy-mock.com/\" target=\"_blank\" rel=\"external\">在线mock</a></li>\n<li>其他Mock：<a href=\"https://www.soapui.org/rest-testing-mocking/rest-service-mocking.html\" target=\"_blank\" rel=\"external\">SoapUI</a>可以支持，SwaggerUI也可以，<a href=\"https://github.com/andrzejchm/RESTMock\" target=\"_blank\" rel=\"external\">RestMock</a>也可以。</li>\n</ul>\n<p><img src=\"https://github.com/kimmking/kk/blob/master/images/json/json01.png?raw=true\" alt=\"image\"><br><img src=\"https://github.com/kimmking/kk/blob/master/images/json/json02.png?raw=true\" alt=\"image\"></p>\n<h2 id=\"4-_JSON_u7F16_u7801_u6307_u5357\"><a href=\"#4-_JSON_u7F16_u7801_u6307_u5357\" class=\"headerlink\" title=\"4. JSON编码指南\"></a>4. JSON编码指南</h2><h3 id=\"4-1_Google_JSON_u98CE_u683C_u6307_u5357\"><a href=\"#4-1_Google_JSON_u98CE_u683C_u6307_u5357\" class=\"headerlink\" title=\"4.1 Google JSON风格指南\"></a>4.1 Google JSON风格指南</h3><p>遵循好的设计与编码风格，能提前解决80%的问题:</p>\n<ul>\n<li>英文版<a href=\"https://google.github.io/styleguide/jsoncstyleguide.xml\" target=\"_blank\" rel=\"external\">Google JSON Style Guide</a>：<a href=\"https://google.github.io/styleguide/jsoncstyleguide.xml\" target=\"_blank\" rel=\"external\">https://google.github.io/styleguide/jsoncstyleguide.xml</a></li>\n<li>中文版<a href=\"https://github.com/darcyliu/google-styleguide/blob/master/JSONStyleGuide.md\" target=\"_blank\" rel=\"external\">Google JSON风格指南</a>：<a href=\"https://github.com/darcyliu/google-styleguide/blob/master/JSONStyleGuide.md\" target=\"_blank\" rel=\"external\">https://github.com/darcyliu/google-styleguide/blob/master/JSONStyleGuide.md</a></li>\n</ul>\n<p>简单摘录如下：</p>\n<ul>\n<li>属性名和值都是用双引号，不要把注释写到对象里面，对象数据要简洁</li>\n<li>不要随意结构化分组对象，推荐是用扁平化方式，层次不要太复杂</li>\n<li>命名方式要有意义，比如单复数表示</li>\n<li>驼峰式命名，遵循Bean规范</li>\n<li>使用版本来控制变更冲突</li>\n<li>对于一些关键字，不要拿来做key</li>\n<li>如果一个属性是可选的或者包含空值或null值，考虑从JSON中去掉该属性，除非它的存在有很强的语义原因</li>\n<li>序列化枚举类型时，使用name而不是value</li>\n<li>日期要用标准格式处理</li>\n<li>设计好通用的分页参数</li>\n<li>设计好异常处理</li>\n</ul>\n<h3 id=\"4-2__u4F7F_u7528JSON_u5B9E_u73B0API\"><a href=\"#4-2__u4F7F_u7528JSON_u5B9E_u73B0API\" class=\"headerlink\" title=\"4.2 使用JSON实现API\"></a>4.2 使用JSON实现API</h3><p><a href=\"http://jsonapi.org.cn/format/\" target=\"_blank\" rel=\"external\">JSON API</a>与Google JSON风格指南有很多可以相互参照之处。</p>\n<p><a href=\"http://jsonapi.org.cn/format/\" target=\"_blank\" rel=\"external\">JSON API</a>是数据交互规范，用以定义客户端如何获取与修改资源，以及服务器如何响应对应请求。</p>\n<p>JSON API设计用来最小化请求的数量，以及客户端与服务器间传输的数据量。在高效实现的同时，无需牺牲可读性、灵活性和可发现性。</p>\n<h2 id=\"5-_REST\"><a href=\"#5-_REST\" class=\"headerlink\" title=\"5. REST\"></a>5. REST</h2><p> todo list</p>\n<ul>\n<li>dubbox</li>\n<li>resteasy</li>\n<li>restlet</li>\n<li>jersey</li>\n</ul>\n<p><img src=\"https://github.com/kimmking/kk/blob/master/images/json/rest.jpg?raw=true\" alt=\"image\"></p>\n<h2 id=\"6-_SwaggerUI_u5B9E_u73B0API_u6587_u6863_u7BA1_u7406_u4E0E_u5728_u7EBF_u6D4B_u8BD5\"><a href=\"#6-_SwaggerUI_u5B9E_u73B0API_u6587_u6863_u7BA1_u7406_u4E0E_u5728_u7EBF_u6D4B_u8BD5\" class=\"headerlink\" title=\"6. SwaggerUI实现API文档管理与在线测试\"></a>6. SwaggerUI实现API文档管理与在线测试</h2><p> todo list</p>\n<p><img src=\"https://github.com/kimmking/kk/blob/master/images/json/json03.png?raw=true\" alt=\"image\"></p>\n<h2 id=\"7-_JSON_u4F7F_u7528_u573A_u666F_u5206_u6790\"><a href=\"#7-_JSON_u4F7F_u7528_u573A_u666F_u5206_u6790\" class=\"headerlink\" title=\"7. JSON使用场景分析\"></a>7. JSON使用场景分析</h2><p>JSON的使用，依据不同用途，有几个典型的场景：</p>\n<ol>\n<li>内部后台系统之间的数据传输，此种情况下基于HTTP的JSON格式其实没有优势。</li>\n<li>前后台之间的API调用，典型的是前端作为React/VUE/AngularJS/ExtJS等框架做的，前后端使用JSON交互。</li>\n</ol>\n<ul>\n<li>此时可以使用类似Dubbox之类的框架，或者原始一些SpringMVC的Controller上直接@ResponseBody或@RestController也可以。</li>\n<li>强烈建议在Dubbox之类的rest之上再加一个Nginx转发，这样一些策略的控制，比如同源的控制、简单的缓存策略、安全策略等都可以放到Nginx上来做，也利于多个机器时的负载均衡。</li>\n<li>建议使用swaggerUI来自动实现API文档和在线测试。功能很强大，操作简单，而且可以mock接口，在后台没有做好之前，前台就可以先开发了。</li>\n<li>可以使用RestUnit或SoapUI来实现自动化测试与压力测试。</li>\n</ul>\n<ol>\n<li>提供给第三方的开发接口API<br>基本同上，可以参考Google JSON风格指南与JSON API章节。</li>\n</ol>\n<h2 id=\"8-JSON_u7684_u4E00_u4E9B_u7ECF_u9A8C\"><a href=\"#8-JSON_u7684_u4E00_u4E9B_u7ECF_u9A8C\" class=\"headerlink\" title=\"8.JSON的一些经验\"></a>8.JSON的一些经验</h2><p>最近在协助处理一些Fastjson的bug问题，发现最常见的其实是大家使用的不规范性，这样碰到各种坑的可能性就很大。根据我平时使用的经验，以及总结大家常见的问题，归纳如下：</p>\n<h3 id=\"7-1__u9075_u5FAAJava_Beans_u89C4_u8303_u4E0EJSON_u89C4_u8303\"><a href=\"#7-1__u9075_u5FAAJava_Beans_u89C4_u8303_u4E0EJSON_u89C4_u8303\" class=\"headerlink\" title=\"7.1 遵循Java Beans规范与JSON规范\"></a>7.1 遵循Java Beans规范与JSON规范</h3><p>实践告诉我们：遵循beans规范和JSON规范的方式，能减少大部分的问题，比如正确实现setter、getter，用别名就加annotation。注意基本类型的匹配转换，比如在fastjson的issue见到试图把”{“a”:{}}”中的a转换成List的。</p>\n<h3 id=\"7-2__u4F7F_u7528_u6B63_u5E38_u7684key\"><a href=\"#7-2__u4F7F_u7528_u6B63_u5E38_u7684key\" class=\"headerlink\" title=\"7.2 使用正常的key\"></a>7.2 使用正常的key</h3><p>尽量不要使用数字等字符开头的key，尽量使用符合Java的class或property命名规范的key，这样会减少不必要的冲突。在jsonpath或js里，a.1可能会被解释成a[1]或a[“1”]，这些都会带来不必要的麻烦。</p>\n<h3 id=\"7-3__u5173_u4E8E_u65E5_u671F_u5904_u7406\"><a href=\"#7-3__u5173_u4E8E_u65E5_u671F_u5904_u7406\" class=\"headerlink\" title=\"7.3 关于日期处理\"></a>7.3 关于日期处理</h3><p>这一点前面的Google JSON风格指南里也提到了，尽量使用标准的日期格式。或者序列化和反序列化里都是用同样的datePattern格式。</p>\n<h3 id=\"7-4__u5173_u4E8E_u81EA_u5B9A_u4E49_u5E8F_u5217_u5316_u4E0E_u53CD_u5E8F_u5217_u5316_uFF08_u5305_u62EC_u8FC7_u6EE4_u5668_uFF09\"><a href=\"#7-4__u5173_u4E8E_u81EA_u5B9A_u4E49_u5E8F_u5217_u5316_u4E0E_u53CD_u5E8F_u5217_u5316_uFF08_u5305_u62EC_u8FC7_u6EE4_u5668_uFF09\" class=\"headerlink\" title=\"7.4 关于自定义序列化与反序列化（包括过滤器）\"></a>7.4 关于自定义序列化与反序列化（包括过滤器）</h3><p>对于新手来说，自定义序列化是一切罪恶的根源。</p>\n<p>尽量不要使用自定义序列化，除非万不得已，优先考虑使用注解过滤，别名等方式，甚至是重新建一个VO类来组装实际需要的属性。使用自定义序列化时一切要小心，因为这样会导致两个问题：</p>\n<ul>\n<li>改变了pojo &lt;-&gt; jsonstring 的自然对应关系，从而不利于阅读代码和排查问题，你改变的关系无法简单的从bean和json上看出来了；</li>\n<li>反序列化可能出错，因为对应不上原来的属性了。</li>\n</ul>\n<p>如果只是序列化发出去（响应）的是JSON数据、传过来（请求）的数据格式跟JSON无关或者是标准的，此时自定义序列化就无所谓了，反正是要接收方来处理。</p>\n<h3 id=\"7-5_JSONObject_u7684_u4F7F_u7528\"><a href=\"#7-5_JSONObject_u7684_u4F7F_u7528\" class=\"headerlink\" title=\"7.5 JSONObject的使用\"></a>7.5 JSONObject的使用</h3><p>JSONObject是JSON字符串与pojo对象转换过程中的中间表达类型，实现了Map接口，可以看做是一个模拟JSON对象键值对再加上多层嵌套的数据集合，对象的每一个基本类型属性是map里的一个key-value，一个非基本类型属性是一个嵌套的JSONObject对象（key是属性名称，value是表示这个属性值的对象的JSONObject）。如果以前用过apache beanutils里的DynamicBean之类的，就知道JSONObject也是一种动态描述Bean的实现，相当于是拆解了Bean本身的结构与数据。这时候由于JSONObject里可能会没有记录全部的Bean类型数据，例如泛型的具体子类型之类的元数据，如果JSONObject与正常的POJO混用，出现问题的概率较高。<br>下列方式尽量不要使用：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">TestBean</span></span>&#123;</div><div class=\"line\">    <span class=\"meta\">@Setter</span> <span class=\"meta\">@Getter</span></div><div class=\"line\">    <span class=\"keyword\">private</span> TestBean1 testBean1;</div><div class=\"line\">    </div><div class=\"line\">    <span class=\"meta\">@Setter</span> <span class=\"meta\">@Getter</span></div><div class=\"line\">    <span class=\"keyword\">private</span> JSONObject testBean2; <span class=\"comment\">// 尽量不要在POJO里用JSONObject</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>应该从设计上改为都用POJO比较合适:</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">TestBean</span></span>&#123;</div><div class=\"line\">    <span class=\"meta\">@Setter</span> <span class=\"meta\">@Getter</span></div><div class=\"line\">    <span class=\"keyword\">private</span> TestBean1 testBean1;</div><div class=\"line\">    </div><div class=\"line\">    <span class=\"meta\">@Setter</span> <span class=\"meta\">@Getter</span></div><div class=\"line\">    <span class=\"keyword\">private</span> TestBean2 testBean2;; <span class=\"comment\">// 使用POJO</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>相对的，写一些临时性的测试代码，demo代码，可以直接全部用JSONObject先快速run起来。</p>\n<p>同理，jsonstring中嵌套jsonstring也尽量不要用，例如：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">&#123;</div><div class=\"line\">    <span class=\"string\">\"name\"</span>:<span class=\"string\">\"zhangsan\"</span>,</div><div class=\"line\">    <span class=\"string\">\"score\"</span>:<span class=\"string\">\"&#123;\\\"math\\\":78,\\\"history\\\":82&#125;\"</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>应该改为全部都是JSON风格的结构：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">&#123;</div><div class=\"line\">    <span class=\"string\">\"name\"</span>:<span class=\"string\">\"zhangsan\"</span>,</div><div class=\"line\">    <span class=\"string\">\"score\"</span>:&#123;</div><div class=\"line\">        <span class=\"string\">\"math\"</span>:<span class=\"number\">78</span>,</div><div class=\"line\">        <span class=\"string\">\"history\"</span>:<span class=\"number\">82</span></div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>另外，对于jsonstring转POJO（或POJO转jsonstring），尽量使用直接转的方式，而不是先转成JSONObject过渡的方式。特别是对于Fastjson，由于性能优化的考虑，这两个执行的代码是不一样的，可能导致不一样的结果。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\">String jsonstring = <span class=\"string\">\"&#123;\\\"a\\\":12&#125;\"</span>;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 不推荐这种方式</span></div><div class=\"line\"><span class=\"comment\">// 除非这里需要对jsonObject做一些简单处理</span></div><div class=\"line\">JSONObject jsonObject = JSON.parseObject(jsonstring);</div><div class=\"line\">A a = jsonObject.toJavaObject(A.class);</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 推荐方式</span></div><div class=\"line\">A a = JSON.parseObject(jsonstring, A.class);</div></pre></td></tr></table></figure>\n<h3 id=\"7-6_Hibernate_u76F8_u5173_u95EE_u9898\"><a href=\"#7-6_Hibernate_u76F8_u5173_u95EE_u9898\" class=\"headerlink\" title=\"7.6 Hibernate相关问题\"></a>7.6 Hibernate相关问题</h3><p>懒加载与级联，可能导致出现问题，例如hibernate，建议封装一层VO类型来序列化。使用VO类还有一个好处，就是可以去掉一些没用的属性，减少数据量，同时可以加上额外的属性。</p>\n<h3 id=\"7-7__u6DF1_u5C42_u5D4C_u5957_u4E0E_u6CDB_u578B_u95EE_u9898\"><a href=\"#7-7__u6DF1_u5C42_u5D4C_u5957_u4E0E_u6CDB_u578B_u95EE_u9898\" class=\"headerlink\" title=\"7.7 深层嵌套与泛型问题\"></a>7.7 深层嵌套与泛型问题</h3><p>尽量不要在使用过多的层次嵌套的同时使用泛型（List、Map等），可能导致类型丢失，而且问题比较难查。</p>\n<h3 id=\"7-8__u62BD_u8C61_u7C7B_u578B_u4E0E_u5B50_u7C7B_u578B_u95EE_u9898\"><a href=\"#7-8__u62BD_u8C61_u7C7B_u578B_u4E0E_u5B50_u7C7B_u578B_u95EE_u9898\" class=\"headerlink\" title=\"7.8 抽象类型与子类型问题\"></a>7.8 抽象类型与子类型问题</h3><p>尽量不要在同一个Bean的层次结构里使用多个子类型对象，可能导致类型丢失，而且问题比较难查。当然我们可以通过代码显示的传递各种正确的类型，但是这样做引入了更多的不确定性。良好的做法应该是一开始设计时就避免出现这些问题。</p>\n<h3 id=\"7-9__u907F_u514D_u5FAA_u73AF_u5F15_u7528\"><a href=\"#7-9__u907F_u514D_u5FAA_u73AF_u5F15_u7528\" class=\"headerlink\" title=\"7.9 避免循环引用\"></a>7.9 避免循环引用</h3><p>尽量避免循环引用，这个虽然可以通过序列化特性禁掉，但是如果能避免则避免。</p>\n<h3 id=\"7-10__u6CE8_u610F_u7F16_u7801_u548C_u4E0D_u53EF_u89C1_u5B57_u7B26_uFF08_u7279_u522B_u662F_u4E8C_u8FDB_u5236_u6570_u636E_u6D41_uFF09\"><a href=\"#7-10__u6CE8_u610F_u7F16_u7801_u548C_u4E0D_u53EF_u89C1_u5B57_u7B26_uFF08_u7279_u522B_u662F_u4E8C_u8FDB_u5236_u6570_u636E_u6D41_uFF09\" class=\"headerlink\" title=\"7.10 注意编码和不可见字符（特别是二进制数据流）\"></a>7.10 注意编码和不可见字符（特别是二进制数据流）</h3><p>对于InputStream、OutputStream的处理，有时候会报一些奇怪的错误，not match之类的，这时候也许我们看日志里的json字符串可能很正常，但就是出错。</p>\n<p>这时可能就是编码的问题了，可能是导致字符错乱，也可能是因为UTF-8文件的BOM头，这些潜在的问题可能在二进制数据转文本的时候，因为一些不可见字符无法显示，导致日志看起来只有正常字符而是正确的，问题很难排查。</p>\n<p>处理办法就是按二进制的方式把Stream保存起来，然后按hex方式查看，看看是否有多余字符，或者其他错误。</p>\n<h2 id=\"8-fastjson_u7684_u6700_u4F73_u5B9E_u8DF5\"><a href=\"#8-fastjson_u7684_u6700_u4F73_u5B9E_u8DF5\" class=\"headerlink\" title=\"8.fastjson的最佳实践\"></a>8.fastjson的最佳实践</h2><h3 id=\"8-1_Maven_u4E0B_u5F15_u5165Fastjson\"><a href=\"#8-1_Maven_u4E0B_u5F15_u5165Fastjson\" class=\"headerlink\" title=\"8.1 Maven下引入Fastjson\"></a>8.1 Maven下引入Fastjson</h3><p>pom.xml文件里添加依赖即可：</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>com.alibaba<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>fastjson<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>1.2.32<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></div></pre></td></tr></table></figure>\n<h3 id=\"8-2__u5E8F_u5217_u5316_u4E00_u4E2A_u5BF9_u8C61_u6210JSON_u5B57_u7B26_u4E32\"><a href=\"#8-2__u5E8F_u5217_u5316_u4E00_u4E2A_u5BF9_u8C61_u6210JSON_u5B57_u7B26_u4E32\" class=\"headerlink\" title=\"8.2 序列化一个对象成JSON字符串\"></a>8.2 序列化一个对象成JSON字符串</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">User user = <span class=\"keyword\">new</span> User();</div><div class=\"line\">user.setName(<span class=\"string\">\"校长\"</span>);</div><div class=\"line\">user.setAge(<span class=\"number\">3</span>);</div><div class=\"line\">user.setSalary(<span class=\"keyword\">new</span> BigDecimal(<span class=\"string\">\"123456789.0123\"</span>));</div><div class=\"line\">String jsonString = JSON.toJSONString(user);</div><div class=\"line\">System.out.println(jsonString);</div><div class=\"line\"><span class=\"comment\">// 输出 &#123;\"age\":3,\"name\":\"校长\",\"old\":false,\"salary\":123456789.0123&#125;</span></div></pre></td></tr></table></figure>\n<h3 id=\"8-3__u53CD_u5E8F_u5217_u5316_u4E00_u4E2AJSON_u5B57_u7B26_u4E32_u6210Java_u5BF9_u8C61\"><a href=\"#8-3__u53CD_u5E8F_u5217_u5316_u4E00_u4E2AJSON_u5B57_u7B26_u4E32_u6210Java_u5BF9_u8C61\" class=\"headerlink\" title=\"8.3 反序列化一个JSON字符串成Java对象\"></a>8.3 反序列化一个JSON字符串成Java对象</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"> String jsonString = <span class=\"string\">\"&#123;\\\"age\\\":3,\\\"birthdate\\\":1496738822842,\\\"name\\\":\\\"校长\\\",\\\"old\\\":true,\\\"salary\\\":123456789.0123&#125;\"</span>;</div><div class=\"line\"> User u = JSON.parseObject(jsonString ,User.class);</div><div class=\"line\"> System.out.println(u.getName());</div><div class=\"line\"> <span class=\"comment\">// 输出 校长</span></div><div class=\"line\"></div><div class=\"line\">String jsonStringArray = <span class=\"string\">\"[&#123;\\\"age\\\":3,\\\"birthdate\\\":1496738822842,\\\"name\\\":\\\"校长\\\",\\\"old\\\":true,\\\"salary\\\":123456789.0123&#125;]\"</span>;</div><div class=\"line\">List&lt;User&gt; userList = JSON.parseArray(jsonStringArray, User.class);</div><div class=\"line\">System.out.println(userList.size());</div><div class=\"line\"><span class=\"comment\">// 输出 1</span></div></pre></td></tr></table></figure>\n<h3 id=\"8-4__u65E5_u671F_u683C_u5F0F_u5904_u7406\"><a href=\"#8-4__u65E5_u671F_u683C_u5F0F_u5904_u7406\" class=\"headerlink\" title=\"8.4 日期格式处理\"></a>8.4 日期格式处理</h3><p>Fastjson能识别下面这么多种日期格式的字符串：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">final</span> <span class=\"keyword\">static</span> String            defaultPatttern    = <span class=\"string\">\"yyyy-MM-dd HH:mm:ss\"</span>;</div><div class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">final</span> <span class=\"keyword\">static</span> DateTimeFormatter defaultFormatter   = DateTimeFormatter.ofPattern(defaultPatttern);</div><div class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">final</span> <span class=\"keyword\">static</span> DateTimeFormatter formatter_dt19_tw  = DateTimeFormatter.ofPattern(<span class=\"string\">\"yyyy/MM/dd HH:mm:ss\"</span>);</div><div class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">final</span> <span class=\"keyword\">static</span> DateTimeFormatter formatter_dt19_cn  = DateTimeFormatter.ofPattern(<span class=\"string\">\"yyyy年M月d日 HH:mm:ss\"</span>);</div><div class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">final</span> <span class=\"keyword\">static</span> DateTimeFormatter formatter_dt19_cn_1  = DateTimeFormatter.ofPattern(<span class=\"string\">\"yyyy年M月d日 H时m分s秒\"</span>);</div><div class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">final</span> <span class=\"keyword\">static</span> DateTimeFormatter formatter_dt19_kr  = DateTimeFormatter.ofPattern(<span class=\"string\">\"yyyy년M월d일 HH:mm:ss\"</span>);</div><div class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">final</span> <span class=\"keyword\">static</span> DateTimeFormatter formatter_dt19_us  = DateTimeFormatter.ofPattern(<span class=\"string\">\"MM/dd/yyyy HH:mm:ss\"</span>);</div><div class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">final</span> <span class=\"keyword\">static</span> DateTimeFormatter formatter_dt19_eur = DateTimeFormatter.ofPattern(<span class=\"string\">\"dd/MM/yyyy HH:mm:ss\"</span>);</div><div class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">final</span> <span class=\"keyword\">static</span> DateTimeFormatter formatter_dt19_de  = DateTimeFormatter.ofPattern(<span class=\"string\">\"dd.MM.yyyy HH:mm:ss\"</span>);</div><div class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">final</span> <span class=\"keyword\">static</span> DateTimeFormatter formatter_dt19_in  = DateTimeFormatter.ofPattern(<span class=\"string\">\"dd-MM-yyyy HH:mm:ss\"</span>);</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">final</span> <span class=\"keyword\">static</span> DateTimeFormatter formatter_d8       = DateTimeFormatter.ofPattern(<span class=\"string\">\"yyyyMMdd\"</span>);</div><div class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">final</span> <span class=\"keyword\">static</span> DateTimeFormatter formatter_d10_tw   = DateTimeFormatter.ofPattern(<span class=\"string\">\"yyyy/MM/dd\"</span>);</div><div class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">final</span> <span class=\"keyword\">static</span> DateTimeFormatter formatter_d10_cn   = DateTimeFormatter.ofPattern(<span class=\"string\">\"yyyy年M月d日\"</span>);</div><div class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">final</span> <span class=\"keyword\">static</span> DateTimeFormatter formatter_d10_kr   = DateTimeFormatter.ofPattern(<span class=\"string\">\"yyyy년M월d일\"</span>);</div><div class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">final</span> <span class=\"keyword\">static</span> DateTimeFormatter formatter_d10_us   = DateTimeFormatter.ofPattern(<span class=\"string\">\"MM/dd/yyyy\"</span>);</div><div class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">final</span> <span class=\"keyword\">static</span> DateTimeFormatter formatter_d10_eur  = DateTimeFormatter.ofPattern(<span class=\"string\">\"dd/MM/yyyy\"</span>);</div><div class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">final</span> <span class=\"keyword\">static</span> DateTimeFormatter formatter_d10_de   = DateTimeFormatter.ofPattern(<span class=\"string\">\"dd.MM.yyyy\"</span>);</div><div class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">final</span> <span class=\"keyword\">static</span> DateTimeFormatter formatter_d10_in   = DateTimeFormatter.ofPattern(<span class=\"string\">\"dd-MM-yyyy\"</span>);</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">final</span> <span class=\"keyword\">static</span> DateTimeFormatter ISO_FIXED_FORMAT =</div><div class=\"line\">        DateTimeFormatter.ofPattern(<span class=\"string\">\"yyyy-MM-dd HH:mm:ss\"</span>).withZone(ZoneId.systemDefault());</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">final</span> <span class=\"keyword\">static</span> String formatter_iso8601_pattern     = <span class=\"string\">\"yyyy-MM-dd'T'HH:mm:ss\"</span>;</div><div class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">final</span> <span class=\"keyword\">static</span> DateTimeFormatter formatter_iso8601  = DateTimeFormatter.ofPattern(formatter_iso8601_pattern);</div></pre></td></tr></table></figure>\n<p>默认序列化Date输出使用”yyyy-MM-dd HH:mm:ss”格式，可以用UseISO8601DateFormat特性换成”yyyy-MM-dd’T’HH:mm:ss”格式。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div></pre></td><td class=\"code\"><pre><div class=\"line\">JSON.defaultTimeZone = TimeZone.getTimeZone(<span class=\"string\">\"Asia/Shanghai\"</span>);</div><div class=\"line\">JSON.defaultLocale = Locale.US;</div><div class=\"line\">        </div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Model</span> </span>&#123;</div><div class=\"line\">        <span class=\"meta\">@JSONField</span>(format = <span class=\"string\">\"MMM dd, yyyy h:mm:ss aa\"</span>)</div><div class=\"line\">        <span class=\"keyword\">private</span> java.util.Date date;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">public</span> java.util.<span class=\"function\">Date <span class=\"title\">getDate</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">            <span class=\"keyword\">return</span> date;</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setDate</span><span class=\"params\">(java.util.Date date)</span> </span>&#123;</div><div class=\"line\">            <span class=\"keyword\">this</span>.date = date;</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"meta\">@JSONField</span>(format = <span class=\"string\">\"MMM-dd-yyyy h:mm:ss aa\"</span>)</div><div class=\"line\">        <span class=\"keyword\">public</span> java.sql.Date date2;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h3 id=\"8-5__u5E38_u89C1_u5E8F_u5217_u5316_u7279_u6027_u7684_u4F7F_u7528\"><a href=\"#8-5__u5E38_u89C1_u5E8F_u5217_u5316_u7279_u6027_u7684_u4F7F_u7528\" class=\"headerlink\" title=\"8.5 常见序列化特性的使用\"></a>8.5 常见序列化特性的使用</h3><p>Fastjson的序列化特性定义在枚举类com\\alibaba\\fastjson\\serializer\\SerializerFeature.java中，目前正好有30项。<br>可以通过设置多个特性到FastjsonConfig中全局使用，也可以在某个具体的JSON.writeJSONString时作为参数使用。</p>\n<ol>\n<li>QuoteFieldNames, //key使用引号</li>\n<li>UseSingleQuotes, //使用单引号</li>\n<li>WriteMapNullValue, //输出Map的null值</li>\n<li>WriteEnumUsingToString, //枚举属性输出toString的结果</li>\n<li>WriteEnumUsingName, //枚举数据输出name</li>\n<li>UseISO8601DateFormat, //使用日期格式</li>\n<li>WriteNullListAsEmpty, //List为空则输出[]</li>\n<li>WriteNullStringAsEmpty, //String为空则输出””</li>\n<li>WriteNullNumberAsZero, //Number类型为空则输出0</li>\n<li>WriteNullBooleanAsFalse, //Boolean类型为空则输出false</li>\n<li>SkipTransientField,</li>\n<li>SortField, //排序字段</li>\n<li>WriteTabAsSpecial,</li>\n<li>PrettyFormat, // 格式化JSON缩进</li>\n<li>WriteClassName, // 输出类名</li>\n<li>DisableCircularReferenceDetect, // 禁止循环引用</li>\n<li>WriteSlashAsSpecial, // 对斜杠’/’进行转义</li>\n<li>BrowserCompatible,</li>\n<li>WriteDateUseDateFormat, // 全局修改日期格式,默认为false。JSON.DEFFAULT_DATE_FORMAT = “yyyy-MM-dd”;JSON.toJSONString(obj, SerializerFeature.WriteDateUseDateFormat);</li>\n<li>NotWriteRootClassName,</li>\n<li>DisableCheckSpecialChar,</li>\n<li>BeanToArray,</li>\n<li>WriteNonStringKeyAsString,</li>\n<li>NotWriteDefaultValue,</li>\n<li>BrowserSecure,</li>\n<li>IgnoreNonFieldGetter,</li>\n<li>WriteNonStringValueAsString,</li>\n<li>IgnoreErrorGetter,</li>\n<li>WriteBigDecimalAsPlain,</li>\n<li>MapSortField</li>\n</ol>\n<p>使用示例如下（可以<a href=\"http://blog.csdn.net/u010246789/article/details/52539576\" target=\"_blank\" rel=\"external\">参见此处</a>）：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\">Word word = <span class=\"keyword\">new</span> Word();</div><div class=\"line\">word.setA(<span class=\"string\">\"a\"</span>);</div><div class=\"line\">word.setB(<span class=\"number\">2</span>);</div><div class=\"line\">word.setC(<span class=\"keyword\">true</span>);</div><div class=\"line\">word.setD(<span class=\"string\">\"d\"</span>);</div><div class=\"line\">word.setE(<span class=\"string\">\"\"</span>);</div><div class=\"line\">word.setF(<span class=\"keyword\">null</span>);</div><div class=\"line\">word.setDate(<span class=\"keyword\">new</span> Date());</div><div class=\"line\"></div><div class=\"line\">System.out.println(JSON.toJSONString(word));</div><div class=\"line\">System.out.println(JSON.toJSONString(word, SerializerFeature.PrettyFormat,</div><div class=\"line\">    SerializerFeature.WriteMapNullValue, SerializerFeature.WriteNullStringAsEmpty,</div><div class=\"line\">    SerializerFeature.DisableCircularReferenceDetect,</div><div class=\"line\">    SerializerFeature.WriteNullListAsEmpty));</div></pre></td></tr></table></figure>\n<h3 id=\"8-6_Annotation_u6CE8_u89E3_u7684_u4F7F_u7528\"><a href=\"#8-6_Annotation_u6CE8_u89E3_u7684_u4F7F_u7528\" class=\"headerlink\" title=\"8.6 Annotation注解的使用\"></a>8.6 Annotation注解的使用</h3><p>1) JSONField</p>\n<p>可以配置在属性（setter、getter）和字段（必须是public field）上。<br>详情参见此处：<a href=\"https://github.com/alibaba/fastjson/wiki/JSONField\" target=\"_blank\" rel=\"external\">JSONField用法</a></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">package</span> com.alibaba.fastjson.annotation;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"meta\">@interface</span> JSONField &#123;</div><div class=\"line\">    <span class=\"comment\">// 配置序列化和反序列化的顺序，1.1.42版本之后才支持</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">ordinal</span><span class=\"params\">()</span> <span class=\"keyword\">default</span> 0</span>;</div><div class=\"line\"></div><div class=\"line\">     <span class=\"comment\">// 指定字段的名称</span></div><div class=\"line\">    <span class=\"function\">String <span class=\"title\">name</span><span class=\"params\">()</span> <span class=\"keyword\">default</span> \"\"</span>;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// 指定字段的格式，对日期格式有用</span></div><div class=\"line\">    <span class=\"function\">String <span class=\"title\">format</span><span class=\"params\">()</span> <span class=\"keyword\">default</span> \"\"</span>;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// 是否序列化</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">boolean</span> <span class=\"title\">serialize</span><span class=\"params\">()</span> <span class=\"keyword\">default</span> <span class=\"keyword\">true</span></span>;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// 是否反序列化</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">boolean</span> <span class=\"title\">deserialize</span><span class=\"params\">()</span> <span class=\"keyword\">default</span> <span class=\"keyword\">true</span></span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">@JSONField</span>(name=<span class=\"string\">\"ID\"</span>)</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">getId</span><span class=\"params\">()</span> </span>&#123;<span class=\"keyword\">return</span> id;&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 配置date序列化和反序列使用yyyyMMdd日期格式</span></div><div class=\"line\"><span class=\"meta\">@JSONField</span>(format=<span class=\"string\">\"yyyyMMdd\"</span>)</div><div class=\"line\"><span class=\"keyword\">public</span> Date date1;  </div><div class=\"line\"></div><div class=\"line\"> <span class=\"comment\">// 不序列化</span></div><div class=\"line\"> <span class=\"meta\">@JSONField</span>(serialize=<span class=\"keyword\">false</span>)</div><div class=\"line\"> <span class=\"keyword\">public</span> Date date2;</div><div class=\"line\"></div><div class=\"line\"> <span class=\"comment\">// 不反序列化</span></div><div class=\"line\"> <span class=\"meta\">@JSONField</span>(deserialize=<span class=\"keyword\">false</span>)</div><div class=\"line\"> <span class=\"keyword\">public</span> Date date3;</div><div class=\"line\"></div><div class=\"line\"> <span class=\"comment\">// 按ordinal排序</span></div><div class=\"line\"> <span class=\"meta\">@JSONField</span>(ordinal = <span class=\"number\">2</span>)</div><div class=\"line\"> <span class=\"keyword\">private</span> <span class=\"keyword\">int</span> f1;</div><div class=\"line\"></div><div class=\"line\"> <span class=\"meta\">@JSONField</span>(ordinal = <span class=\"number\">1</span>)</div><div class=\"line\"> <span class=\"keyword\">private</span> <span class=\"keyword\">int</span> f2;</div></pre></td></tr></table></figure>\n<p>2) JSONType</p>\n<ul>\n<li>自定义序列化：<a href=\"https://github.com/alibaba/fastjson/wiki/JSONType_serializer\" target=\"_blank\" rel=\"external\">ObjectSerializer</a></li>\n<li>子类型处理：<a href=\"https://github.com/alibaba/fastjson/wiki/JSONType_seeAlso_cn\" target=\"_blank\" rel=\"external\">SeeAlso</a></li>\n<li>JSONType.alphabetic属性: fastjson缺省时会使用字母序序列化，如果你是希望按照java fields/getters的自然顺序序列化，可以配置JSONType.alphabetic，使用方法如下：</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">@JSONType</span>(alphabetic = <span class=\"keyword\">false</span>)</div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">B</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">int</span> f2;</div><div class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">int</span> f1;</div><div class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">int</span> f0;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h3 id=\"8-7__u81EA_u5B9A_u4E49_u5E8F_u5217_u5316_u4E0E_u53CD_u5E8F_u5217_u5316\"><a href=\"#8-7__u81EA_u5B9A_u4E49_u5E8F_u5217_u5316_u4E0E_u53CD_u5E8F_u5217_u5316\" class=\"headerlink\" title=\"8.7 自定义序列化与反序列化\"></a>8.7 自定义序列化与反序列化</h3><ul>\n<li>自定义序列化</li>\n</ul>\n<p>只需要2步：<a href=\"https://github.com/alibaba/fastjson/wiki/ObjectSerializer_cn\" target=\"_blank\" rel=\"external\">参见此处</a><br>1)实现ObjectSerializer</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">CharacterSerializer</span> <span class=\"keyword\">implements</span> <span class=\"title\">ObjectSerializer</span> </span>&#123;</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">write</span><span class=\"params\">(JSONSerializer serializer, </span></span></div><div class=\"line\">                      Object object, </div><div class=\"line\">                      Object fieldName, </div><div class=\"line\">                      Type fieldType, </div><div class=\"line\">                      <span class=\"keyword\">int</span> features) <span class=\"keyword\">throws</span> IOException &#123;</div><div class=\"line\">        SerializeWriter out = serializer.out;</div><div class=\"line\">    </div><div class=\"line\">        Character value = (Character) object;</div><div class=\"line\">        <span class=\"keyword\">if</span> (value == <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">            out.writeString(<span class=\"string\">\"\"</span>);</div><div class=\"line\">            <span class=\"keyword\">return</span>;</div><div class=\"line\">        &#125;</div><div class=\"line\">    </div><div class=\"line\">        <span class=\"keyword\">char</span> c = value.charValue();</div><div class=\"line\">        <span class=\"keyword\">if</span> (c == <span class=\"number\">0</span>) &#123;</div><div class=\"line\">            out.writeString(<span class=\"string\">\"\\u0000\"</span>);</div><div class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">            out.writeString(value.toString());</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>2)注册ObjectSerializer</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">SerializeConfig.getGlobalInstance().put(Character.class, <span class=\"keyword\">new</span> CharacterSerializer());</div></pre></td></tr></table></figure>\n<ul>\n<li>自定义反序列化</li>\n</ul>\n<p>只需要2步：<a href=\"https://github.com/alibaba/fastjson/wiki/ObjectDeserializer_cn\" target=\"_blank\" rel=\"external\">参见此处</a></p>\n<p>1)自定义实现ObjectDeserializer</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">enum</span> OrderActionEnum &#123;</div><div class=\"line\">                                    FAIL(<span class=\"number\">1</span>), SUCC(<span class=\"number\">0</span>);</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">int</span> code;</div><div class=\"line\"></div><div class=\"line\">    OrderActionEnum(<span class=\"keyword\">int</span> code)&#123;</div><div class=\"line\">        <span class=\"keyword\">this</span>.code = code;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Msg</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">public</span> OrderActionEnum actionEnum;</div><div class=\"line\">    <span class=\"keyword\">public</span> String          body;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">OrderActionEnumDeser</span> <span class=\"keyword\">implements</span> <span class=\"title\">ObjectDeserializer</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"meta\">@SuppressWarnings</span>(<span class=\"string\">\"unchecked\"</span>)</div><div class=\"line\">    <span class=\"meta\">@Override</span></div><div class=\"line\">    <span class=\"keyword\">public</span> &lt;T&gt; <span class=\"function\">T <span class=\"title\">deserialze</span><span class=\"params\">(DefaultJSONParser parser, Type type, Object fieldName)</span> </span>&#123;</div><div class=\"line\">        Integer intValue = parser.parseObject(<span class=\"keyword\">int</span>.class);</div><div class=\"line\">        <span class=\"keyword\">if</span> (intValue == <span class=\"number\">1</span>) &#123;</div><div class=\"line\">            <span class=\"keyword\">return</span> (T) OrderActionEnum.FAIL;</div><div class=\"line\">        &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (intValue == <span class=\"number\">0</span>) &#123;</div><div class=\"line\">            <span class=\"keyword\">return</span> (T) OrderActionEnum.SUCC;</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> IllegalStateException();</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"meta\">@Override</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">getFastMatchToken</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> JSONToken.LITERAL_INT;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>2)注册并使用ObjectDeserializer</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\">ParserConfig.getGlobalInstance().putDeserializer(OrderActionEnum.class, <span class=\"keyword\">new</span> OrderActionEnumDeser());</div><div class=\"line\"></div><div class=\"line\">&#123;</div><div class=\"line\">    Msg msg = JSON.parseObject(<span class=\"string\">\"&#123;\\\"actionEnum\\\":1,\\\"body\\\":\\\"A\\\"&#125;\"</span>, Msg.class);</div><div class=\"line\">    Assert.assertEquals(msg.body, <span class=\"string\">\"A\"</span>);</div><div class=\"line\">    Assert.assertEquals(msg.actionEnum, OrderActionEnum.FAIL);</div><div class=\"line\">&#125;</div><div class=\"line\">&#123;</div><div class=\"line\">    Msg msg = JSON.parseObject(<span class=\"string\">\"&#123;\\\"actionEnum\\\":0,\\\"body\\\":\\\"B\\\"&#125;\"</span>, Msg.class);</div><div class=\"line\">    Assert.assertEquals(msg.body, <span class=\"string\">\"B\"</span>);</div><div class=\"line\">    Assert.assertEquals(msg.actionEnum, OrderActionEnum.SUCC);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h3 id=\"8-8__u81EA_u5B9A_u4E49_u5E8F_u5217_u5316_u4E4B_u8FC7_u6EE4_u5668\"><a href=\"#8-8__u81EA_u5B9A_u4E49_u5E8F_u5217_u5316_u4E4B_u8FC7_u6EE4_u5668\" class=\"headerlink\" title=\"8.8 自定义序列化之过滤器\"></a>8.8 自定义序列化之过滤器</h3><ul>\n<li>全局的过滤器：JSON.toJSONString方法的参数中可以配置处理所有类型的SerializeFilter</li>\n<li>类级别过滤器：<a href=\"https://github.com/alibaba/fastjson/wiki/Class_Level_SerializeFilter\" target=\"_blank\" rel=\"external\">Class_Level_SerializeFilter</a></li>\n<li>属性过滤器：<a href=\"https://github.com/alibaba/fastjson/wiki/%E4%BD%BF%E7%94%A8SimplePropertyPreFilter%E8%BF%87%E6%BB%A4%E5%B1%9E%E6%80%A7\" target=\"_blank\" rel=\"external\">使用PropertyPreFilter过滤属性</a></li>\n<li>多余字段处理器：<a href=\"https://github.com/alibaba/fastjson/wiki/ParseProcess\" target=\"_blank\" rel=\"external\">ExtraProcessor 用于处理多余的字段、<br>ExtraTypeProvider用于处理多余字段时提供类型信息</a></li>\n<li>定制反序列化：<a href=\"https://github.com/alibaba/fastjson/wiki/ExtraProcessable\" target=\"_blank\" rel=\"external\">在fastjson-1.2.9版本后提供了ExtraProcessable接口，用于定制对象的反序列化功能</a>，可用于添加没有的字段</li>\n<li>标签过滤：<a href=\"https://github.com/alibaba/fastjson/wiki/LabelFilter\" target=\"_blank\" rel=\"external\">JSONField(label)，相当于分组</a></li>\n<li>自动识别嵌套对象子类型：<a href=\"https://github.com/alibaba/fastjson/wiki/FieldTypeResolver\" target=\"_blank\" rel=\"external\">FieldTypeResolver</a></li>\n</ul>\n<h3 id=\"8-9__u4E0ESpring_MVC_u7684_u914D_u5408_u4F7F_u7528\"><a href=\"#8-9__u4E0ESpring_MVC_u7684_u914D_u5408_u4F7F_u7528\" class=\"headerlink\" title=\"8.9 与Spring MVC的配合使用\"></a>8.9 与Spring MVC的配合使用</h3><p>FastJson 提供了Spring MVC HttpMessageConverter的实现，将POJO输出为JSONP，支持跨域数据访问。</p>\n<p>FastJsonpHttpMessageConverter4 for Spring MVC 4.2+：</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">mvc:annotation-driven</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">mvc:message-converters</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">bean</span></span></div><div class=\"line\">            <span class=\"attr\">class</span>=<span class=\"string\">\"com.alibaba.fastjson.support.spring.FastJsonpHttpMessageConverter4\"</span>&gt;</div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"supportedMediaTypes\"</span>&gt;</span></div><div class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">list</span>&gt;</span></div><div class=\"line\">                    <span class=\"tag\">&lt;<span class=\"name\">value</span>&gt;</span>application/json;charset=UTF-8<span class=\"tag\">&lt;/<span class=\"name\">value</span>&gt;</span></div><div class=\"line\">                <span class=\"tag\">&lt;/<span class=\"name\">list</span>&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;/<span class=\"name\">property</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">bean</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">mvc:message-converters</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">mvc:annotation-driven</span>&gt;</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">mvc:default-servlet-handler</span> /&gt;</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">bean</span> <span class=\"attr\">id</span>=<span class=\"string\">\"fastJsonpResponseBodyAdvice\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"com.alibaba.fastjson.support.spring.FastJsonpResponseBodyAdvice\"</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">constructor-arg</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">list</span>&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">value</span>&gt;</span>callback<span class=\"tag\">&lt;/<span class=\"name\">value</span>&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">value</span>&gt;</span>jsonp<span class=\"tag\">&lt;/<span class=\"name\">value</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">list</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">constructor-arg</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">bean</span>&gt;</span></div></pre></td></tr></table></figure>\n<p><a href=\"https://github.com/alibaba/fastjson/wiki/FastJsonpHttpMessageConverter4_CN\" target=\"_blank\" rel=\"external\">详细配置参见此处</a></p>\n<h3 id=\"8-10__u4E0ESpring_Boot_u7684_u96C6_u6210_u4F7F_u7528\"><a href=\"#8-10__u4E0ESpring_Boot_u7684_u96C6_u6210_u4F7F_u7528\" class=\"headerlink\" title=\"8.10 与Spring Boot的集成使用\"></a>8.10 与Spring Boot的集成使用</h3><p>参见此处：<a href=\"https://github.com/storezhang/utils/tree/master/spring-boot-starter-fastjson\" target=\"_blank\" rel=\"external\">spring-boot-starter-fastjson</a></p>\n<h3 id=\"8-11__u6CDB_u578B_u5904_u7406\"><a href=\"#8-11__u6CDB_u578B_u5904_u7406\" class=\"headerlink\" title=\"8.11 泛型处理\"></a>8.11 泛型处理</h3><p><a href=\"https://github.com/alibaba/fastjson/wiki/Typ\" target=\"_blank\" rel=\"external\">在fastjson中提供了一个用于处理泛型反序列化的类TypeReference</a>eReference</p>\n<h3 id=\"8-12jaxrs_u652F_u6301\"><a href=\"#8-12jaxrs_u652F_u6301\" class=\"headerlink\" title=\"8.12jaxrs支持\"></a>8.12jaxrs支持</h3><p>FastJson 提供了JAX-RS Provider的实现 <a href=\"https://github.com/alibaba/fastjson/wiki/FastJsonProvider_CN\" target=\"_blank\" rel=\"external\">FastJsonProvider</a></p>\n<p>可用于在构建Restful服务时使用FastJson进行数据的Serialize and Deserialize</p>\n<h3 id=\"8-13_swagger_u652F_u6301\"><a href=\"#8-13_swagger_u652F_u6301\" class=\"headerlink\" title=\"8.13 swagger支持\"></a>8.13 swagger支持</h3><p><a href=\"https://github.com/alibaba/fastjson/pull/716\" target=\"_blank\" rel=\"external\">增加对swagger的支持</a></p>\n<p>更多功能 todo list</p>\n<h2 id=\"9-Fastjson_u7684_u8BBE_u8BA1_u8BF4_u660E\"><a href=\"#9-Fastjson_u7684_u8BBE_u8BA1_u8BF4_u660E\" class=\"headerlink\" title=\"9.Fastjson的设计说明\"></a>9.Fastjson的设计说明</h2><p>todo list</p>"}],"PostAsset":[],"PostCategory":[],"PostTag":[{"post_id":"cj3wtirgl0007f4bchzbxyqcm","tag_id":"cj3wtirgl0008f4bcab5abqot","_id":"cj3wtirgm0009f4bcc9hdyf75"},{"post_id":"cj3wtirew0000f4bcj728mhz9","tag_id":"cj3y3i2uw0000oyfy7118h1kj","_id":"cj3y3i2v20002oyfyfaz2oau7"},{"post_id":"cj3wtirgh0004f4bcts9gai3o","tag_id":"cj3y3i2v10001oyfyd67zsrb9","_id":"cj3y3i2v30003oyfys4iwk72d"}],"Tag":[{"name":"dubbox,swagger","_id":"cj3wtirf60001f4bccmpg6brb"},{"name":"oracle mysql database","_id":"cj3wtirgi0005f4bcuc071gb5"},{"name":"json","_id":"cj3wtirgl0008f4bcab5abqot"},{"name":"dubbo","_id":"cj3y3i2uw0000oyfy7118h1kj"},{"name":"database","_id":"cj3y3i2v10001oyfyd67zsrb9"}]}}